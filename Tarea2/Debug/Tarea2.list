
Tarea2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006818  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006adc  08006adc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae4  08006ae4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae8  08006ae8  00016ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  2000009c  08006b88  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08006b88  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b476  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d0  00000000  00000000  0003b58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001150  00000000  00000000  00040510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f10f  00000000  00000000  00041660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a076  00000000  00000000  0007076f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012cf8e  00000000  00000000  0008a7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000684c  00000000  00000000  001b7774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001bdfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000009c 	.word	0x2000009c
 8000210:	00000000 	.word	0x00000000
 8000214:	080069f4 	.word	0x080069f4

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	200000a0 	.word	0x200000a0
 8000230:	080069f4 	.word	0x080069f4

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800055c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000560:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d013      	beq.n	8000594 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800056c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000570:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000574:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800057c:	e000      	b.n	8000580 <ITM_SendChar+0x2c>
    {
      __NOP();
 800057e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800058a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b0:	4907      	ldr	r1, [pc, #28]	; (80005d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4013      	ands	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40021000 	.word	0x40021000

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 ff84 	bl	8001516 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f841 	bl	8000694 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 fa25 	bl	8000a60 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000616:	f000 f8a3 	bl	8000760 <MX_ADC1_Init>
  MX_ICACHE_Init();
 800061a:	f000 f917 	bl	800084c <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 800061e:	f000 f929 	bl	8000874 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000622:	f000 f975 	bl	8000910 <MX_RTC_Init>
  MX_UCPD1_Init();
 8000626:	f000 f9bd 	bl	80009a4 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800062a:	f000 f9f1 	bl	8000a10 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */



  enum state_codes cur_state = ENTRY_STATE; //Estado en el que empiezo
 800062e:	2300      	movs	r3, #0
 8000630:	73fb      	strb	r3, [r7, #15]
  enum state_codes last_state = ENTRY_STATE;
 8000632:	2300      	movs	r3, #0
 8000634:	73bb      	strb	r3, [r7, #14]
  enum ret_codes rc; //Transición de un estado a otro
  int (* state_fun)(void); //Puntero de la funcion del estado actual

  printf("You are in state");
 8000636:	4814      	ldr	r0, [pc, #80]	; (8000688 <main+0x84>)
 8000638:	f005 fb5a 	bl	8005cf0 <iprintf>
  printf("%i\r\n", cur_state);
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	4619      	mov	r1, r3
 8000640:	4812      	ldr	r0, [pc, #72]	; (800068c <main+0x88>)
 8000642:	f005 fb55 	bl	8005cf0 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(last_state != cur_state)
 8000646:	7bba      	ldrb	r2, [r7, #14]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	429a      	cmp	r2, r3
 800064c:	d009      	beq.n	8000662 <main+0x5e>
	  {
		  printf("You are in state");
 800064e:	480e      	ldr	r0, [pc, #56]	; (8000688 <main+0x84>)
 8000650:	f005 fb4e 	bl	8005cf0 <iprintf>
		  printf("%i\r\n", cur_state);
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	4619      	mov	r1, r3
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <main+0x88>)
 800065a:	f005 fb49 	bl	8005cf0 <iprintf>

		  last_state = cur_state;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	73bb      	strb	r3, [r7, #14]
	  }
	  state_fun = state[cur_state]; //state_fun busca en el array de punteros a funciones que funcion tiene que ejecutar segun el estado actual
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <main+0x8c>)
 8000666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066a:	60bb      	str	r3, [r7, #8]
	  rc = state_fun(); //Ejecución de la función del estado actual
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4798      	blx	r3
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
	  cur_state = lookup_transitions(cur_state, rc);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	79fa      	ldrb	r2, [r7, #7]
 8000678:	4611      	mov	r1, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fbe6 	bl	8000e4c <lookup_transitions>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
	  if(last_state != cur_state)
 8000684:	e7df      	b.n	8000646 <main+0x42>
 8000686:	bf00      	nop
 8000688:	08006a0c 	.word	0x08006a0c
 800068c:	08006a20 	.word	0x08006a20
 8000690:	20000000 	.word	0x20000000

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b098      	sub	sp, #96	; 0x60
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	2248      	movs	r2, #72	; 0x48
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 fb79 	bl	8005d9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80006b6:	2000      	movs	r0, #0
 80006b8:	f002 fb70 	bl	8002d9c <HAL_PWREx_ControlVoltageScaling>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006c2:	f000 fbfb 	bl	8000ebc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c6:	f002 fb4b 	bl	8002d60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemClock_Config+0xc8>)
 80006cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <SystemClock_Config+0xc8>)
 80006d2:	f023 0318 	bic.w	r3, r3, #24
 80006d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006da:	2336      	movs	r3, #54	; 0x36
 80006dc:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006de:	2381      	movs	r3, #129	; 0x81
 80006e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2340      	movs	r3, #64	; 0x40
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f8:	2360      	movs	r3, #96	; 0x60
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000700:	2301      	movs	r3, #1
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000708:	2337      	movs	r3, #55	; 0x37
 800070a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800070c:	2307      	movs	r3, #7
 800070e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0318 	add.w	r3, r7, #24
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fbcd 	bl	8002ebc <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000728:	f000 fbc8 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2303      	movs	r3, #3
 8000732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2105      	movs	r1, #5
 8000744:	4618      	mov	r0, r3
 8000746:	f003 f88f 	bl	8003868 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000750:	f000 fbb4 	bl	8000ebc <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3760      	adds	r7, #96	; 0x60
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_ADC1_Init+0xe0>)
 8000784:	4a2f      	ldr	r2, [pc, #188]	; (8000844 <MX_ADC1_Init+0xe4>)
 8000786:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <MX_ADC1_Init+0xe0>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_ADC1_Init+0xe0>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_ADC1_Init+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_ADC1_Init+0xe0>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e2:	4817      	ldr	r0, [pc, #92]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007e4:	f001 f8ae 	bl	8001944 <HAL_ADC_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ee:	f000 fb65 	bl	8000ebc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4810      	ldr	r0, [pc, #64]	; (8000840 <MX_ADC1_Init+0xe0>)
 80007fe:	f001 fdfd 	bl	80023fc <HAL_ADCEx_MultiModeConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000808:	f000 fb58 	bl	8000ebc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_ADC1_Init+0xe8>)
 800080e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000810:	2306      	movs	r3, #6
 8000812:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000818:	237f      	movs	r3, #127	; 0x7f
 800081a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800081c:	2304      	movs	r3, #4
 800081e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_ADC1_Init+0xe0>)
 800082a:	f001 f9d7 	bl	8001bdc <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000834:	f000 fb42 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000b8 	.word	0x200000b8
 8000844:	42028000 	.word	0x42028000
 8000848:	0c900008 	.word	0x0c900008

0800084c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000850:	2000      	movs	r0, #0
 8000852:	f002 f951 	bl	8002af8 <HAL_ICACHE_ConfigAssociativityMode>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800085c:	f000 fb2e 	bl	8000ebc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000860:	f002 f96a 	bl	8002b38 <HAL_ICACHE_Enable>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800086a:	f000 fb27 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 800087a:	4a23      	ldr	r2, [pc, #140]	; (8000908 <MX_LPUART1_UART_Init+0x94>)
 800087c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 8000880:	4a22      	ldr	r2, [pc, #136]	; (800090c <MX_LPUART1_UART_Init+0x98>)
 8000882:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 8000898:	220c      	movs	r2, #12
 800089a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008bc:	f004 f908 	bl	8004ad0 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80008c6:	f000 faf9 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008ce:	f004 fea1 	bl	8005614 <HAL_UARTEx_SetTxFifoThreshold>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008d8:	f000 faf0 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008e0:	f004 fed6 	bl	8005690 <HAL_UARTEx_SetRxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008ea:	f000 fae7 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008f0:	f004 fe57 	bl	80055a2 <HAL_UARTEx_DisableFifoMode>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008fa:	f000 fadf 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000120 	.word	0x20000120
 8000908:	40008000 	.word	0x40008000
 800090c:	00033324 	.word	0x00033324

08000910 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
 8000924:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_RTC_Init+0x8c>)
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <MX_RTC_Init+0x90>)
 800092a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_RTC_Init+0x8c>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_RTC_Init+0x8c>)
 8000934:	227f      	movs	r2, #127	; 0x7f
 8000936:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_RTC_Init+0x8c>)
 800093a:	22ff      	movs	r2, #255	; 0xff
 800093c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_RTC_Init+0x8c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_RTC_Init+0x8c>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_RTC_Init+0x8c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_RTC_Init+0x8c>)
 8000952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000956:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_RTC_Init+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800095e:	480f      	ldr	r0, [pc, #60]	; (800099c <MX_RTC_Init+0x8c>)
 8000960:	f003 ff7c 	bl	800485c <HAL_RTC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800096a:	f000 faa7 	bl	8000ebc <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_RTC_Init+0x8c>)
 8000984:	f004 f878 	bl	8004a78 <HAL_RTCEx_PrivilegeModeSet>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800098e:	f000 fa95 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200001b4 	.word	0x200001b4
 80009a0:	40002800 	.word	0x40002800

080009a4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80009ba:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80009be:	f7ff fe09 	bl	80005d4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff fdee 	bl	80005a4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff fdeb 	bl	80005a4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009d4:	2303      	movs	r3, #3
 80009d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_UCPD1_Init+0x64>)
 80009e2:	f005 f82c 	bl	8005a3e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_UCPD1_Init+0x68>)
 80009fa:	f005 f820 	bl	8005a3e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	42020400 	.word	0x42020400
 8000a0c:	42020000 	.word	0x42020000

08000a10 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <MX_USB_PCD_Init+0x4c>)
 8000a18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a46:	f002 f887 	bl	8002b58 <HAL_PCD_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a50:	f000 fa34 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200001dc 	.word	0x200001dc
 8000a5c:	4000d400 	.word	0x4000d400

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b54      	ldr	r3, [pc, #336]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8e:	4b4e      	ldr	r3, [pc, #312]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a4d      	ldr	r2, [pc, #308]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b4b      	ldr	r3, [pc, #300]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b48      	ldr	r3, [pc, #288]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a41      	ldr	r2, [pc, #260]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000ad6:	f002 f9bd 	bl	8002e54 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a3a      	ldr	r2, [pc, #232]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	4835      	ldr	r0, [pc, #212]	; (8000bcc <MX_GPIO_Init+0x16c>)
 8000af8:	f001 ffb4 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b02:	4833      	ldr	r0, [pc, #204]	; (8000bd0 <MX_GPIO_Init+0x170>)
 8000b04:	f001 ffae 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	21a0      	movs	r1, #160	; 0xa0
 8000b0c:	4831      	ldr	r0, [pc, #196]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000b0e:	f001 ffa9 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4828      	ldr	r0, [pc, #160]	; (8000bcc <MX_GPIO_Init+0x16c>)
 8000b2a:	f001 fe1b 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4824      	ldr	r0, [pc, #144]	; (8000bd8 <MX_GPIO_Init+0x178>)
 8000b46:	f001 fe0d 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481a      	ldr	r0, [pc, #104]	; (8000bcc <MX_GPIO_Init+0x16c>)
 8000b62:	f001 fdff 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <MX_GPIO_Init+0x170>)
 8000b80:	f001 fdf0 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000b84:	23a0      	movs	r3, #160	; 0xa0
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000b9c:	f001 fde2 	bl	8002764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2018      	movs	r0, #24
 8000ba6:	f001 fda8 	bl	80026fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000baa:	2018      	movs	r0, #24
 8000bac:	f001 fdbf 	bl	800272e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2019      	movs	r0, #25
 8000bb6:	f001 fda0 	bl	80026fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8000bba:	2019      	movs	r0, #25
 8000bbc:	f001 fdb7 	bl	800272e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	42020800 	.word	0x42020800
 8000bd0:	42020000 	.word	0x42020000
 8000bd4:	42020400 	.word	0x42020400
 8000bd8:	42021400 	.word	0x42021400

08000bdc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e009      	b.n	8000c02 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	60ba      	str	r2, [r7, #8]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fcac 	bl	8000554 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dbf1      	blt.n	8000bee <_write+0x12>
	}
	return len;
 8000c0a:	687b      	ldr	r3, [r7, #4]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <state1>:

int state1(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
	//Enciendo L1 y apago L0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c20:	4814      	ldr	r0, [pc, #80]	; (8000c74 <state1+0x60>)
 8000c22:	f001 ff1f 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <state1+0x64>)
 8000c2c:	f001 ff1a 	bl	8002a64 <HAL_GPIO_WritePin>

	enum ret_codes rc;
	if(btn1 != btn1Anterior) //Si cambia el valor el boton se ha pulsado
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <state1+0x68>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <state1+0x6c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d006      	beq.n	8000c4a <state1+0x36>
	{
		rc = button1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	71fb      	strb	r3, [r7, #7]
		btn1Anterior = btn1;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <state1+0x68>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <state1+0x6c>)
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e00e      	b.n	8000c68 <state1+0x54>
	}
	else if(btn2 != btn2Anterior) //Si cambia el valor el boton se ha pulsado
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <state1+0x70>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <state1+0x74>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d006      	beq.n	8000c64 <state1+0x50>
	{
		rc = button2;
 8000c56:	2301      	movs	r3, #1
 8000c58:	71fb      	strb	r3, [r7, #7]
		btn2Anterior = btn2;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <state1+0x70>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <state1+0x74>)
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e001      	b.n	8000c68 <state1+0x54>
	}
	else //Repito si no ha sido pulsado ningún botón
	{
		rc = repeat;
 8000c64:	2302      	movs	r3, #2
 8000c66:	71fb      	strb	r3, [r7, #7]
	}

	return rc; //Devuelvo la transición
 8000c68:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	42020000 	.word	0x42020000
 8000c78:	42020800 	.word	0x42020800
 8000c7c:	200004d0 	.word	0x200004d0
 8000c80:	200004d8 	.word	0x200004d8
 8000c84:	200004d4 	.word	0x200004d4
 8000c88:	200004dc 	.word	0x200004dc

08000c8c <state2>:

int state2(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	//Enciendo L0 y apago L1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c98:	4814      	ldr	r0, [pc, #80]	; (8000cec <state2+0x60>)
 8000c9a:	f001 fee3 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <state2+0x64>)
 8000ca4:	f001 fede 	bl	8002a64 <HAL_GPIO_WritePin>

	enum ret_codes rc;
		if(btn1 != btn1Anterior) //Si cambia el valor el boton se ha pulsado
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <state2+0x68>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <state2+0x6c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d006      	beq.n	8000cc2 <state2+0x36>
		{
			rc = button1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	71fb      	strb	r3, [r7, #7]
			btn1Anterior = btn1;
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <state2+0x68>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <state2+0x6c>)
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	e00e      	b.n	8000ce0 <state2+0x54>
		}
		else if(btn2 != btn2Anterior) //Si cambia el valor el boton se ha pulsado
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <state2+0x70>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <state2+0x74>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d006      	beq.n	8000cdc <state2+0x50>
		{
			rc = button2;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]
			btn2Anterior = btn2;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <state2+0x70>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <state2+0x74>)
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e001      	b.n	8000ce0 <state2+0x54>
		}
		else //Repito si no ha sido pulsado ningún botón
		{
			rc = repeat;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	71fb      	strb	r3, [r7, #7]
		}

		return rc; //Devuelvo la transición
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	42020000 	.word	0x42020000
 8000cf0:	42020800 	.word	0x42020800
 8000cf4:	200004d0 	.word	0x200004d0
 8000cf8:	200004d8 	.word	0x200004d8
 8000cfc:	200004d4 	.word	0x200004d4
 8000d00:	200004dc 	.word	0x200004dc

08000d04 <state3>:

int state3(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
	//Enciendo L0 y L1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d10:	4814      	ldr	r0, [pc, #80]	; (8000d64 <state3+0x60>)
 8000d12:	f001 fea7 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	4813      	ldr	r0, [pc, #76]	; (8000d68 <state3+0x64>)
 8000d1c:	f001 fea2 	bl	8002a64 <HAL_GPIO_WritePin>

	enum ret_codes rc;
		if(btn1 != btn1Anterior) //Si cambia el valor el boton se ha pulsado
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <state3+0x68>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <state3+0x6c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d006      	beq.n	8000d3a <state3+0x36>
		{
			rc = button1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	71fb      	strb	r3, [r7, #7]
			btn1Anterior = btn1;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <state3+0x68>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <state3+0x6c>)
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e00e      	b.n	8000d58 <state3+0x54>
		}
		else if(btn2 != btn2Anterior) //Si cambia el valor el boton se ha pulsado
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <state3+0x70>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <state3+0x74>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d006      	beq.n	8000d54 <state3+0x50>
		{
			rc = button2;
 8000d46:	2301      	movs	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
			btn2Anterior = btn2;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <state3+0x70>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <state3+0x74>)
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e001      	b.n	8000d58 <state3+0x54>
		}
		else //Repito si no ha sido pulsado ningún botón
		{
			rc = repeat;
 8000d54:	2302      	movs	r3, #2
 8000d56:	71fb      	strb	r3, [r7, #7]
		}

		return rc; //Devuelvo la transición
 8000d58:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	42020000 	.word	0x42020000
 8000d68:	42020800 	.word	0x42020800
 8000d6c:	200004d0 	.word	0x200004d0
 8000d70:	200004d8 	.word	0x200004d8
 8000d74:	200004d4 	.word	0x200004d4
 8000d78:	200004dc 	.word	0x200004dc

08000d7c <state4>:

int state4(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	//Apago L0 y L1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d88:	4814      	ldr	r0, [pc, #80]	; (8000ddc <state4+0x60>)
 8000d8a:	f001 fe6b 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4813      	ldr	r0, [pc, #76]	; (8000de0 <state4+0x64>)
 8000d94:	f001 fe66 	bl	8002a64 <HAL_GPIO_WritePin>

	enum ret_codes rc;
		if(btn1 != btn1Anterior) //Si cambia el valor el boton se ha pulsado
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <state4+0x68>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <state4+0x6c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d006      	beq.n	8000db2 <state4+0x36>
		{
			rc = button1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	71fb      	strb	r3, [r7, #7]
			btn1Anterior = btn1;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <state4+0x68>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <state4+0x6c>)
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	e00e      	b.n	8000dd0 <state4+0x54>
		}
		else if(btn2 != btn2Anterior) //Si cambia el valor el boton se ha pulsado
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <state4+0x70>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <state4+0x74>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d006      	beq.n	8000dcc <state4+0x50>
		{
			rc = button2;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	71fb      	strb	r3, [r7, #7]
			btn2Anterior = btn2;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <state4+0x70>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <state4+0x74>)
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e001      	b.n	8000dd0 <state4+0x54>
		}
		else //Repito si no ha sido pulsado ningún botón
		{
			rc = repeat;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	71fb      	strb	r3, [r7, #7]
		}

		return rc; //Devuelvo la transición
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	42020000 	.word	0x42020000
 8000de0:	42020800 	.word	0x42020800
 8000de4:	200004d0 	.word	0x200004d0
 8000de8:	200004d8 	.word	0x200004d8
 8000dec:	200004d4 	.word	0x200004d4
 8000df0:	200004dc 	.word	0x200004dc

08000df4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e04:	d109      	bne.n	8000e1a <HAL_GPIO_EXTI_Rising_Callback+0x26>
	{
		btn1 = btn1==0?1:0; //Si pulso primer boton cambio su estado
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_GPIO_EXTI_Rising_Callback+0x50>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf0c      	ite	eq
 8000e0e:	2301      	moveq	r3, #1
 8000e10:	2300      	movne	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_GPIO_EXTI_Rising_Callback+0x50>)
 8000e18:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_14)
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e20:	d109      	bne.n	8000e36 <HAL_GPIO_EXTI_Rising_Callback+0x42>
	{
		btn2 = btn2==0?1:0; //Si pulso segundo boton cambio su estado
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf0c      	ite	eq
 8000e2a:	2301      	moveq	r3, #1
 8000e2c:	2300      	movne	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 8000e34:	601a      	str	r2, [r3, #0]
	}
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200004d0 	.word	0x200004d0
 8000e48:	200004d4 	.word	0x200004d4

08000e4c <lookup_transitions>:

int lookup_transitions(int cur_state,int rc)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	enum state_codes nrc;


	for(int i = 0; i < NUMBER_OF_TRANSITIONS; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e022      	b.n	8000ea2 <lookup_transitions+0x56>
	{
		if(state_transitions[i].src_state == cur_state && state_transitions[i].ret_code == rc)
 8000e5c:	4916      	ldr	r1, [pc, #88]	; (8000eb8 <lookup_transitions+0x6c>)
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d114      	bne.n	8000e9c <lookup_transitions+0x50>
 8000e72:	4911      	ldr	r1, [pc, #68]	; (8000eb8 <lookup_transitions+0x6c>)
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	3301      	adds	r3, #1
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d108      	bne.n	8000e9c <lookup_transitions+0x50>
		{
			nrc = state_transitions[i].dst_state;
 8000e8a:	490b      	ldr	r1, [pc, #44]	; (8000eb8 <lookup_transitions+0x6c>)
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	3302      	adds	r3, #2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < NUMBER_OF_TRANSITIONS; i++)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2b0b      	cmp	r3, #11
 8000ea6:	ddd9      	ble.n	8000e5c <lookup_transitions+0x10>
		}
	}

	return nrc;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]

}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000010 	.word	0x20000010

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <Error_Handler+0x8>
	...

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ae      	sub	sp, #184	; 0xb8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	2294      	movs	r2, #148	; 0x94
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 ff32 	bl	8005d9a <memset>
  if(hadc->Instance==ADC1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d137      	bne.n	8000fb0 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f44:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000f46:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 ff6c 	bl	8003e30 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000f5e:	f7ff ffad 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f92:	2304      	movs	r3, #4
 8000f94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_ADC_MspInit+0xb0>)
 8000fac:	f001 fbda 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	37b8      	adds	r7, #184	; 0xb8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	42028000 	.word	0x42028000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	42020800 	.word	0x42020800

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ae      	sub	sp, #184	; 0xb8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	2294      	movs	r2, #148	; 0x94
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f004 fed8 	bl	8005d9a <memset>
  if(huart->Instance==LPUART1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_UART_MspInit+0xb4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d13d      	bne.n	8001070 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4618      	mov	r0, r3
 8001002:	f002 ff15 	bl	8003e30 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800100c:	f7ff ff56 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_UART_MspInit+0xb8>)
 8001012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_UART_MspInit+0xb8>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0xb8>)
 800101e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_UART_MspInit+0xb8>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a13      	ldr	r2, [pc, #76]	; (800107c <HAL_UART_MspInit+0xb8>)
 800102e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0xb8>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001040:	f001 ff08 	bl	8002e54 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001044:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800105e:	2308      	movs	r3, #8
 8001060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001064:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_UART_MspInit+0xbc>)
 800106c:	f001 fb7a 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	37b8      	adds	r7, #184	; 0xb8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40008000 	.word	0x40008000
 800107c:	40021000 	.word	0x40021000
 8001080:	42021800 	.word	0x42021800

08001084 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0a8      	sub	sp, #160	; 0xa0
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2294      	movs	r2, #148	; 0x94
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f004 fe80 	bl	8005d9a <memset>
  if(hrtc->Instance==RTC)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a16      	ldr	r2, [pc, #88]	; (80010f8 <HAL_RTC_MspInit+0x74>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d124      	bne.n	80010ee <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80010aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 feba 	bl	8003e30 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80010c2:	f7ff fefb 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_RTC_MspInit+0x78>)
 80010c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_RTC_MspInit+0x78>)
 80010ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_RTC_MspInit+0x78>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_RTC_MspInit+0x78>)
 80010dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e0:	6593      	str	r3, [r2, #88]	; 0x58
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_RTC_MspInit+0x78>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	37a0      	adds	r7, #160	; 0xa0
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40002800 	.word	0x40002800
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ae      	sub	sp, #184	; 0xb8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2294      	movs	r2, #148	; 0x94
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fe3a 	bl	8005d9a <memset>
  if(hpcd->Instance==USB)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <HAL_PCD_MspInit+0xb4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d13d      	bne.n	80011ac <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001134:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fe75 	bl	8003e30 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800114c:	f7ff feb6 	bl	8000ebc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_PCD_MspInit+0xb8>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <HAL_PCD_MspInit+0xb8>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_PCD_MspInit+0xb8>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001168:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800116c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001182:	230a      	movs	r3, #10
 8001184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800118c:	4619      	mov	r1, r3
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <HAL_PCD_MspInit+0xbc>)
 8001190:	f001 fae8 	bl	8002764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_PCD_MspInit+0xb8>)
 8001196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_PCD_MspInit+0xb8>)
 800119a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119e:	65d3      	str	r3, [r2, #92]	; 0x5c
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_PCD_MspInit+0xb8>)
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011ac:	bf00      	nop
 80011ae:	37b8      	adds	r7, #184	; 0xb8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	4000d400 	.word	0x4000d400
 80011b8:	40021000 	.word	0x40021000
 80011bc:	42020000 	.word	0x42020000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 f9da 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001218:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800121c:	f001 fc3a 	bl	8002a94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001228:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800122c:	f001 fc32 	bl	8002a94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e00a      	b.n	800125c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001246:	f3af 8000 	nop.w
 800124a:	4601      	mov	r1, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf0      	blt.n	8001246 <_read+0x12>
  }

  return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_close>:
  }
  return len;
}

int _close(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001296:	605a      	str	r2, [r3, #4]
  return 0;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_isatty>:

int _isatty(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f004 fd96 	bl	8005e38 <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20030000 	.word	0x20030000
 8001338:	00000400 	.word	0x00000400
 800133c:	200004e0 	.word	0x200004e0
 8001340:	20000638 	.word	0x20000638

08001344 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800136e:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <SystemCoreClockUpdate+0x144>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d107      	bne.n	800138a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800137a:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <SystemCoreClockUpdate+0x144>)
 800137c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	e005      	b.n	8001396 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800138a:	4b48      	ldr	r3, [pc, #288]	; (80014ac <SystemCoreClockUpdate+0x144>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <SystemCoreClockUpdate+0x148>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a0:	4b42      	ldr	r3, [pc, #264]	; (80014ac <SystemCoreClockUpdate+0x144>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b0c      	cmp	r3, #12
 80013aa:	d866      	bhi.n	800147a <SystemCoreClockUpdate+0x112>
 80013ac:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <SystemCoreClockUpdate+0x4c>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	080013e9 	.word	0x080013e9
 80013b8:	0800147b 	.word	0x0800147b
 80013bc:	0800147b 	.word	0x0800147b
 80013c0:	0800147b 	.word	0x0800147b
 80013c4:	080013f1 	.word	0x080013f1
 80013c8:	0800147b 	.word	0x0800147b
 80013cc:	0800147b 	.word	0x0800147b
 80013d0:	0800147b 	.word	0x0800147b
 80013d4:	080013f9 	.word	0x080013f9
 80013d8:	0800147b 	.word	0x0800147b
 80013dc:	0800147b 	.word	0x0800147b
 80013e0:	0800147b 	.word	0x0800147b
 80013e4:	08001401 	.word	0x08001401
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80013e8:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <SystemCoreClockUpdate+0x14c>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	6013      	str	r3, [r2, #0]
      break;
 80013ee:	e048      	b.n	8001482 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80013f0:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <SystemCoreClockUpdate+0x14c>)
 80013f2:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <SystemCoreClockUpdate+0x150>)
 80013f4:	601a      	str	r2, [r3, #0]
      break;
 80013f6:	e044      	b.n	8001482 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <SystemCoreClockUpdate+0x14c>)
 80013fa:	4a30      	ldr	r2, [pc, #192]	; (80014bc <SystemCoreClockUpdate+0x154>)
 80013fc:	601a      	str	r2, [r3, #0]
      break;
 80013fe:	e040      	b.n	8001482 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <SystemCoreClockUpdate+0x144>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <SystemCoreClockUpdate+0x144>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	3301      	adds	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d003      	beq.n	8001426 <SystemCoreClockUpdate+0xbe>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d006      	beq.n	8001432 <SystemCoreClockUpdate+0xca>
 8001424:	e00b      	b.n	800143e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001426:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <SystemCoreClockUpdate+0x150>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	613b      	str	r3, [r7, #16]
          break;
 8001430:	e00b      	b.n	800144a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001432:	4a22      	ldr	r2, [pc, #136]	; (80014bc <SystemCoreClockUpdate+0x154>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	613b      	str	r3, [r7, #16]
          break;
 800143c:	e005      	b.n	800144a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	613b      	str	r3, [r7, #16]
          break;
 8001448:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <SystemCoreClockUpdate+0x144>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <SystemCoreClockUpdate+0x144>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0e5b      	lsrs	r3, r3, #25
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	3301      	adds	r3, #1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	fbb2 f3f3 	udiv	r3, r2, r3
 8001474:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <SystemCoreClockUpdate+0x14c>)
 8001476:	6013      	str	r3, [r2, #0]
      break;
 8001478:	e003      	b.n	8001482 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <SystemCoreClockUpdate+0x14c>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	6013      	str	r3, [r2, #0]
      break;
 8001480:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <SystemCoreClockUpdate+0x144>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <SystemCoreClockUpdate+0x158>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <SystemCoreClockUpdate+0x14c>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemCoreClockUpdate+0x14c>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08006a40 	.word	0x08006a40
 80014b4:	20000034 	.word	0x20000034
 80014b8:	00f42400 	.word	0x00f42400
 80014bc:	007a1200 	.word	0x007a1200
 80014c0:	08006a28 	.word	0x08006a28

080014c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014c8:	f7ff ff3c 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014ce:	e003      	b.n	80014d8 <LoopCopyDataInit>

080014d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014d6:	3104      	adds	r1, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014d8:	480a      	ldr	r0, [pc, #40]	; (8001504 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014e0:	d3f6      	bcc.n	80014d0 <CopyDataInit>
	ldr	r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LoopForever+0x12>)
	b	LoopFillZerobss
 80014e4:	e002      	b.n	80014ec <LoopFillZerobss>

080014e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014e8:	f842 3b04 	str.w	r3, [r2], #4

080014ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <LoopForever+0x16>)
	cmp	r2, r3
 80014ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014f0:	d3f9      	bcc.n	80014e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014f2:	f004 fca7 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014f6:	f7ff f885 	bl	8000604 <main>

080014fa <LoopForever>:

LoopForever:
    b LoopForever
 80014fa:	e7fe      	b.n	80014fa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80014fc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001500:	08006aec 	.word	0x08006aec
	ldr	r0, =_sdata
 8001504:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001508:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 800150c:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 8001510:	20000634 	.word	0x20000634

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>

08001516 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001520:	2004      	movs	r0, #4
 8001522:	f001 f8df 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001526:	f7ff ff1f 	bl	8001368 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f80e 	bl	800154c <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	e001      	b.n	8001540 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800153c:	f7ff fcc4 	bl	8000ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001540:	79fb      	ldrb	r3, [r7, #7]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_InitTick+0x6c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_InitTick+0x70>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_InitTick+0x6c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f001 f8e7 	bl	800274a <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10f      	bne.n	80015a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b07      	cmp	r3, #7
 8001586:	d809      	bhi.n	800159c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f001 f8b3 	bl	80026fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_InitTick+0x74>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e007      	b.n	80015ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e004      	b.n	80015ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e001      	b.n	80015ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000003c 	.word	0x2000003c
 80015bc:	20000034 	.word	0x20000034
 80015c0:	20000038 	.word	0x20000038

080015c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2000003c 	.word	0x2000003c
 80015e8:	200004e4 	.word	0x200004e4

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200004e4 	.word	0x200004e4

08001604 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3360      	adds	r3, #96	; 0x60
 800167e:	461a      	mov	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <LL_ADC_SetOffset+0x44>)
 800168e:	4013      	ands	r3, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	4313      	orrs	r3, r2
 800169c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016a4:	bf00      	nop
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	03fff000 	.word	0x03fff000

080016b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3360      	adds	r3, #96	; 0x60
 80016c2:	461a      	mov	r2, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3360      	adds	r3, #96	; 0x60
 80016f0:	461a      	mov	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	431a      	orrs	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3330      	adds	r3, #48	; 0x30
 800174c:	461a      	mov	r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	4413      	add	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	211f      	movs	r1, #31
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	401a      	ands	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	0e9b      	lsrs	r3, r3, #26
 8001774:	f003 011f 	and.w	r1, r3, #31
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	431a      	orrs	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3314      	adds	r3, #20
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	0e5b      	lsrs	r3, r3, #25
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	4413      	add	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	0d1b      	lsrs	r3, r3, #20
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2107      	movs	r1, #7
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	401a      	ands	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	0d1b      	lsrs	r3, r3, #20
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017de:	bf00      	nop
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0318 	and.w	r3, r3, #24
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001810:	40d9      	lsrs	r1, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	400b      	ands	r3, r1
 8001816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181a:	431a      	orrs	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	0007ffff 	.word	0x0007ffff

08001834 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6093      	str	r3, [r2, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800186c:	d101      	bne.n	8001872 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001890:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018bc:	d101      	bne.n	80018c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <LL_ADC_IsEnabled+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_ADC_IsEnabled+0x1a>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b04      	cmp	r3, #4
 8001908:	d101      	bne.n	800190e <LL_ADC_REG_IsConversionOngoing+0x18>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b08      	cmp	r3, #8
 800192e:	d101      	bne.n	8001934 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e12e      	b.n	8001bbc <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff facf 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff67 	bl	8001858 <LL_ADC_IsDeepPowerDownEnabled>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff4d 	bl	8001834 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff82 	bl	80018a8 <LL_ADC_IsInternalRegulatorEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d115      	bne.n	80019d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff66 	bl	8001880 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019b4:	4b83      	ldr	r3, [pc, #524]	; (8001bc4 <HAL_ADC_Init+0x280>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	4a83      	ldr	r2, [pc, #524]	; (8001bc8 <HAL_ADC_Init+0x284>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	3301      	adds	r3, #1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019c8:	e002      	b.n	80019d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f9      	bne.n	80019ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff64 	bl	80018a8 <LL_ADC_IsInternalRegulatorEnabled>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff75 	bl	80018f6 <LL_ADC_REG_IsConversionOngoing>
 8001a0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 80c7 	bne.w	8001baa <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 80c3 	bne.w	8001baa <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a2c:	f043 0202 	orr.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff49 	bl	80018d0 <LL_ADC_IsEnabled>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d110      	bne.n	8001a66 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a44:	4861      	ldr	r0, [pc, #388]	; (8001bcc <HAL_ADC_Init+0x288>)
 8001a46:	f7ff ff43 	bl	80018d0 <LL_ADC_IsEnabled>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4860      	ldr	r0, [pc, #384]	; (8001bd0 <HAL_ADC_Init+0x28c>)
 8001a4e:	f7ff ff3f 	bl	80018d0 <LL_ADC_IsEnabled>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4323      	orrs	r3, r4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	485c      	ldr	r0, [pc, #368]	; (8001bd4 <HAL_ADC_Init+0x290>)
 8001a62:	f7ff fdcf 	bl	8001604 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7e5b      	ldrb	r3, [r3, #25]
 8001a6a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a70:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a76:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a7c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a84:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d106      	bne.n	8001aa2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	045b      	lsls	r3, r3, #17
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_ADC_Init+0x294>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	69b9      	ldr	r1, [r7, #24]
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff20 	bl	800191c <LL_ADC_INJ_IsConversionOngoing>
 8001adc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d140      	bne.n	8001b66 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d13d      	bne.n	8001b66 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7e1b      	ldrb	r3, [r3, #24]
 8001af2:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001af4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001afc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b0c:	f023 0306 	bic.w	r3, r3, #6
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d118      	bne.n	8001b56 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b2e:	f023 0304 	bic.w	r3, r3, #4
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b46:	430a      	orrs	r2, r1
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	e007      	b.n	8001b66 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d10c      	bne.n	8001b88 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f023 010f 	bic.w	r1, r3, #15
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
 8001b86:	e007      	b.n	8001b98 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 020f 	bic.w	r2, r2, #15
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f023 0303 	bic.w	r3, r3, #3
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ba8:	e007      	b.n	8001bba <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f043 0210 	orr.w	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3724      	adds	r7, #36	; 0x24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd90      	pop	{r4, r7, pc}
 8001bc4:	20000034 	.word	0x20000034
 8001bc8:	053e2d63 	.word	0x053e2d63
 8001bcc:	42028000 	.word	0x42028000
 8001bd0:	42028100 	.word	0x42028100
 8001bd4:	42028300 	.word	0x42028300
 8001bd8:	fff0c007 	.word	0xfff0c007

08001bdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b0b7      	sub	sp, #220	; 0xdc
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x22>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e3c1      	b.n	8002382 <HAL_ADC_ConfigChannel+0x7a6>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fe73 	bl	80018f6 <LL_ADC_REG_IsConversionOngoing>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 83a6 	bne.w	8002364 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	f7ff fd89 	bl	800173c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fe61 	bl	80018f6 <LL_ADC_REG_IsConversionOngoing>
 8001c34:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fe6d 	bl	800191c <LL_ADC_INJ_IsConversionOngoing>
 8001c42:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 81c1 	bne.w	8001fd2 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 81bc 	bne.w	8001fd2 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c62:	d10f      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7ff fd90 	bl	8001794 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fd4a 	bl	8001716 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c82:	e00e      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	461a      	mov	r2, r3
 8001c92:	f7ff fd7f 	bl	8001794 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fd3a 	bl	8001716 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d00a      	beq.n	8001cda <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6919      	ldr	r1, [r3, #16]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cd4:	f7ff fcca 	bl	800166c <LL_ADC_SetOffset>
 8001cd8:	e17b      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fce7 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10a      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x12a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fcdc 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	e01e      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x168>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fcd1 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001d34:	2320      	movs	r3, #32
 8001d36:	e004      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001d38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x180>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0e9b      	lsrs	r3, r3, #26
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	e018      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1b2>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001d80:	2320      	movs	r3, #32
 8001d82:	e004      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d106      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fca0 	bl	80016e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fc84 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10a      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1f0>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fc79 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	f003 021f 	and.w	r2, r3, #31
 8001dca:	e01e      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x22e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fc6e 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	e004      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x246>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	e018      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x278>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001e46:	2320      	movs	r3, #32
 8001e48:	e004      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d106      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fc3d 	bl	80016e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fc21 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x2b6>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2102      	movs	r1, #2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fc16 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	e01e      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x2f4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2102      	movs	r1, #2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fc0b 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	e004      	b.n	8001ece <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x30c>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	e016      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x33a>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001f08:	2320      	movs	r3, #32
 8001f0a:	e004      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d106      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2102      	movs	r1, #2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fbdc 	bl	80016e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fbc0 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10a      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x378>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2103      	movs	r1, #3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fbb5 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	f003 021f 	and.w	r2, r3, #31
 8001f52:	e017      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x3a8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2103      	movs	r1, #3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fbaa 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f6e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001f76:	2320      	movs	r3, #32
 8001f78:	e003      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x3c0>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0e9b      	lsrs	r3, r3, #26
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	e011      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x3e4>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d106      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2103      	movs	r1, #3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fb87 	bl	80016e0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fc7a 	bl	80018d0 <LL_ADC_IsEnabled>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 81c9 	bne.w	8002376 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f7ff fbfb 	bl	80017ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4a8f      	ldr	r2, [pc, #572]	; (8002238 <HAL_ADC_ConfigChannel+0x65c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	f040 8131 	bne.w	8002264 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10b      	bne.n	800202a <HAL_ADC_ConfigChannel+0x44e>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	3301      	adds	r3, #1
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2b09      	cmp	r3, #9
 8002020:	bf94      	ite	ls
 8002022:	2301      	movls	r3, #1
 8002024:	2300      	movhi	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	e019      	b.n	800205e <HAL_ADC_ConfigChannel+0x482>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800203a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800203c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e003      	b.n	800204e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2b09      	cmp	r3, #9
 8002056:	bf94      	ite	ls
 8002058:	2301      	movls	r3, #1
 800205a:	2300      	movhi	r3, #0
 800205c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800205e:	2b00      	cmp	r3, #0
 8002060:	d079      	beq.n	8002156 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <HAL_ADC_ConfigChannel+0x4a2>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0e9b      	lsrs	r3, r3, #26
 8002074:	3301      	adds	r3, #1
 8002076:	069b      	lsls	r3, r3, #26
 8002078:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207c:	e015      	b.n	80020aa <HAL_ADC_ConfigChannel+0x4ce>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800208c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e003      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	069b      	lsls	r3, r3, #26
 80020a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x4ee>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0e9b      	lsrs	r3, r3, #26
 80020bc:	3301      	adds	r3, #1
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	e017      	b.n	80020fa <HAL_ADC_ConfigChannel+0x51e>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80020d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80020dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e003      	b.n	80020ee <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80020e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	ea42 0103 	orr.w	r1, r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x544>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0e9b      	lsrs	r3, r3, #26
 8002110:	3301      	adds	r3, #1
 8002112:	f003 021f 	and.w	r2, r3, #31
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	051b      	lsls	r3, r3, #20
 800211e:	e018      	b.n	8002152 <HAL_ADC_ConfigChannel+0x576>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800212e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002138:	2320      	movs	r3, #32
 800213a:	e003      	b.n	8002144 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800213c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f003 021f 	and.w	r2, r3, #31
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002152:	430b      	orrs	r3, r1
 8002154:	e081      	b.n	800225a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	2b00      	cmp	r3, #0
 8002160:	d107      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x596>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	3301      	adds	r3, #1
 800216a:	069b      	lsls	r3, r3, #26
 800216c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002170:	e015      	b.n	800219e <HAL_ADC_ConfigChannel+0x5c2>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800218a:	2320      	movs	r3, #32
 800218c:	e003      	b.n	8002196 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	3301      	adds	r3, #1
 8002198:	069b      	lsls	r3, r3, #26
 800219a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_ADC_ConfigChannel+0x5e2>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0e9b      	lsrs	r3, r3, #26
 80021b0:	3301      	adds	r3, #1
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2101      	movs	r1, #1
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	e017      	b.n	80021ee <HAL_ADC_ConfigChannel+0x612>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	61fb      	str	r3, [r7, #28]
  return result;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80021d6:	2320      	movs	r3, #32
 80021d8:	e003      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	ea42 0103 	orr.w	r1, r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_ADC_ConfigChannel+0x63e>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	3301      	adds	r3, #1
 8002206:	f003 021f 	and.w	r2, r3, #31
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	3b1e      	subs	r3, #30
 8002212:	051b      	lsls	r3, r3, #20
 8002214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002218:	e01e      	b.n	8002258 <HAL_ADC_ConfigChannel+0x67c>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	613b      	str	r3, [r7, #16]
  return result;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d104      	bne.n	800223c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e006      	b.n	8002244 <HAL_ADC_ConfigChannel+0x668>
 8002236:	bf00      	nop
 8002238:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	f003 021f 	and.w	r2, r3, #31
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	3b1e      	subs	r3, #30
 8002252:	051b      	lsls	r3, r3, #20
 8002254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002258:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800225e:	4619      	mov	r1, r3
 8002260:	f7ff fa98 	bl	8001794 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b48      	ldr	r3, [pc, #288]	; (800238c <HAL_ADC_ConfigChannel+0x7b0>)
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8082 	beq.w	8002376 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002272:	4847      	ldr	r0, [pc, #284]	; (8002390 <HAL_ADC_ConfigChannel+0x7b4>)
 8002274:	f7ff f9ec 	bl	8001650 <LL_ADC_GetCommonPathInternalCh>
 8002278:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800227c:	4845      	ldr	r0, [pc, #276]	; (8002394 <HAL_ADC_ConfigChannel+0x7b8>)
 800227e:	f7ff fb27 	bl	80018d0 <LL_ADC_IsEnabled>
 8002282:	4604      	mov	r4, r0
 8002284:	4844      	ldr	r0, [pc, #272]	; (8002398 <HAL_ADC_ConfigChannel+0x7bc>)
 8002286:	f7ff fb23 	bl	80018d0 <LL_ADC_IsEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	4323      	orrs	r3, r4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d15e      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a41      	ldr	r2, [pc, #260]	; (800239c <HAL_ADC_ConfigChannel+0x7c0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d127      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800229c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d121      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a39      	ldr	r2, [pc, #228]	; (8002394 <HAL_ADC_ConfigChannel+0x7b8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d161      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ba:	4619      	mov	r1, r3
 80022bc:	4834      	ldr	r0, [pc, #208]	; (8002390 <HAL_ADC_ConfigChannel+0x7b4>)
 80022be:	f7ff f9b4 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c2:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	099b      	lsrs	r3, r3, #6
 80022c8:	4a36      	ldr	r2, [pc, #216]	; (80023a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	099b      	lsrs	r3, r3, #6
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80022da:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022ea:	e044      	b.n	8002376 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a2d      	ldr	r2, [pc, #180]	; (80023a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d113      	bne.n	800231e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a23      	ldr	r2, [pc, #140]	; (8002394 <HAL_ADC_ConfigChannel+0x7b8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d134      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800230c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002314:	4619      	mov	r1, r3
 8002316:	481e      	ldr	r0, [pc, #120]	; (8002390 <HAL_ADC_ConfigChannel+0x7b4>)
 8002318:	f7ff f987 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800231c:	e02b      	b.n	8002376 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a22      	ldr	r2, [pc, #136]	; (80023ac <HAL_ADC_ConfigChannel+0x7d0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d126      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800232c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d120      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_ADC_ConfigChannel+0x7b8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d11b      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800233e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002346:	4619      	mov	r1, r3
 8002348:	4811      	ldr	r0, [pc, #68]	; (8002390 <HAL_ADC_ConfigChannel+0x7b4>)
 800234a:	f7ff f96e 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
 800234e:	e012      	b.n	8002376 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002362:	e008      	b.n	8002376 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800237e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002382:	4618      	mov	r0, r3
 8002384:	37dc      	adds	r7, #220	; 0xdc
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	80080000 	.word	0x80080000
 8002390:	42028300 	.word	0x42028300
 8002394:	42028000 	.word	0x42028000
 8002398:	42028100 	.word	0x42028100
 800239c:	c7520000 	.word	0xc7520000
 80023a0:	20000034 	.word	0x20000034
 80023a4:	053e2d63 	.word	0x053e2d63
 80023a8:	cb840000 	.word	0xcb840000
 80023ac:	80000001 	.word	0x80000001

080023b0 <LL_ADC_IsEnabled>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <LL_ADC_IsEnabled+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_ADC_IsEnabled+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d101      	bne.n	80023ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b0a1      	sub	sp, #132	; 0x84
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002416:	2302      	movs	r3, #2
 8002418:	e089      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002422:	2300      	movs	r3, #0
 8002424:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002426:	2300      	movs	r3, #0
 8002428:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a42      	ldr	r2, [pc, #264]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d102      	bne.n	800243a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002434:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	e001      	b.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e068      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ffb9 	bl	80023d6 <LL_ADC_REG_IsConversionOngoing>
 8002464:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ffb3 	bl	80023d6 <LL_ADC_REG_IsConversionOngoing>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d14a      	bne.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002478:	2b00      	cmp	r3, #0
 800247a:	d147      	bne.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800247c:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800247e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d027      	beq.n	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800249a:	035b      	lsls	r3, r3, #13
 800249c:	430b      	orrs	r3, r1
 800249e:	431a      	orrs	r2, r3
 80024a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024a4:	4824      	ldr	r0, [pc, #144]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024a6:	f7ff ff83 	bl	80023b0 <LL_ADC_IsEnabled>
 80024aa:	4604      	mov	r4, r0
 80024ac:	4823      	ldr	r0, [pc, #140]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024ae:	f7ff ff7f 	bl	80023b0 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4323      	orrs	r3, r4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d132      	bne.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024c2:	f023 030f 	bic.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	6811      	ldr	r1, [r2, #0]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	6892      	ldr	r2, [r2, #8]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024d6:	e023      	b.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e4:	4814      	ldr	r0, [pc, #80]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024e6:	f7ff ff63 	bl	80023b0 <LL_ADC_IsEnabled>
 80024ea:	4604      	mov	r4, r0
 80024ec:	4813      	ldr	r0, [pc, #76]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024ee:	f7ff ff5f 	bl	80023b0 <LL_ADC_IsEnabled>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4323      	orrs	r3, r4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d112      	bne.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002502:	f023 030f 	bic.w	r3, r3, #15
 8002506:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002508:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800250a:	e009      	b.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	f043 0220 	orr.w	r2, r3, #32
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800251e:	e000      	b.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002520:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800252a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800252e:	4618      	mov	r0, r3
 8002530:	3784      	adds	r7, #132	; 0x84
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}
 8002536:	bf00      	nop
 8002538:	42028000 	.word	0x42028000
 800253c:	42028100 	.word	0x42028100
 8002540:	42028300 	.word	0x42028300

08002544 <__NVIC_SetPriorityGrouping>:
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0152      	lsls	r2, r2, #5
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0152      	lsls	r2, r2, #5
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b03      	cmp	r3, #3
 8002654:	bf28      	it	cs
 8002656:	2303      	movcs	r3, #3
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3303      	adds	r3, #3
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b04      	subs	r3, #4
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <SysTick_Config>:
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	2107      	movs	r1, #7
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f7ff ff8e 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff29 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002708:	f7ff ff40 	bl	800258c <__NVIC_GetPriorityGrouping>
 800270c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f7ff ff90 	bl	8002638 <NVIC_EncodePriority>
 8002718:	4602      	mov	r2, r0
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff5f 	bl	80025e4 <__NVIC_SetPriority>
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff33 	bl	80025a8 <__NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffa4 	bl	80026a0 <SysTick_Config>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002772:	e158      	b.n	8002a26 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 814a 	beq.w	8002a20 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d005      	beq.n	80027a4 <HAL_GPIO_Init+0x40>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d130      	bne.n	8002806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027da:	2201      	movs	r2, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 0201 	and.w	r2, r3, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b03      	cmp	r3, #3
 8002810:	d017      	beq.n	8002842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d123      	bne.n	8002896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	08da      	lsrs	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3208      	adds	r2, #8
 8002856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	6939      	ldr	r1, [r7, #16]
 8002892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80a4 	beq.w	8002a20 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80028d8:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3318      	adds	r3, #24
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	220f      	movs	r2, #15
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a52      	ldr	r2, [pc, #328]	; (8002a48 <HAL_GPIO_Init+0x2e4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d025      	beq.n	8002950 <HAL_GPIO_Init+0x1ec>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a51      	ldr	r2, [pc, #324]	; (8002a4c <HAL_GPIO_Init+0x2e8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d01f      	beq.n	800294c <HAL_GPIO_Init+0x1e8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a50      	ldr	r2, [pc, #320]	; (8002a50 <HAL_GPIO_Init+0x2ec>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d019      	beq.n	8002948 <HAL_GPIO_Init+0x1e4>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a4f      	ldr	r2, [pc, #316]	; (8002a54 <HAL_GPIO_Init+0x2f0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <HAL_GPIO_Init+0x1e0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a4e      	ldr	r2, [pc, #312]	; (8002a58 <HAL_GPIO_Init+0x2f4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00d      	beq.n	8002940 <HAL_GPIO_Init+0x1dc>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <HAL_GPIO_Init+0x2f8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <HAL_GPIO_Init+0x1d8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a4c      	ldr	r2, [pc, #304]	; (8002a60 <HAL_GPIO_Init+0x2fc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d101      	bne.n	8002938 <HAL_GPIO_Init+0x1d4>
 8002934:	2306      	movs	r3, #6
 8002936:	e00c      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 8002938:	2307      	movs	r3, #7
 800293a:	e00a      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 800293c:	2305      	movs	r3, #5
 800293e:	e008      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 8002940:	2304      	movs	r3, #4
 8002942:	e006      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 8002944:	2303      	movs	r3, #3
 8002946:	e004      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 8002948:	2302      	movs	r3, #2
 800294a:	e002      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 8002950:	2300      	movs	r3, #0
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	f002 0203 	and.w	r2, r2, #3
 8002958:	00d2      	lsls	r2, r2, #3
 800295a:	4093      	lsls	r3, r2
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002962:	4938      	ldr	r1, [pc, #224]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3318      	adds	r3, #24
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002994:	4a2b      	ldr	r2, [pc, #172]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800299a:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029be:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 80029c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 80029f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3301      	adds	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f47f ae9f 	bne.w	8002774 <HAL_GPIO_Init+0x10>
  }
}
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	4002f400 	.word	0x4002f400
 8002a48:	42020000 	.word	0x42020000
 8002a4c:	42020400 	.word	0x42020400
 8002a50:	42020800 	.word	0x42020800
 8002a54:	42020c00 	.word	0x42020c00
 8002a58:	42021000 	.word	0x42021000
 8002a5c:	42021400 	.word	0x42021400
 8002a60:	42021800 	.word	0x42021800

08002a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002aaa:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe f99e 	bl	8000df4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002ac4:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f807 	bl	8002ae0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	4002f400 	.word	0x4002f400

08002ae0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e007      	b.n	8002b26 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 0204 	bic.w	r2, r3, #4
 8002b1e:	4905      	ldr	r1, [pc, #20]	; (8002b34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40030400 	.word	0x40030400

08002b38 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_ICACHE_Enable+0x1c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_ICACHE_Enable+0x1c>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40030400 	.word	0x40030400

08002b58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af06      	add	r7, sp, #24
 8002b5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0cb      	b.n	8002d02 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe fabe 	bl	8001100 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2203      	movs	r2, #3
 8002b88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 ffc1 	bl	8005b18 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	e040      	b.n	8002c1e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3301      	adds	r3, #1
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3303      	adds	r3, #3
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	3338      	adds	r3, #56	; 0x38
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	333c      	adds	r3, #60	; 0x3c
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	3340      	adds	r3, #64	; 0x40
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d3b9      	bcc.n	8002b9c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	e044      	b.n	8002cb8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d3b5      	bcc.n	8002c2e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	687e      	ldr	r6, [r7, #4]
 8002cca:	466d      	mov	r5, sp
 8002ccc:	f106 0410 	add.w	r4, r6, #16
 8002cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	602b      	str	r3, [r5, #0]
 8002cd8:	1d33      	adds	r3, r6, #4
 8002cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cdc:	6838      	ldr	r0, [r7, #0]
 8002cde:	f002 ff36 	bl	8005b4e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f805 	bl	8002d0a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40007000 	.word	0x40007000

08002d80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40007000 	.word	0x40007000

08002d9c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dac:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002dae:	f000 f861 	bl	8002e74 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db8:	d101      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e03e      	b.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dca:	d101      	bne.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e035      	b.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d101      	bne.n	8002ddc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e02f      	b.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002de4:	4917      	ldr	r1, [pc, #92]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	09db      	lsrs	r3, r3, #7
 8002dfa:	2232      	movs	r2, #50	; 0x32
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	08db      	lsrs	r3, r3, #3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0c:	e002      	b.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e20:	d102      	bne.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f2      	bne.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e34:	d101      	bne.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e000      	b.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40007000 	.word	0x40007000
 8002e48:	20000034 	.word	0x20000034
 8002e4c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002e50:	cccccccd 	.word	0xcccccccd

08002e54 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6053      	str	r3, [r2, #4]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40007000 	.word	0x40007000

08002e74 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	e00a      	b.n	8002ea8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d103      	bne.n	8002ea4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	e001      	b.n	8002ea8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002ea8:	687b      	ldr	r3, [r7, #4]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40007000 	.word	0x40007000

08002ebc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f000 bcc2 	b.w	8003854 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed0:	4b99      	ldr	r3, [pc, #612]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eda:	4b97      	ldr	r3, [pc, #604]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80e9 	beq.w	80030c4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4a>
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	f040 8083 	bne.w	8003006 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d17f      	bne.n	8003006 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f06:	4b8c      	ldr	r3, [pc, #560]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <HAL_RCC_OscConfig+0x64>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f000 bc9a 	b.w	8003854 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f24:	4b84      	ldr	r3, [pc, #528]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <HAL_RCC_OscConfig+0x7e>
 8002f30:	4b81      	ldr	r3, [pc, #516]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f38:	e005      	b.n	8002f46 <HAL_RCC_OscConfig+0x8a>
 8002f3a:	4b7f      	ldr	r3, [pc, #508]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d224      	bcs.n	8002f94 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fe9c 	bl	8003c8c <RCC_SetFlashLatencyFromMSIRange>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f000 bc7a 	b.w	8003854 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f60:	4b75      	ldr	r3, [pc, #468]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a74      	ldr	r2, [pc, #464]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b72      	ldr	r3, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	496f      	ldr	r1, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f7e:	4b6e      	ldr	r3, [pc, #440]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	496a      	ldr	r1, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
 8002f92:	e026      	b.n	8002fe2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f94:	4b68      	ldr	r3, [pc, #416]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a67      	ldr	r2, [pc, #412]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	f043 0308 	orr.w	r3, r3, #8
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	4962      	ldr	r1, [pc, #392]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	495d      	ldr	r1, [pc, #372]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fe5b 	bl	8003c8c <RCC_SetFlashLatencyFromMSIRange>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f000 bc39 	b.w	8003854 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fe2:	f000 fe17 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4a54      	ldr	r2, [pc, #336]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002fea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fec:	4b54      	ldr	r3, [pc, #336]	; (8003140 <HAL_RCC_OscConfig+0x284>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe faab 	bl	800154c <HAL_InitTick>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d060      	beq.n	80030c2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	f000 bc27 	b.w	8003854 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d039      	beq.n	8003082 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800300e:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a49      	ldr	r2, [pc, #292]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800301a:	f7fe fae7 	bl	80015ec <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003020:	e00f      	b.n	8003042 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003022:	f7fe fae3 	bl	80015ec <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d908      	bls.n	8003042 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003030:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	f000 bc09 	b.w	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0e9      	beq.n	8003022 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304e:	4b3a      	ldr	r3, [pc, #232]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a39      	ldr	r2, [pc, #228]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003054:	f043 0308 	orr.w	r3, r3, #8
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b37      	ldr	r3, [pc, #220]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	4934      	ldr	r1, [pc, #208]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800306c:	4b32      	ldr	r3, [pc, #200]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	492f      	ldr	r1, [pc, #188]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
 8003080:	e020      	b.n	80030c4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800308e:	f7fe faad 	bl	80015ec <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003094:	e00e      	b.n	80030b4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003096:	f7fe faa9 	bl	80015ec <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d907      	bls.n	80030b4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e3cf      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ea      	bne.n	8003096 <HAL_RCC_OscConfig+0x1da>
 80030c0:	e000      	b.n	80030c4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d07e      	beq.n	80031ce <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d005      	beq.n	80030e2 <HAL_RCC_OscConfig+0x226>
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b0c      	cmp	r3, #12
 80030da:	d10e      	bne.n	80030fa <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d10b      	bne.n	80030fa <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d06e      	beq.n	80031cc <HAL_RCC_OscConfig+0x310>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d16a      	bne.n	80031cc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e3ac      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x256>
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e024      	b.n	800315c <HAL_RCC_OscConfig+0x2a0>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311a:	d113      	bne.n	8003144 <HAL_RCC_OscConfig+0x288>
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a05      	ldr	r2, [pc, #20]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 8003122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a02      	ldr	r2, [pc, #8]	; (8003138 <HAL_RCC_OscConfig+0x27c>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e012      	b.n	800315c <HAL_RCC_OscConfig+0x2a0>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	20000034 	.word	0x20000034
 8003140:	20000038 	.word	0x20000038
 8003144:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a8a      	ldr	r2, [pc, #552]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 800314a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a87      	ldr	r2, [pc, #540]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d019      	beq.n	8003198 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fa42 	bl	80015ec <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316a:	e00e      	b.n	800318a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fa3e 	bl	80015ec <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d907      	bls.n	800318a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317a:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e364      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318a:	4b7a      	ldr	r3, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ea      	beq.n	800316c <HAL_RCC_OscConfig+0x2b0>
 8003196:	e01a      	b.n	80031ce <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe fa28 	bl	80015ec <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800319e:	e00e      	b.n	80031be <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fe fa24 	bl	80015ec <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d907      	bls.n	80031be <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ae:	4b71      	ldr	r3, [pc, #452]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e34a      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031be:	4b6d      	ldr	r3, [pc, #436]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1ea      	bne.n	80031a0 <HAL_RCC_OscConfig+0x2e4>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d06c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d005      	beq.n	80031ec <HAL_RCC_OscConfig+0x330>
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d119      	bne.n	800321a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d116      	bne.n	800321a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ec:	4b61      	ldr	r3, [pc, #388]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_OscConfig+0x348>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e327      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003204:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	4958      	ldr	r1, [pc, #352]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003218:	e04c      	b.n	80032b4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d029      	beq.n	8003276 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003222:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a53      	ldr	r2, [pc, #332]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fe f9dd 	bl	80015ec <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003234:	e00e      	b.n	8003254 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003236:	f7fe f9d9 	bl	80015ec <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d907      	bls.n	8003254 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e2ff      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003254:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ea      	beq.n	8003236 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003260:	4b44      	ldr	r3, [pc, #272]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	4941      	ldr	r1, [pc, #260]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
 8003274:	e01e      	b.n	80032b4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003276:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a3e      	ldr	r2, [pc, #248]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 800327c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fe f9b3 	bl	80015ec <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003288:	e00e      	b.n	80032a8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328a:	f7fe f9af 	bl	80015ec <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d907      	bls.n	80032a8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e2d5      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ea      	bne.n	800328a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d062      	beq.n	8003386 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d038      	beq.n	800333a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d108      	bne.n	80032e2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80032d0:	4b28      	ldr	r3, [pc, #160]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80032d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d6:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80032d8:	f023 0310 	bic.w	r3, r3, #16
 80032dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80032e0:	e007      	b.n	80032f2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	4a22      	ldr	r2, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f043 0310 	orr.w	r3, r3, #16
 80032ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80032f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f8:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe f973 	bl	80015ec <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003308:	e00f      	b.n	800332a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330a:	f7fe f96f 	bl	80015ec <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b07      	cmp	r3, #7
 8003316:	d908      	bls.n	800332a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 800331a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e294      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332a:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 800332c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0e8      	beq.n	800330a <HAL_RCC_OscConfig+0x44e>
 8003338:	e025      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 800333c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003340:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe f94f 	bl	80015ec <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003350:	e012      	b.n	8003378 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003352:	f7fe f94b 	bl	80015ec <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b07      	cmp	r3, #7
 800335e:	d90b      	bls.n	8003378 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <HAL_RCC_OscConfig+0x4b8>)
 8003362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e270      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003378:	4ba8      	ldr	r3, [pc, #672]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e5      	bne.n	8003352 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 812d 	beq.w	80035ee <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003398:	4ba0      	ldr	r3, [pc, #640]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b9d      	ldr	r3, [pc, #628]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	4a9c      	ldr	r2, [pc, #624]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	; 0x58
 80033b0:	4b9a      	ldr	r3, [pc, #616]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	4b97      	ldr	r3, [pc, #604]	; (8003620 <HAL_RCC_OscConfig+0x764>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d11e      	bne.n	800340a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033cc:	4b94      	ldr	r3, [pc, #592]	; (8003620 <HAL_RCC_OscConfig+0x764>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a93      	ldr	r2, [pc, #588]	; (8003620 <HAL_RCC_OscConfig+0x764>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d8:	f7fe f908 	bl	80015ec <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033de:	e00e      	b.n	80033fe <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e0:	f7fe f904 	bl	80015ec <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d907      	bls.n	80033fe <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ee:	4b8c      	ldr	r3, [pc, #560]	; (8003620 <HAL_RCC_OscConfig+0x764>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e22a      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_OscConfig+0x764>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ea      	beq.n	80033e0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01f      	beq.n	8003456 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003422:	4b7e      	ldr	r3, [pc, #504]	; (800361c <HAL_RCC_OscConfig+0x760>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	4a7c      	ldr	r2, [pc, #496]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003432:	4b7a      	ldr	r3, [pc, #488]	; (800361c <HAL_RCC_OscConfig+0x760>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	4a78      	ldr	r2, [pc, #480]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003442:	e018      	b.n	8003476 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003444:	4b75      	ldr	r3, [pc, #468]	; (800361c <HAL_RCC_OscConfig+0x760>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	4a74      	ldr	r2, [pc, #464]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003454:	e00f      	b.n	8003476 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003456:	4b71      	ldr	r3, [pc, #452]	; (800361c <HAL_RCC_OscConfig+0x760>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	4a6f      	ldr	r2, [pc, #444]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003466:	4b6d      	ldr	r3, [pc, #436]	; (800361c <HAL_RCC_OscConfig+0x760>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	4a6b      	ldr	r2, [pc, #428]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800346e:	f023 0304 	bic.w	r3, r3, #4
 8003472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d068      	beq.n	8003550 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fe f8b5 	bl	80015ec <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003484:	e011      	b.n	80034aa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe f8b1 	bl	80015ec <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d908      	bls.n	80034aa <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003498:	4b60      	ldr	r3, [pc, #384]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1d4      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034aa:	4b5c      	ldr	r3, [pc, #368]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0e6      	beq.n	8003486 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d022      	beq.n	800350a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034c4:	4b55      	ldr	r3, [pc, #340]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	4a54      	ldr	r2, [pc, #336]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034d4:	e011      	b.n	80034fa <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe f889 	bl	80015ec <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d908      	bls.n	80034fa <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034e8:	4b4c      	ldr	r3, [pc, #304]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1ac      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034fa:	4b48      	ldr	r3, [pc, #288]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0e6      	beq.n	80034d6 <HAL_RCC_OscConfig+0x61a>
 8003508:	e068      	b.n	80035dc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800350a:	4b44      	ldr	r3, [pc, #272]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	4a42      	ldr	r2, [pc, #264]	; (800361c <HAL_RCC_OscConfig+0x760>)
 8003512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800351a:	e011      	b.n	8003540 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fe f866 	bl	80015ec <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d908      	bls.n	8003540 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_RCC_OscConfig+0x760>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e189      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003540:	4b36      	ldr	r3, [pc, #216]	; (800361c <HAL_RCC_OscConfig+0x760>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e6      	bne.n	800351c <HAL_RCC_OscConfig+0x660>
 800354e:	e045      	b.n	80035dc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe f84c 	bl	80015ec <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003556:	e011      	b.n	800357c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fe f848 	bl	80015ec <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d908      	bls.n	800357c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e16b      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e6      	bne.n	8003558 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d021      	beq.n	80035dc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003598:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80035a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80035a8:	e011      	b.n	80035ce <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fe f81f 	bl	80015ec <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d908      	bls.n	80035ce <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e142      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80035ce:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e6      	bne.n	80035aa <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035dc:	7ffb      	ldrb	r3, [r7, #31]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	4a0d      	ldr	r2, [pc, #52]	; (800361c <HAL_RCC_OscConfig+0x760>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d04f      	beq.n	800369a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d028      	beq.n	8003654 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCC_OscConfig+0x760>)
 8003604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_RCC_OscConfig+0x760>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fd ffeb 	bl	80015ec <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003618:	e014      	b.n	8003644 <HAL_RCC_OscConfig+0x788>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003624:	f7fd ffe2 	bl	80015ec <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d908      	bls.n	8003644 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003632:	4b8a      	ldr	r3, [pc, #552]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 8003634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e107      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003644:	4b85      	ldr	r3, [pc, #532]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 8003646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0e8      	beq.n	8003624 <HAL_RCC_OscConfig+0x768>
 8003652:	e022      	b.n	800369a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003654:	4b81      	ldr	r3, [pc, #516]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 8003656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800365a:	4a80      	ldr	r2, [pc, #512]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fd ffc2 	bl	80015ec <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800366a:	e00f      	b.n	800368c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800366c:	f7fd ffbe 	bl	80015ec <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d908      	bls.n	800368c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800367a:	4b78      	ldr	r3, [pc, #480]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800367c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e0e3      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800368c:	4b73      	ldr	r3, [pc, #460]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800368e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e8      	bne.n	800366c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80d7 	beq.w	8003852 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a4:	4b6d      	ldr	r3, [pc, #436]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b0c      	cmp	r3, #12
 80036ae:	f000 8091 	beq.w	80037d4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d166      	bne.n	8003788 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a67      	ldr	r2, [pc, #412]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80036c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fd ff91 	bl	80015ec <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036cc:	e00e      	b.n	80036ec <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fd ff8d 	bl	80015ec <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d907      	bls.n	80036ec <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036dc:	4b5f      	ldr	r3, [pc, #380]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e0b3      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ec:	4b5b      	ldr	r3, [pc, #364]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ea      	bne.n	80036ce <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f8:	4b58      	ldr	r3, [pc, #352]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	4b58      	ldr	r3, [pc, #352]	; (8003860 <HAL_RCC_OscConfig+0x9a4>)
 80036fe:	4013      	ands	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003708:	3a01      	subs	r2, #1
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	4311      	orrs	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003712:	0212      	lsls	r2, r2, #8
 8003714:	4311      	orrs	r1, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800371a:	0852      	lsrs	r2, r2, #1
 800371c:	3a01      	subs	r2, #1
 800371e:	0552      	lsls	r2, r2, #21
 8003720:	4311      	orrs	r1, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003726:	0852      	lsrs	r2, r2, #1
 8003728:	3a01      	subs	r2, #1
 800372a:	0652      	lsls	r2, r2, #25
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003732:	06d2      	lsls	r2, r2, #27
 8003734:	430a      	orrs	r2, r1
 8003736:	4949      	ldr	r1, [pc, #292]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800373c:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a46      	ldr	r2, [pc, #280]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003746:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003748:	4b44      	ldr	r3, [pc, #272]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a43      	ldr	r2, [pc, #268]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fd ff4a 	bl	80015ec <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	e00e      	b.n	800377a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375c:	f7fd ff46 	bl	80015ec <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d907      	bls.n	800377a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	4b3c      	ldr	r3, [pc, #240]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e06c      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	4b38      	ldr	r3, [pc, #224]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ea      	beq.n	800375c <HAL_RCC_OscConfig+0x8a0>
 8003786:	e064      	b.n	8003852 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003788:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a33      	ldr	r2, [pc, #204]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 800378e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fd ff2a 	bl	80015ec <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379a:	e00e      	b.n	80037ba <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379c:	f7fd ff26 	bl	80015ec <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d907      	bls.n	80037ba <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037aa:	4b2c      	ldr	r3, [pc, #176]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e04c      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ba:	4b28      	ldr	r3, [pc, #160]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ea      	bne.n	800379c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037c6:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	4924      	ldr	r1, [pc, #144]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <HAL_RCC_OscConfig+0x9a8>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	60cb      	str	r3, [r1, #12]
 80037d2:	e03e      	b.n	8003852 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e039      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80037e0:	4b1e      	ldr	r3, [pc, #120]	; (800385c <HAL_RCC_OscConfig+0x9a0>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0203 	and.w	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d12c      	bne.n	800384e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fe:	3b01      	subs	r3, #1
 8003800:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d123      	bne.n	800384e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d11b      	bne.n	800384e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d113      	bne.n	800384e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	3b01      	subs	r3, #1
 8003834:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d109      	bne.n	800384e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3720      	adds	r7, #32
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000
 8003860:	019f800c 	.word	0x019f800c
 8003864:	feeefffc 	.word	0xfeeefffc

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e11c      	b.n	8003aba <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003880:	4b90      	ldr	r3, [pc, #576]	; (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d910      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 020f 	bic.w	r2, r3, #15
 8003896:	498b      	ldr	r1, [pc, #556]	; (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b89      	ldr	r3, [pc, #548]	; (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e104      	b.n	8003aba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	4b81      	ldr	r3, [pc, #516]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d908      	bls.n	80038de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b7e      	ldr	r3, [pc, #504]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	497b      	ldr	r1, [pc, #492]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8085 	beq.w	80039f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d11f      	bne.n	8003934 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f4:	4b74      	ldr	r3, [pc, #464]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0da      	b.n	8003aba <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003904:	f000 fa26 	bl	8003d54 <RCC_GetSysClockFreqFromPLLSource>
 8003908:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4a6f      	ldr	r2, [pc, #444]	; (8003acc <HAL_RCC_ClockConfig+0x264>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d947      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003912:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d141      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800391e:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003926:	4a68      	ldr	r2, [pc, #416]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e036      	b.n	80039a2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d107      	bne.n	800394c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800393c:	4b62      	ldr	r3, [pc, #392]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d115      	bne.n	8003974 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b6      	b.n	8003aba <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003954:	4b5c      	ldr	r3, [pc, #368]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0aa      	b.n	8003aba <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003964:	4b58      	ldr	r3, [pc, #352]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0a2      	b.n	8003aba <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003974:	f000 f8b0 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003978:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4a53      	ldr	r2, [pc, #332]	; (8003acc <HAL_RCC_ClockConfig+0x264>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d90f      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003982:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800398e:	4b4e      	ldr	r3, [pc, #312]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003996:	4a4c      	ldr	r2, [pc, #304]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b49      	ldr	r3, [pc, #292]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4946      	ldr	r1, [pc, #280]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b4:	f7fd fe1a 	bl	80015ec <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e013      	b.n	80039e4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fd fe16 	bl	80015ec <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d90a      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e06a      	b.n	8003aba <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e4:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 020c 	and.w	r2, r3, #12
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d1e2      	bne.n	80039bc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b80      	cmp	r3, #128	; 0x80
 80039fa:	d105      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039fc:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a31      	ldr	r2, [pc, #196]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a06:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d010      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d208      	bcs.n	8003a36 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4925      	ldr	r1, [pc, #148]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d210      	bcs.n	8003a66 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 020f 	bic.w	r2, r3, #15
 8003a4c:	491d      	ldr	r1, [pc, #116]	; (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e029      	b.n	8003aba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	4912      	ldr	r1, [pc, #72]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	490a      	ldr	r1, [pc, #40]	; (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003aa4:	f000 f8b6 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x268>)
 8003aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fd4a 	bl	800154c <HAL_InitTick>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	04c4b400 	.word	0x04c4b400
 8003ad0:	20000034 	.word	0x20000034
 8003ad4:	20000038 	.word	0x20000038

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	; 0x24
 8003adc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae6:	4b47      	ldr	r3, [pc, #284]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af0:	4b44      	ldr	r3, [pc, #272]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x34>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	d121      	bne.n	8003b4a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d11e      	bne.n	8003b4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b0c:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b18:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	e005      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b28:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003b34:	4a34      	ldr	r2, [pc, #208]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x130>)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d102      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x134>)
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e004      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b5c:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8003b5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d146      	bne.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b70:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d003      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb4>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d00d      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0xce>
 8003b8a:	e019      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x134>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b96:	68d2      	ldr	r2, [r2, #12]
 8003b98:	0a12      	lsrs	r2, r2, #8
 8003b9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	617b      	str	r3, [r7, #20]
        break;
 8003ba4:	e019      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003bb0:	68d2      	ldr	r2, [r2, #12]
 8003bb2:	0a12      	lsrs	r2, r2, #8
 8003bb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
        break;
 8003bbe:	e00c      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003bca:	68d2      	ldr	r2, [r2, #12]
 8003bcc:	0a12      	lsrs	r2, r2, #8
 8003bce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	617b      	str	r3, [r7, #20]
        break;
 8003bd8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	0e5b      	lsrs	r3, r3, #25
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	3301      	adds	r3, #1
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08006a40 	.word	0x08006a40
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	007a1200 	.word	0x007a1200

08003c14 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003c18:	f7ff ff5e 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetHCLKFreq+0x20>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCC_GetHCLKFreq+0x24>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	08006a28 	.word	0x08006a28

08003c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c40:	f7ff ffe8 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4903      	ldr	r1, [pc, #12]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	08006a38 	.word	0x08006a38

08003c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c68:	f7ff ffd4 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0adb      	lsrs	r3, r3, #11
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08006a38 	.word	0x08006a38

08003c8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c98:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ca4:	f7ff f86c 	bl	8002d80 <HAL_PWREx_GetVoltageRange>
 8003ca8:	6138      	str	r0, [r7, #16]
 8003caa:	e014      	b.n	8003cd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb8:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cc4:	f7ff f85c 	bl	8002d80 <HAL_PWREx_GetVoltageRange>
 8003cc8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce2:	d10b      	bne.n	8003cfc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d919      	bls.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2ba0      	cmp	r3, #160	; 0xa0
 8003cee:	d902      	bls.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003cf4:	e013      	b.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003cfa:	e010      	b.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b80      	cmp	r3, #128	; 0x80
 8003d00:	d902      	bls.n	8003d08 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d02:	2303      	movs	r3, #3
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e00a      	b.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d102      	bne.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d0e:	2302      	movs	r3, #2
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e004      	b.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b70      	cmp	r3, #112	; 0x70
 8003d18:	d101      	bne.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 020f 	bic.w	r2, r3, #15
 8003d26:	490a      	ldr	r1, [pc, #40]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40022000 	.word	0x40022000

08003d54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d64:	4b2e      	ldr	r3, [pc, #184]	; (8003e20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d015      	beq.n	8003da4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d839      	bhi.n	8003df2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d01c      	beq.n	8003dbe <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d133      	bne.n	8003df2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d8a:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d94:	68d2      	ldr	r2, [r2, #12]
 8003d96:	0a12      	lsrs	r2, r2, #8
 8003d98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	613b      	str	r3, [r7, #16]
      break;
 8003da2:	e029      	b.n	8003df8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da4:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003dae:	68d2      	ldr	r2, [r2, #12]
 8003db0:	0a12      	lsrs	r2, r2, #8
 8003db2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	613b      	str	r3, [r7, #16]
      break;
 8003dbc:	e01c      	b.n	8003df8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dbe:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e005      	b.n	8003de6 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003de6:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dee:	613b      	str	r3, [r7, #16]
        break;
 8003df0:	e002      	b.n	8003df8 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
      break;
 8003df6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0e5b      	lsrs	r3, r3, #25
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	3301      	adds	r3, #1
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e12:	683b      	ldr	r3, [r7, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	40021000 	.word	0x40021000
 8003e24:	00f42400 	.word	0x00f42400
 8003e28:	007a1200 	.word	0x007a1200
 8003e2c:	08006a40 	.word	0x08006a40

08003e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e38:	2300      	movs	r3, #0
 8003e3a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d040      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d02a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d825      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d026      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e5c:	2b60      	cmp	r3, #96	; 0x60
 8003e5e:	d821      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d006      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d81d      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e70:	e018      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e72:	4b8f      	ldr	r3, [pc, #572]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	4a8e      	ldr	r2, [pc, #568]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e7e:	e015      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fb56 	bl	8004538 <RCCEx_PLLSAI1_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e90:	e00c      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3320      	adds	r3, #32
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fc33 	bl	8004704 <RCCEx_PLLSAI2_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ea2:	e003      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
        break;
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eac:	7ffb      	ldrb	r3, [r7, #31]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb2:	4b7f      	ldr	r3, [pc, #508]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eb8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec0:	497b      	ldr	r1, [pc, #492]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ec8:	e001      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d047      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d030      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	d82a      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eee:	d02a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef4:	d824      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d008      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f00:	d81e      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f0c:	e018      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f0e:	4b68      	ldr	r3, [pc, #416]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	4a67      	ldr	r2, [pc, #412]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f18:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f1a:	e015      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fb08 	bl	8004538 <RCCEx_PLLSAI1_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f2c:	e00c      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3320      	adds	r3, #32
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fbe5 	bl	8004704 <RCCEx_PLLSAI2_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f3e:	e003      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	77fb      	strb	r3, [r7, #31]
        break;
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f48:	7ffb      	ldrb	r3, [r7, #31]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f4e:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4954      	ldr	r1, [pc, #336]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f64:	e001      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f66:	7ffb      	ldrb	r3, [r7, #31]
 8003f68:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80ab 	beq.w	80040ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7c:	4b4c      	ldr	r3, [pc, #304]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10d      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f88:	4b49      	ldr	r3, [pc, #292]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8c:	4a48      	ldr	r2, [pc, #288]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f92:	6593      	str	r3, [r2, #88]	; 0x58
 8003f94:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa4:	4b43      	ldr	r3, [pc, #268]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a42      	ldr	r2, [pc, #264]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb0:	f7fd fb1c 	bl	80015ec <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb6:	e00f      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb8:	f7fd fb18 	bl	80015ec <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d908      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003fd6:	e006      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd8:	4b36      	ldr	r3, [pc, #216]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0e9      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003fe6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003fe8:	7ffb      	ldrb	r3, [r7, #31]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d164      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fee:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01f      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	429a      	cmp	r2, r3
 800400a:	d019      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004016:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	4a24      	ldr	r2, [pc, #144]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004028:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	4a20      	ldr	r2, [pc, #128]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004038:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01f      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404a:	f7fd facf 	bl	80015ec <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004050:	e012      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004052:	f7fd facb 	bl	80015ec <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d909      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004076:	e007      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0e5      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004086:	e000      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004088:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800408a:	7ffb      	ldrb	r3, [r7, #31]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10c      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	4903      	ldr	r1, [pc, #12]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040a8:	e008      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040aa:	7ffb      	ldrb	r3, [r7, #31]
 80040ac:	77bb      	strb	r3, [r7, #30]
 80040ae:	e005      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	7ffb      	ldrb	r3, [r7, #31]
 80040ba:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d105      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c2:	4b9c      	ldr	r3, [pc, #624]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	4a9b      	ldr	r2, [pc, #620]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040da:	4b96      	ldr	r3, [pc, #600]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f023 0203 	bic.w	r2, r3, #3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e8:	4992      	ldr	r1, [pc, #584]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040fc:	4b8d      	ldr	r3, [pc, #564]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f023 020c 	bic.w	r2, r3, #12
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	498a      	ldr	r1, [pc, #552]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800411e:	4b85      	ldr	r3, [pc, #532]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	4981      	ldr	r1, [pc, #516]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004140:	4b7c      	ldr	r3, [pc, #496]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4979      	ldr	r1, [pc, #484]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004162:	4b74      	ldr	r3, [pc, #464]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	4970      	ldr	r1, [pc, #448]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004184:	4b6b      	ldr	r3, [pc, #428]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	4968      	ldr	r1, [pc, #416]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041a6:	4b63      	ldr	r3, [pc, #396]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b4:	495f      	ldr	r1, [pc, #380]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041c8:	4b5a      	ldr	r3, [pc, #360]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d6:	4957      	ldr	r1, [pc, #348]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80041ea:	4b52      	ldr	r3, [pc, #328]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041f8:	494e      	ldr	r1, [pc, #312]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d031      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004214:	d00e      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800421a:	d814      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004224:	d10f      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004226:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4a42      	ldr	r2, [pc, #264]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800422c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004230:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004232:	e00c      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f97c 	bl	8004538 <RCCEx_PLLSAI1_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004244:	e003      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	77fb      	strb	r3, [r7, #31]
        break;
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	7ffb      	ldrb	r3, [r7, #31]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004254:	4b37      	ldr	r3, [pc, #220]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004262:	4934      	ldr	r1, [pc, #208]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7ffb      	ldrb	r3, [r7, #31]
 800426e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800427c:	4b2d      	ldr	r3, [pc, #180]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	492a      	ldr	r1, [pc, #168]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800429e:	4b25      	ldr	r3, [pc, #148]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ac:	4921      	ldr	r1, [pc, #132]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042c0:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	4919      	ldr	r1, [pc, #100]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042e2:	4b14      	ldr	r3, [pc, #80]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042e8:	f023 0203 	bic.w	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	4910      	ldr	r1, [pc, #64]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d02b      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004312:	4908      	ldr	r1, [pc, #32]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004322:	d109      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a02      	ldr	r2, [pc, #8]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800432a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432e:	60d3      	str	r3, [r2, #12]
 8004330:	e014      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004340:	d10c      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	2101      	movs	r1, #1
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f8f5 	bl	8004538 <RCCEx_PLLSAI1_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004352:	7ffb      	ldrb	r3, [r7, #31]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004358:	7ffb      	ldrb	r3, [r7, #31]
 800435a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d04a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800436c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004370:	d108      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004372:	4b70      	ldr	r3, [pc, #448]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004378:	4a6e      	ldr	r2, [pc, #440]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800437a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800437e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004382:	e012      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004384:	4b6b      	ldr	r3, [pc, #428]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004392:	4968      	ldr	r1, [pc, #416]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800439a:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800439c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a0:	4a64      	ldr	r2, [pc, #400]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b2:	d10d      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	2101      	movs	r1, #1
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 f8bc 	bl	8004538 <RCCEx_PLLSAI1_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80043c4:	7ffb      	ldrb	r3, [r7, #31]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d019      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80043ca:	7ffb      	ldrb	r3, [r7, #31]
 80043cc:	77bb      	strb	r3, [r7, #30]
 80043ce:	e016      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d8:	d106      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043da:	4b56      	ldr	r3, [pc, #344]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4a55      	ldr	r2, [pc, #340]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043e4:	60d3      	str	r3, [r2, #12]
 80043e6:	e00a      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043f0:	d105      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043f2:	4b50      	ldr	r3, [pc, #320]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4a4f      	ldr	r2, [pc, #316]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fc:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d028      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800440a:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004418:	4946      	ldr	r1, [pc, #280]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004428:	d106      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800442a:	4b42      	ldr	r3, [pc, #264]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	4a41      	ldr	r2, [pc, #260]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004434:	60d3      	str	r3, [r2, #12]
 8004436:	e011      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800443c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004440:	d10c      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	2101      	movs	r1, #1
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f875 	bl	8004538 <RCCEx_PLLSAI1_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004452:	7ffb      	ldrb	r3, [r7, #31]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01e      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004468:	4b32      	ldr	r3, [pc, #200]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004478:	492e      	ldr	r1, [pc, #184]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800448a:	d10c      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	2102      	movs	r1, #2
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f850 	bl	8004538 <RCCEx_PLLSAI1_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800449c:	7ffb      	ldrb	r3, [r7, #31]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80044a2:	7ffb      	ldrb	r3, [r7, #31]
 80044a4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044b8:	f023 0204 	bic.w	r2, r3, #4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c2:	491c      	ldr	r1, [pc, #112]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044d6:	4b17      	ldr	r3, [pc, #92]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044dc:	f023 0218 	bic.w	r2, r3, #24
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	4913      	ldr	r1, [pc, #76]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d017      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044fa:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004500:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800450a:	490a      	ldr	r1, [pc, #40]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800451c:	d105      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4a04      	ldr	r2, [pc, #16]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004528:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800452a:	7fbb      	ldrb	r3, [r7, #30]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000

08004538 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d018      	beq.n	8004580 <RCCEx_PLLSAI1_Config+0x48>
 800454e:	2b03      	cmp	r3, #3
 8004550:	d81f      	bhi.n	8004592 <RCCEx_PLLSAI1_Config+0x5a>
 8004552:	2b01      	cmp	r3, #1
 8004554:	d002      	beq.n	800455c <RCCEx_PLLSAI1_Config+0x24>
 8004556:	2b02      	cmp	r3, #2
 8004558:	d009      	beq.n	800456e <RCCEx_PLLSAI1_Config+0x36>
 800455a:	e01a      	b.n	8004592 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800455c:	4b65      	ldr	r3, [pc, #404]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d117      	bne.n	8004598 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800456c:	e014      	b.n	8004598 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800456e:	4b61      	ldr	r3, [pc, #388]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004576:	2b00      	cmp	r3, #0
 8004578:	d110      	bne.n	800459c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457e:	e00d      	b.n	800459c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004580:	4b5c      	ldr	r3, [pc, #368]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004590:	e006      	b.n	80045a0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
      break;
 8004596:	e004      	b.n	80045a2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004598:	bf00      	nop
 800459a:	e002      	b.n	80045a2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800459c:	bf00      	nop
 800459e:	e000      	b.n	80045a2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80045a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f040 809f 	bne.w	80046e8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045aa:	4b52      	ldr	r3, [pc, #328]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a51      	ldr	r2, [pc, #324]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b6:	f7fd f819 	bl	80015ec <HAL_GetTick>
 80045ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045bc:	e00f      	b.n	80045de <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045be:	f7fd f815 	bl	80015ec <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d908      	bls.n	80045de <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045cc:	4b49      	ldr	r3, [pc, #292]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045dc:	e006      	b.n	80045ec <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045de:	4b45      	ldr	r3, [pc, #276]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e9      	bne.n	80045be <RCCEx_PLLSAI1_Config+0x86>
 80045ea:	e000      	b.n	80045ee <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80045ec:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d179      	bne.n	80046e8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045fa:	4b3e      	ldr	r3, [pc, #248]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004600:	4013      	ands	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6892      	ldr	r2, [r2, #8]
 8004606:	0211      	lsls	r1, r2, #8
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	68d2      	ldr	r2, [r2, #12]
 800460c:	06d2      	lsls	r2, r2, #27
 800460e:	4311      	orrs	r1, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6852      	ldr	r2, [r2, #4]
 8004614:	3a01      	subs	r2, #1
 8004616:	0112      	lsls	r2, r2, #4
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	4934      	ldr	r1, [pc, #208]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	610b      	str	r3, [r1, #16]
 8004626:	e033      	b.n	8004690 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d118      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800462e:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	4b32      	ldr	r3, [pc, #200]	; (80046fc <RCCEx_PLLSAI1_Config+0x1c4>)
 8004634:	4013      	ands	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6892      	ldr	r2, [r2, #8]
 800463a:	0211      	lsls	r1, r2, #8
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6912      	ldr	r2, [r2, #16]
 8004640:	0852      	lsrs	r2, r2, #1
 8004642:	3a01      	subs	r2, #1
 8004644:	0552      	lsls	r2, r2, #21
 8004646:	4311      	orrs	r1, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6852      	ldr	r2, [r2, #4]
 800464c:	3a01      	subs	r2, #1
 800464e:	0112      	lsls	r2, r2, #4
 8004650:	4311      	orrs	r1, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	4926      	ldr	r1, [pc, #152]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	610b      	str	r3, [r1, #16]
 800465e:	e017      	b.n	8004690 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	4b26      	ldr	r3, [pc, #152]	; (8004700 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004666:	4013      	ands	r3, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6892      	ldr	r2, [r2, #8]
 800466c:	0211      	lsls	r1, r2, #8
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6952      	ldr	r2, [r2, #20]
 8004672:	0852      	lsrs	r2, r2, #1
 8004674:	3a01      	subs	r2, #1
 8004676:	0652      	lsls	r2, r2, #25
 8004678:	4311      	orrs	r1, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6852      	ldr	r2, [r2, #4]
 800467e:	3a01      	subs	r2, #1
 8004680:	0112      	lsls	r2, r2, #4
 8004682:	4311      	orrs	r1, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	491a      	ldr	r1, [pc, #104]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004696:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800469a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fc ffa6 	bl	80015ec <HAL_GetTick>
 80046a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046a2:	e00f      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046a4:	f7fc ffa2 	bl	80015ec <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d908      	bls.n	80046c4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80046c2:	e006      	b.n	80046d2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0e9      	beq.n	80046a4 <RCCEx_PLLSAI1_Config+0x16c>
 80046d0:	e000      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80046d2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	4904      	ldr	r1, [pc, #16]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	07ff800c 	.word	0x07ff800c
 80046fc:	ff9f800c 	.word	0xff9f800c
 8004700:	f9ff800c 	.word	0xf9ff800c

08004704 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d018      	beq.n	800474c <RCCEx_PLLSAI2_Config+0x48>
 800471a:	2b03      	cmp	r3, #3
 800471c:	d81f      	bhi.n	800475e <RCCEx_PLLSAI2_Config+0x5a>
 800471e:	2b01      	cmp	r3, #1
 8004720:	d002      	beq.n	8004728 <RCCEx_PLLSAI2_Config+0x24>
 8004722:	2b02      	cmp	r3, #2
 8004724:	d009      	beq.n	800473a <RCCEx_PLLSAI2_Config+0x36>
 8004726:	e01a      	b.n	800475e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004728:	4b4a      	ldr	r3, [pc, #296]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d117      	bne.n	8004764 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004738:	e014      	b.n	8004764 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800473a:	4b46      	ldr	r3, [pc, #280]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	2b00      	cmp	r3, #0
 8004744:	d110      	bne.n	8004768 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474a:	e00d      	b.n	8004768 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800474c:	4b41      	ldr	r3, [pc, #260]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475c:	e006      	b.n	800476c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
      break;
 8004762:	e004      	b.n	800476e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004764:	bf00      	nop
 8004766:	e002      	b.n	800476e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004768:	bf00      	nop
 800476a:	e000      	b.n	800476e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800476c:	bf00      	nop
  }

  if (status == HAL_OK)
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d169      	bne.n	8004848 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004774:	4b37      	ldr	r3, [pc, #220]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a36      	ldr	r2, [pc, #216]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 800477a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800477e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fc ff34 	bl	80015ec <HAL_GetTick>
 8004784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004786:	e00f      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004788:	f7fc ff30 	bl	80015ec <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d908      	bls.n	80047a8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004796:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047a6:	e006      	b.n	80047b6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047a8:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e9      	bne.n	8004788 <RCCEx_PLLSAI2_Config+0x84>
 80047b4:	e000      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80047b6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d144      	bne.n	8004848 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d115      	bne.n	80047f0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047c4:	4b23      	ldr	r3, [pc, #140]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	4b23      	ldr	r3, [pc, #140]	; (8004858 <RCCEx_PLLSAI2_Config+0x154>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6892      	ldr	r2, [r2, #8]
 80047d0:	0211      	lsls	r1, r2, #8
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68d2      	ldr	r2, [r2, #12]
 80047d6:	06d2      	lsls	r2, r2, #27
 80047d8:	4311      	orrs	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6852      	ldr	r2, [r2, #4]
 80047de:	3a01      	subs	r2, #1
 80047e0:	0112      	lsls	r2, r2, #4
 80047e2:	4311      	orrs	r1, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	491a      	ldr	r1, [pc, #104]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047f0:	4b18      	ldr	r3, [pc, #96]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a17      	ldr	r2, [pc, #92]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fc fef6 	bl	80015ec <HAL_GetTick>
 8004800:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004802:	e00f      	b.n	8004824 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004804:	f7fc fef2 	bl	80015ec <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d908      	bls.n	8004824 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004822:	e006      	b.n	8004832 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0e9      	beq.n	8004804 <RCCEx_PLLSAI2_Config+0x100>
 8004830:	e000      	b.n	8004834 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004832:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	4904      	ldr	r1, [pc, #16]	; (8004854 <RCCEx_PLLSAI2_Config+0x150>)
 8004844:	4313      	orrs	r3, r2
 8004846:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004848:	7bfb      	ldrb	r3, [r7, #15]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40021000 	.word	0x40021000
 8004858:	07ff800c 	.word	0x07ff800c

0800485c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d066      	beq.n	800493c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fc fbfe 	bl	8001084 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b10      	cmp	r3, #16
 800489c:	d045      	beq.n	800492a <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800489e:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <HAL_RTC_Init+0xec>)
 80048a0:	22ca      	movs	r2, #202	; 0xca
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24
 80048a4:	4b28      	ldr	r3, [pc, #160]	; (8004948 <HAL_RTC_Init+0xec>)
 80048a6:	2253      	movs	r2, #83	; 0x53
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f872 	bl	8004994 <RTC_EnterInitMode>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d121      	bne.n	80048fe <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80048ba:	4b23      	ldr	r3, [pc, #140]	; (8004948 <HAL_RTC_Init+0xec>)
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <HAL_RTC_Init+0xec>)
 80048c0:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80048c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80048ca:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <HAL_RTC_Init+0xec>)
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	4319      	orrs	r1, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	430b      	orrs	r3, r1
 80048de:	491a      	ldr	r1, [pc, #104]	; (8004948 <HAL_RTC_Init+0xec>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	4916      	ldr	r1, [pc, #88]	; (8004948 <HAL_RTC_Init+0xec>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f881 	bl	80049fc <RTC_ExitInitMode>
 80048fa:	4603      	mov	r3, r0
 80048fc:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10e      	bne.n	8004922 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004904:	4b10      	ldr	r3, [pc, #64]	; (8004948 <HAL_RTC_Init+0xec>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a19      	ldr	r1, [r3, #32]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	4319      	orrs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	430b      	orrs	r3, r1
 800491c:	490a      	ldr	r1, [pc, #40]	; (8004948 <HAL_RTC_Init+0xec>)
 800491e:	4313      	orrs	r3, r2
 8004920:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_RTC_Init+0xec>)
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	625a      	str	r2, [r3, #36]	; 0x24
 8004928:	e001      	b.n	800492e <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800493c:	7bfb      	ldrb	r3, [r7, #15]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40002800 	.word	0x40002800

0800494c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <HAL_RTC_WaitForSynchro+0x40>)
 8004956:	4a0e      	ldr	r2, [pc, #56]	; (8004990 <HAL_RTC_WaitForSynchro+0x44>)
 8004958:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800495a:	f7fc fe47 	bl	80015ec <HAL_GetTick>
 800495e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004960:	e009      	b.n	8004976 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004962:	f7fc fe43 	bl	80015ec <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004970:	d901      	bls.n	8004976 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e006      	b.n	8004984 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RTC_WaitForSynchro+0x40>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ef      	beq.n	8004962 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40002800 	.word	0x40002800
 8004990:	0001005c 	.word	0x0001005c

08004994 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80049a0:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <RTC_EnterInitMode+0x64>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d120      	bne.n	80049ee <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80049ac:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <RTC_EnterInitMode+0x64>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <RTC_EnterInitMode+0x64>)
 80049b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80049b8:	f7fc fe18 	bl	80015ec <HAL_GetTick>
 80049bc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049be:	e00d      	b.n	80049dc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049c0:	f7fc fe14 	bl	80015ec <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ce:	d905      	bls.n	80049dc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2203      	movs	r2, #3
 80049d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <RTC_EnterInitMode+0x64>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <RTC_EnterInitMode+0x5a>
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d1e8      	bne.n	80049c0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40002800 	.word	0x40002800

080049fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004a08:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <RTC_ExitInitMode+0x78>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <RTC_ExitInitMode+0x78>)
 8004a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a12:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a14:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <RTC_ExitInitMode+0x78>)
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10c      	bne.n	8004a3a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff93 	bl	800494c <HAL_RTC_WaitForSynchro>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01e      	beq.n	8004a6a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	73fb      	strb	r3, [r7, #15]
 8004a38:	e017      	b.n	8004a6a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a3a:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <RTC_ExitInitMode+0x78>)
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	4a0d      	ldr	r2, [pc, #52]	; (8004a74 <RTC_ExitInitMode+0x78>)
 8004a40:	f023 0320 	bic.w	r3, r3, #32
 8004a44:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff ff80 	bl	800494c <HAL_RTC_WaitForSynchro>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2203      	movs	r2, #3
 8004a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <RTC_ExitInitMode+0x78>)
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <RTC_ExitInitMode+0x78>)
 8004a64:	f043 0320 	orr.w	r3, r3, #32
 8004a68:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40002800 	.word	0x40002800

08004a78 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	490f      	ldr	r1, [pc, #60]	; (8004ac8 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	490c      	ldr	r1, [pc, #48]	; (8004acc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6919      	ldr	r1, [r3, #16]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	4906      	ldr	r1, [pc, #24]	; (8004acc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40002800 	.word	0x40002800
 8004acc:	40003400 	.word	0x40003400

08004ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e042      	b.n	8004b68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc fa65 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2224      	movs	r2, #36	; 0x24
 8004afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f82c 	bl	8004b70 <UART_SetConfig>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e022      	b.n	8004b68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fb20 	bl	8005170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fba7 	bl	80052b4 <UART_CheckIdleState>
 8004b66:	4603      	mov	r3, r0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b08c      	sub	sp, #48	; 0x30
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4baa      	ldr	r3, [pc, #680]	; (8004e48 <UART_SetConfig+0x2d8>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a9f      	ldr	r2, [pc, #636]	; (8004e4c <UART_SetConfig+0x2dc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004be6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	f023 010f 	bic.w	r1, r3, #15
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a90      	ldr	r2, [pc, #576]	; (8004e50 <UART_SetConfig+0x2e0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d125      	bne.n	8004c60 <UART_SetConfig+0xf0>
 8004c14:	4b8f      	ldr	r3, [pc, #572]	; (8004e54 <UART_SetConfig+0x2e4>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d81a      	bhi.n	8004c58 <UART_SetConfig+0xe8>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <UART_SetConfig+0xb8>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c39 	.word	0x08004c39
 8004c2c:	08004c49 	.word	0x08004c49
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c51 	.word	0x08004c51
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3e:	e116      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004c40:	2302      	movs	r3, #2
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c46:	e112      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4e:	e10e      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004c50:	2308      	movs	r3, #8
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e10a      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004c58:	2310      	movs	r3, #16
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e106      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a7c      	ldr	r2, [pc, #496]	; (8004e58 <UART_SetConfig+0x2e8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d138      	bne.n	8004cdc <UART_SetConfig+0x16c>
 8004c6a:	4b7a      	ldr	r3, [pc, #488]	; (8004e54 <UART_SetConfig+0x2e4>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	d82d      	bhi.n	8004cd4 <UART_SetConfig+0x164>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <UART_SetConfig+0x110>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004cb5 	.word	0x08004cb5
 8004c84:	08004cd5 	.word	0x08004cd5
 8004c88:	08004cd5 	.word	0x08004cd5
 8004c8c:	08004cd5 	.word	0x08004cd5
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004cd5 	.word	0x08004cd5
 8004c98:	08004cd5 	.word	0x08004cd5
 8004c9c:	08004cd5 	.word	0x08004cd5
 8004ca0:	08004cbd 	.word	0x08004cbd
 8004ca4:	08004cd5 	.word	0x08004cd5
 8004ca8:	08004cd5 	.word	0x08004cd5
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cba:	e0d8      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc2:	e0d4      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cca:	e0d0      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd2:	e0cc      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cda:	e0c8      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5e      	ldr	r2, [pc, #376]	; (8004e5c <UART_SetConfig+0x2ec>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d125      	bne.n	8004d32 <UART_SetConfig+0x1c2>
 8004ce6:	4b5b      	ldr	r3, [pc, #364]	; (8004e54 <UART_SetConfig+0x2e4>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cf0:	2b30      	cmp	r3, #48	; 0x30
 8004cf2:	d016      	beq.n	8004d22 <UART_SetConfig+0x1b2>
 8004cf4:	2b30      	cmp	r3, #48	; 0x30
 8004cf6:	d818      	bhi.n	8004d2a <UART_SetConfig+0x1ba>
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d00a      	beq.n	8004d12 <UART_SetConfig+0x1a2>
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d814      	bhi.n	8004d2a <UART_SetConfig+0x1ba>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <UART_SetConfig+0x19a>
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d008      	beq.n	8004d1a <UART_SetConfig+0x1aa>
 8004d08:	e00f      	b.n	8004d2a <UART_SetConfig+0x1ba>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d10:	e0ad      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d12:	2302      	movs	r3, #2
 8004d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d18:	e0a9      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d20:	e0a5      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d22:	2308      	movs	r3, #8
 8004d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d28:	e0a1      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d2a:	2310      	movs	r3, #16
 8004d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d30:	e09d      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a4a      	ldr	r2, [pc, #296]	; (8004e60 <UART_SetConfig+0x2f0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d125      	bne.n	8004d88 <UART_SetConfig+0x218>
 8004d3c:	4b45      	ldr	r3, [pc, #276]	; (8004e54 <UART_SetConfig+0x2e4>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d46:	2bc0      	cmp	r3, #192	; 0xc0
 8004d48:	d016      	beq.n	8004d78 <UART_SetConfig+0x208>
 8004d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d4c:	d818      	bhi.n	8004d80 <UART_SetConfig+0x210>
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d00a      	beq.n	8004d68 <UART_SetConfig+0x1f8>
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d814      	bhi.n	8004d80 <UART_SetConfig+0x210>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <UART_SetConfig+0x1f0>
 8004d5a:	2b40      	cmp	r3, #64	; 0x40
 8004d5c:	d008      	beq.n	8004d70 <UART_SetConfig+0x200>
 8004d5e:	e00f      	b.n	8004d80 <UART_SetConfig+0x210>
 8004d60:	2300      	movs	r3, #0
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d66:	e082      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d6e:	e07e      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d70:	2304      	movs	r3, #4
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d76:	e07a      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d78:	2308      	movs	r3, #8
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7e:	e076      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d80:	2310      	movs	r3, #16
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d86:	e072      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a35      	ldr	r2, [pc, #212]	; (8004e64 <UART_SetConfig+0x2f4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d12a      	bne.n	8004de8 <UART_SetConfig+0x278>
 8004d92:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <UART_SetConfig+0x2e4>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da0:	d01a      	beq.n	8004dd8 <UART_SetConfig+0x268>
 8004da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da6:	d81b      	bhi.n	8004de0 <UART_SetConfig+0x270>
 8004da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dac:	d00c      	beq.n	8004dc8 <UART_SetConfig+0x258>
 8004dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db2:	d815      	bhi.n	8004de0 <UART_SetConfig+0x270>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <UART_SetConfig+0x250>
 8004db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbc:	d008      	beq.n	8004dd0 <UART_SetConfig+0x260>
 8004dbe:	e00f      	b.n	8004de0 <UART_SetConfig+0x270>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc6:	e052      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dce:	e04e      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd6:	e04a      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004dd8:	2308      	movs	r3, #8
 8004dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dde:	e046      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004de0:	2310      	movs	r3, #16
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de6:	e042      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <UART_SetConfig+0x2dc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d13a      	bne.n	8004e68 <UART_SetConfig+0x2f8>
 8004df2:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <UART_SetConfig+0x2e4>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e00:	d01a      	beq.n	8004e38 <UART_SetConfig+0x2c8>
 8004e02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e06:	d81b      	bhi.n	8004e40 <UART_SetConfig+0x2d0>
 8004e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0c:	d00c      	beq.n	8004e28 <UART_SetConfig+0x2b8>
 8004e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e12:	d815      	bhi.n	8004e40 <UART_SetConfig+0x2d0>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <UART_SetConfig+0x2b0>
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d008      	beq.n	8004e30 <UART_SetConfig+0x2c0>
 8004e1e:	e00f      	b.n	8004e40 <UART_SetConfig+0x2d0>
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e26:	e022      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2e:	e01e      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004e30:	2304      	movs	r3, #4
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e36:	e01a      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3e:	e016      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e46:	e012      	b.n	8004e6e <UART_SetConfig+0x2fe>
 8004e48:	cfff69f3 	.word	0xcfff69f3
 8004e4c:	40008000 	.word	0x40008000
 8004e50:	40013800 	.word	0x40013800
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40004400 	.word	0x40004400
 8004e5c:	40004800 	.word	0x40004800
 8004e60:	40004c00 	.word	0x40004c00
 8004e64:	40005000 	.word	0x40005000
 8004e68:	2310      	movs	r3, #16
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4ab0      	ldr	r2, [pc, #704]	; (8005134 <UART_SetConfig+0x5c4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	f040 809b 	bne.w	8004fb0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d827      	bhi.n	8004ed2 <UART_SetConfig+0x362>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <UART_SetConfig+0x318>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004eb5 	.word	0x08004eb5
 8004e90:	08004ebd 	.word	0x08004ebd
 8004e94:	08004ed3 	.word	0x08004ed3
 8004e98:	08004ec3 	.word	0x08004ec3
 8004e9c:	08004ed3 	.word	0x08004ed3
 8004ea0:	08004ed3 	.word	0x08004ed3
 8004ea4:	08004ed3 	.word	0x08004ed3
 8004ea8:	08004ecb 	.word	0x08004ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eac:	f7fe fec6 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004eb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eb2:	e014      	b.n	8004ede <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb4:	f7fe fed6 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 8004eb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eba:	e010      	b.n	8004ede <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ebc:	4b9e      	ldr	r3, [pc, #632]	; (8005138 <UART_SetConfig+0x5c8>)
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ec0:	e00d      	b.n	8004ede <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec2:	f7fe fe09 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8004ec6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ec8:	e009      	b.n	8004ede <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ed0:	e005      	b.n	8004ede <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004edc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8130 	beq.w	8005146 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	4a94      	ldr	r2, [pc, #592]	; (800513c <UART_SetConfig+0x5cc>)
 8004eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4413      	add	r3, r2
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d305      	bcc.n	8004f16 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d903      	bls.n	8004f1e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f1c:	e113      	b.n	8005146 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	2200      	movs	r2, #0
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	60fa      	str	r2, [r7, #12]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	4a84      	ldr	r2, [pc, #528]	; (800513c <UART_SetConfig+0x5cc>)
 8004f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2200      	movs	r2, #0
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f40:	f7fb f978 	bl	8000234 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	020b      	lsls	r3, r1, #8
 8004f56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f5a:	0202      	lsls	r2, r0, #8
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	6849      	ldr	r1, [r1, #4]
 8004f60:	0849      	lsrs	r1, r1, #1
 8004f62:	2000      	movs	r0, #0
 8004f64:	460c      	mov	r4, r1
 8004f66:	4605      	mov	r5, r0
 8004f68:	eb12 0804 	adds.w	r8, r2, r4
 8004f6c:	eb43 0905 	adc.w	r9, r3, r5
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	469a      	mov	sl, r3
 8004f78:	4693      	mov	fp, r2
 8004f7a:	4652      	mov	r2, sl
 8004f7c:	465b      	mov	r3, fp
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4649      	mov	r1, r9
 8004f82:	f7fb f957 	bl	8000234 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f94:	d308      	bcc.n	8004fa8 <UART_SetConfig+0x438>
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9c:	d204      	bcs.n	8004fa8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6a3a      	ldr	r2, [r7, #32]
 8004fa4:	60da      	str	r2, [r3, #12]
 8004fa6:	e0ce      	b.n	8005146 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fae:	e0ca      	b.n	8005146 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb8:	d166      	bne.n	8005088 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d827      	bhi.n	8005012 <UART_SetConfig+0x4a2>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x458>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	08005013 	.word	0x08005013
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005013 	.word	0x08005013
 8004fe4:	08005013 	.word	0x08005013
 8004fe8:	0800500b 	.word	0x0800500b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fec:	f7fe fe26 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004ff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ff2:	e014      	b.n	800501e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7fe fe36 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ffa:	e010      	b.n	800501e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b4e      	ldr	r3, [pc, #312]	; (8005138 <UART_SetConfig+0x5c8>)
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005000:	e00d      	b.n	800501e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fe fd69 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8005006:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005008:	e009      	b.n	800501e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005010:	e005      	b.n	800501e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800501c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8090 	beq.w	8005146 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	4a44      	ldr	r2, [pc, #272]	; (800513c <UART_SetConfig+0x5cc>)
 800502c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005030:	461a      	mov	r2, r3
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	fbb3 f3f2 	udiv	r3, r3, r2
 8005038:	005a      	lsls	r2, r3, #1
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	441a      	add	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	fbb2 f3f3 	udiv	r3, r2, r3
 800504a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	2b0f      	cmp	r3, #15
 8005050:	d916      	bls.n	8005080 <UART_SetConfig+0x510>
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005058:	d212      	bcs.n	8005080 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f023 030f 	bic.w	r3, r3, #15
 8005062:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	b29b      	uxth	r3, r3
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	b29a      	uxth	r2, r3
 8005070:	8bfb      	ldrh	r3, [r7, #30]
 8005072:	4313      	orrs	r3, r2
 8005074:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	8bfa      	ldrh	r2, [r7, #30]
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	e062      	b.n	8005146 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005086:	e05e      	b.n	8005146 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005088:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800508c:	2b08      	cmp	r3, #8
 800508e:	d828      	bhi.n	80050e2 <UART_SetConfig+0x572>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <UART_SetConfig+0x528>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050cd 	.word	0x080050cd
 80050a4:	080050e3 	.word	0x080050e3
 80050a8:	080050d3 	.word	0x080050d3
 80050ac:	080050e3 	.word	0x080050e3
 80050b0:	080050e3 	.word	0x080050e3
 80050b4:	080050e3 	.word	0x080050e3
 80050b8:	080050db 	.word	0x080050db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050bc:	f7fe fdbe 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050c2:	e014      	b.n	80050ee <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c4:	f7fe fdce 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 80050c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050ca:	e010      	b.n	80050ee <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050cc:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <UART_SetConfig+0x5c8>)
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050d0:	e00d      	b.n	80050ee <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d2:	f7fe fd01 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050d8:	e009      	b.n	80050ee <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050e0:	e005      	b.n	80050ee <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050ec:	bf00      	nop
    }

    if (pclk != 0U)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d028      	beq.n	8005146 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	4a10      	ldr	r2, [pc, #64]	; (800513c <UART_SetConfig+0x5cc>)
 80050fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050fe:	461a      	mov	r2, r3
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	fbb3 f2f2 	udiv	r2, r3, r2
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	441a      	add	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	2b0f      	cmp	r3, #15
 800511c:	d910      	bls.n	8005140 <UART_SetConfig+0x5d0>
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005124:	d20c      	bcs.n	8005140 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	b29a      	uxth	r2, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60da      	str	r2, [r3, #12]
 8005130:	e009      	b.n	8005146 <UART_SetConfig+0x5d6>
 8005132:	bf00      	nop
 8005134:	40008000 	.word	0x40008000
 8005138:	00f42400 	.word	0x00f42400
 800513c:	08006a80 	.word	0x08006a80
      }
      else
      {
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2201      	movs	r2, #1
 800514a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2201      	movs	r2, #1
 8005152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2200      	movs	r2, #0
 8005160:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005162:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005166:	4618      	mov	r0, r3
 8005168:	3730      	adds	r7, #48	; 0x30
 800516a:	46bd      	mov	sp, r7
 800516c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01a      	beq.n	8005286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d10a      	bne.n	8005286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b098      	sub	sp, #96	; 0x60
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c4:	f7fc f992 	bl	80015ec <HAL_GetTick>
 80052c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d12f      	bne.n	8005338 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e0:	2200      	movs	r2, #0
 80052e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f88e 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d022      	beq.n	8005338 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005306:	653b      	str	r3, [r7, #80]	; 0x50
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
 8005312:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e6      	bne.n	80052f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e063      	b.n	8005400 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b04      	cmp	r3, #4
 8005344:	d149      	bne.n	80053da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005346:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534e:	2200      	movs	r2, #0
 8005350:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f857 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d03c      	beq.n	80053da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	623b      	str	r3, [r7, #32]
   return(result);
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537e:	633b      	str	r3, [r7, #48]	; 0x30
 8005380:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e6      	bne.n	8005360 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b2:	61fa      	str	r2, [r7, #28]
 80053b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	69b9      	ldr	r1, [r7, #24]
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	617b      	str	r3, [r7, #20]
   return(result);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e012      	b.n	8005400 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3758      	adds	r7, #88	; 0x58
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005418:	e049      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d045      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005422:	f7fc f8e3 	bl	80015ec <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <UART_WaitOnFlagUntilTimeout+0x30>
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e048      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d031      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b08      	cmp	r3, #8
 8005456:	d110      	bne.n	800547a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2208      	movs	r2, #8
 800545e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f838 	bl	80054d6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2208      	movs	r2, #8
 800546a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e029      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005488:	d111      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f81e 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e00f      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d0a6      	beq.n	800541a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b095      	sub	sp, #84	; 0x54
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fc:	643b      	str	r3, [r7, #64]	; 0x40
 80054fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3308      	adds	r3, #8
 8005516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	64bb      	str	r3, [r7, #72]	; 0x48
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005534:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800553a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e3      	bne.n	8005510 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d118      	bne.n	8005582 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	60bb      	str	r3, [r7, #8]
   return(result);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f023 0310 	bic.w	r3, r3, #16
 8005564:	647b      	str	r3, [r7, #68]	; 0x44
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6979      	ldr	r1, [r7, #20]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	613b      	str	r3, [r7, #16]
   return(result);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e6      	bne.n	8005550 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005596:	bf00      	nop
 8005598:	3754      	adds	r7, #84	; 0x54
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e027      	b.n	8005608 <HAL_UARTEx_DisableFifoMode+0x66>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2224      	movs	r2, #36	; 0x24
 80055c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005628:	2302      	movs	r3, #2
 800562a:	e02d      	b.n	8005688 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2224      	movs	r2, #36	; 0x24
 8005638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f84f 	bl	800570c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e02d      	b.n	8005704 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2224      	movs	r2, #36	; 0x24
 80056b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f811 	bl	800570c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005718:	2b00      	cmp	r3, #0
 800571a:	d108      	bne.n	800572e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800572c:	e031      	b.n	8005792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800572e:	2308      	movs	r3, #8
 8005730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005732:	2308      	movs	r3, #8
 8005734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	0e5b      	lsrs	r3, r3, #25
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	0f5b      	lsrs	r3, r3, #29
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005756:	7bbb      	ldrb	r3, [r7, #14]
 8005758:	7b3a      	ldrb	r2, [r7, #12]
 800575a:	4911      	ldr	r1, [pc, #68]	; (80057a0 <UARTEx_SetNbDataToProcess+0x94>)
 800575c:	5c8a      	ldrb	r2, [r1, r2]
 800575e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005762:	7b3a      	ldrb	r2, [r7, #12]
 8005764:	490f      	ldr	r1, [pc, #60]	; (80057a4 <UARTEx_SetNbDataToProcess+0x98>)
 8005766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005768:	fb93 f3f2 	sdiv	r3, r3, r2
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	7b7a      	ldrb	r2, [r7, #13]
 8005778:	4909      	ldr	r1, [pc, #36]	; (80057a0 <UARTEx_SetNbDataToProcess+0x94>)
 800577a:	5c8a      	ldrb	r2, [r1, r2]
 800577c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005780:	7b7a      	ldrb	r2, [r7, #13]
 8005782:	4908      	ldr	r1, [pc, #32]	; (80057a4 <UARTEx_SetNbDataToProcess+0x98>)
 8005784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005786:	fb93 f3f2 	sdiv	r3, r3, r2
 800578a:	b29a      	uxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	08006a98 	.word	0x08006a98
 80057a4:	08006aa0 	.word	0x08006aa0

080057a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b08b      	sub	sp, #44	; 0x2c
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	fa93 f3a3 	rbit	r3, r3
 80057c2:	613b      	str	r3, [r7, #16]
  return result;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80057ce:	2320      	movs	r3, #32
 80057d0:	e003      	b.n	80057da <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	fab3 f383 	clz	r3, r3
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	2103      	movs	r1, #3
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	401a      	ands	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	fa93 f3a3 	rbit	r3, r3
 80057f0:	61fb      	str	r3, [r7, #28]
  return result;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80057fc:	2320      	movs	r3, #32
 80057fe:	e003      	b.n	8005808 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	fa01 f303 	lsl.w	r3, r1, r3
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	372c      	adds	r7, #44	; 0x2c
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	43db      	mvns	r3, r3
 8005836:	401a      	ands	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	605a      	str	r2, [r3, #4]
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005852:	b480      	push	{r7}
 8005854:	b08b      	sub	sp, #44	; 0x2c
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	fa93 f3a3 	rbit	r3, r3
 800586c:	613b      	str	r3, [r7, #16]
  return result;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005878:	2320      	movs	r3, #32
 800587a:	e003      	b.n	8005884 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	fab3 f383 	clz	r3, r3
 8005882:	b2db      	uxtb	r3, r3
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	2103      	movs	r1, #3
 8005888:	fa01 f303 	lsl.w	r3, r1, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	401a      	ands	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	fa93 f3a3 	rbit	r3, r3
 800589a:	61fb      	str	r3, [r7, #28]
  return result;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80058a6:	2320      	movs	r3, #32
 80058a8:	e003      	b.n	80058b2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	fab3 f383 	clz	r3, r3
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ba:	431a      	orrs	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80058c0:	bf00      	nop
 80058c2:	372c      	adds	r7, #44	; 0x2c
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b08b      	sub	sp, #44	; 0x2c
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	fa93 f3a3 	rbit	r3, r3
 80058e6:	613b      	str	r3, [r7, #16]
  return result;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80058f2:	2320      	movs	r3, #32
 80058f4:	e003      	b.n	80058fe <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	fab3 f383 	clz	r3, r3
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	2103      	movs	r1, #3
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	401a      	ands	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	fa93 f3a3 	rbit	r3, r3
 8005914:	61fb      	str	r3, [r7, #28]
  return result;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005920:	2320      	movs	r3, #32
 8005922:	e003      	b.n	800592c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	fab3 f383 	clz	r3, r3
 800592a:	b2db      	uxtb	r3, r3
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	431a      	orrs	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	60da      	str	r2, [r3, #12]
}
 800593a:	bf00      	nop
 800593c:	372c      	adds	r7, #44	; 0x2c
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005946:	b480      	push	{r7}
 8005948:	b08b      	sub	sp, #44	; 0x2c
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1a      	ldr	r2, [r3, #32]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	fa93 f3a3 	rbit	r3, r3
 8005960:	613b      	str	r3, [r7, #16]
  return result;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800596c:	2320      	movs	r3, #32
 800596e:	e003      	b.n	8005978 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	fab3 f383 	clz	r3, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	210f      	movs	r1, #15
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	401a      	ands	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	fa93 f3a3 	rbit	r3, r3
 800598e:	61fb      	str	r3, [r7, #28]
  return result;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800599a:	2320      	movs	r3, #32
 800599c:	e003      	b.n	80059a6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	fab3 f383 	clz	r3, r3
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	fa01 f303 	lsl.w	r3, r1, r3
 80059ae:	431a      	orrs	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80059b4:	bf00      	nop
 80059b6:	372c      	adds	r7, #44	; 0x2c
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b08b      	sub	sp, #44	; 0x2c
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	fa93 f3a3 	rbit	r3, r3
 80059dc:	613b      	str	r3, [r7, #16]
  return result;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80059e8:	2320      	movs	r3, #32
 80059ea:	e003      	b.n	80059f4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	fab3 f383 	clz	r3, r3
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	210f      	movs	r1, #15
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	401a      	ands	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	fa93 f3a3 	rbit	r3, r3
 8005a0c:	61fb      	str	r3, [r7, #28]
  return result;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005a18:	2320      	movs	r3, #32
 8005a1a:	e003      	b.n	8005a24 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	fab3 f383 	clz	r3, r3
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005a32:	bf00      	nop
 8005a34:	372c      	adds	r7, #44	; 0x2c
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b088      	sub	sp, #32
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	fa93 f3a3 	rbit	r3, r3
 8005a54:	60fb      	str	r3, [r7, #12]
  return result;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <LL_GPIO_Init+0x26>
    return 32U;
 8005a60:	2320      	movs	r3, #32
 8005a62:	e003      	b.n	8005a6c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	fab3 f383 	clz	r3, r3
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005a6e:	e047      	b.n	8005b00 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	2101      	movs	r1, #1
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d039      	beq.n	8005afa <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d003      	beq.n	8005a96 <LL_GPIO_Init+0x58>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d10d      	bne.n	8005ab2 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fed7 	bl	8005852 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	69b9      	ldr	r1, [r7, #24]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff feb8 	bl	8005822 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	69b9      	ldr	r1, [r7, #24]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff ff06 	bl	80058cc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d111      	bne.n	8005aec <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2bff      	cmp	r3, #255	; 0xff
 8005acc:	d807      	bhi.n	8005ade <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	69b9      	ldr	r1, [r7, #24]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff ff35 	bl	8005946 <LL_GPIO_SetAFPin_0_7>
 8005adc:	e006      	b.n	8005aec <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	69b9      	ldr	r1, [r7, #24]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff6a 	bl	80059c0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	461a      	mov	r2, r3
 8005af2:	69b9      	ldr	r1, [r7, #24]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fe57 	bl	80057a8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3301      	adds	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1b0      	bne.n	8005a70 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b20:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005b24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	43db      	mvns	r3, r3
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4013      	ands	r3, r2
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b4e:	b084      	sub	sp, #16
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	f107 0014 	add.w	r0, r7, #20
 8005b5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	b004      	add	sp, #16
 8005b8e:	4770      	bx	lr

08005b90 <std>:
 8005b90:	2300      	movs	r3, #0
 8005b92:	b510      	push	{r4, lr}
 8005b94:	4604      	mov	r4, r0
 8005b96:	6083      	str	r3, [r0, #8]
 8005b98:	8181      	strh	r1, [r0, #12]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6643      	str	r3, [r0, #100]	; 0x64
 8005b9e:	81c2      	strh	r2, [r0, #14]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	6183      	str	r3, [r0, #24]
 8005ba4:	e9c0 3300 	strd	r3, r3, [r0]
 8005ba8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bac:	305c      	adds	r0, #92	; 0x5c
 8005bae:	f000 f8f4 	bl	8005d9a <memset>
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <std+0x38>)
 8005bb4:	6224      	str	r4, [r4, #32]
 8005bb6:	6263      	str	r3, [r4, #36]	; 0x24
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <std+0x3c>)
 8005bba:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bbc:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <std+0x40>)
 8005bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bc0:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <std+0x44>)
 8005bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08005d15 	.word	0x08005d15
 8005bcc:	08005d37 	.word	0x08005d37
 8005bd0:	08005d6f 	.word	0x08005d6f
 8005bd4:	08005d93 	.word	0x08005d93

08005bd8 <stdio_exit_handler>:
 8005bd8:	4a02      	ldr	r2, [pc, #8]	; (8005be4 <stdio_exit_handler+0xc>)
 8005bda:	4903      	ldr	r1, [pc, #12]	; (8005be8 <stdio_exit_handler+0x10>)
 8005bdc:	4803      	ldr	r0, [pc, #12]	; (8005bec <stdio_exit_handler+0x14>)
 8005bde:	f000 b869 	b.w	8005cb4 <_fwalk_sglue>
 8005be2:	bf00      	nop
 8005be4:	20000040 	.word	0x20000040
 8005be8:	08006735 	.word	0x08006735
 8005bec:	2000004c 	.word	0x2000004c

08005bf0 <cleanup_stdio>:
 8005bf0:	6841      	ldr	r1, [r0, #4]
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <cleanup_stdio+0x34>)
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	b510      	push	{r4, lr}
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	d001      	beq.n	8005c00 <cleanup_stdio+0x10>
 8005bfc:	f000 fd9a 	bl	8006734 <_fflush_r>
 8005c00:	68a1      	ldr	r1, [r4, #8]
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <cleanup_stdio+0x38>)
 8005c04:	4299      	cmp	r1, r3
 8005c06:	d002      	beq.n	8005c0e <cleanup_stdio+0x1e>
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 fd93 	bl	8006734 <_fflush_r>
 8005c0e:	68e1      	ldr	r1, [r4, #12]
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <cleanup_stdio+0x3c>)
 8005c12:	4299      	cmp	r1, r3
 8005c14:	d004      	beq.n	8005c20 <cleanup_stdio+0x30>
 8005c16:	4620      	mov	r0, r4
 8005c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1c:	f000 bd8a 	b.w	8006734 <_fflush_r>
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	bf00      	nop
 8005c24:	200004e8 	.word	0x200004e8
 8005c28:	20000550 	.word	0x20000550
 8005c2c:	200005b8 	.word	0x200005b8

08005c30 <global_stdio_init.part.0>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <global_stdio_init.part.0+0x30>)
 8005c34:	2104      	movs	r1, #4
 8005c36:	4c0b      	ldr	r4, [pc, #44]	; (8005c64 <global_stdio_init.part.0+0x34>)
 8005c38:	4a0b      	ldr	r2, [pc, #44]	; (8005c68 <global_stdio_init.part.0+0x38>)
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f7ff ffa6 	bl	8005b90 <std>
 8005c44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c48:	2201      	movs	r2, #1
 8005c4a:	2109      	movs	r1, #9
 8005c4c:	f7ff ffa0 	bl	8005b90 <std>
 8005c50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c54:	2202      	movs	r2, #2
 8005c56:	2112      	movs	r1, #18
 8005c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c5c:	f7ff bf98 	b.w	8005b90 <std>
 8005c60:	20000620 	.word	0x20000620
 8005c64:	200004e8 	.word	0x200004e8
 8005c68:	08005bd9 	.word	0x08005bd9

08005c6c <__sfp_lock_acquire>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__sfp_lock_acquire+0x8>)
 8005c6e:	f000 b90d 	b.w	8005e8c <__retarget_lock_acquire_recursive>
 8005c72:	bf00      	nop
 8005c74:	20000629 	.word	0x20000629

08005c78 <__sfp_lock_release>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__sfp_lock_release+0x8>)
 8005c7a:	f000 b908 	b.w	8005e8e <__retarget_lock_release_recursive>
 8005c7e:	bf00      	nop
 8005c80:	20000629 	.word	0x20000629

08005c84 <__sinit>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	4604      	mov	r4, r0
 8005c88:	f7ff fff0 	bl	8005c6c <__sfp_lock_acquire>
 8005c8c:	6a23      	ldr	r3, [r4, #32]
 8005c8e:	b11b      	cbz	r3, 8005c98 <__sinit+0x14>
 8005c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c94:	f7ff bff0 	b.w	8005c78 <__sfp_lock_release>
 8005c98:	4b04      	ldr	r3, [pc, #16]	; (8005cac <__sinit+0x28>)
 8005c9a:	6223      	str	r3, [r4, #32]
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <__sinit+0x2c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f5      	bne.n	8005c90 <__sinit+0xc>
 8005ca4:	f7ff ffc4 	bl	8005c30 <global_stdio_init.part.0>
 8005ca8:	e7f2      	b.n	8005c90 <__sinit+0xc>
 8005caa:	bf00      	nop
 8005cac:	08005bf1 	.word	0x08005bf1
 8005cb0:	20000620 	.word	0x20000620

08005cb4 <_fwalk_sglue>:
 8005cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb8:	4607      	mov	r7, r0
 8005cba:	4688      	mov	r8, r1
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	2600      	movs	r6, #0
 8005cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8005cc8:	d505      	bpl.n	8005cd6 <_fwalk_sglue+0x22>
 8005cca:	6824      	ldr	r4, [r4, #0]
 8005ccc:	2c00      	cmp	r4, #0
 8005cce:	d1f7      	bne.n	8005cc0 <_fwalk_sglue+0xc>
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d907      	bls.n	8005cec <_fwalk_sglue+0x38>
 8005cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	d003      	beq.n	8005cec <_fwalk_sglue+0x38>
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	47c0      	blx	r8
 8005cea:	4306      	orrs	r6, r0
 8005cec:	3568      	adds	r5, #104	; 0x68
 8005cee:	e7e9      	b.n	8005cc4 <_fwalk_sglue+0x10>

08005cf0 <iprintf>:
 8005cf0:	b40f      	push	{r0, r1, r2, r3}
 8005cf2:	b507      	push	{r0, r1, r2, lr}
 8005cf4:	4906      	ldr	r1, [pc, #24]	; (8005d10 <iprintf+0x20>)
 8005cf6:	ab04      	add	r3, sp, #16
 8005cf8:	6808      	ldr	r0, [r1, #0]
 8005cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cfe:	6881      	ldr	r1, [r0, #8]
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	f000 f9e7 	bl	80060d4 <_vfiprintf_r>
 8005d06:	b003      	add	sp, #12
 8005d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d0c:	b004      	add	sp, #16
 8005d0e:	4770      	bx	lr
 8005d10:	20000098 	.word	0x20000098

08005d14 <__sread>:
 8005d14:	b510      	push	{r4, lr}
 8005d16:	460c      	mov	r4, r1
 8005d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d1c:	f000 f868 	bl	8005df0 <_read_r>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	bfab      	itete	ge
 8005d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d26:	89a3      	ldrhlt	r3, [r4, #12]
 8005d28:	181b      	addge	r3, r3, r0
 8005d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d2e:	bfac      	ite	ge
 8005d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d32:	81a3      	strhlt	r3, [r4, #12]
 8005d34:	bd10      	pop	{r4, pc}

08005d36 <__swrite>:
 8005d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3a:	461f      	mov	r7, r3
 8005d3c:	898b      	ldrh	r3, [r1, #12]
 8005d3e:	4605      	mov	r5, r0
 8005d40:	460c      	mov	r4, r1
 8005d42:	05db      	lsls	r3, r3, #23
 8005d44:	4616      	mov	r6, r2
 8005d46:	d505      	bpl.n	8005d54 <__swrite+0x1e>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	f000 f83c 	bl	8005dcc <_lseek_r>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	4632      	mov	r2, r6
 8005d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	463b      	mov	r3, r7
 8005d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6a:	f000 b853 	b.w	8005e14 <_write_r>

08005d6e <__sseek>:
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	460c      	mov	r4, r1
 8005d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d76:	f000 f829 	bl	8005dcc <_lseek_r>
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	bf15      	itete	ne
 8005d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d8a:	81a3      	strheq	r3, [r4, #12]
 8005d8c:	bf18      	it	ne
 8005d8e:	81a3      	strhne	r3, [r4, #12]
 8005d90:	bd10      	pop	{r4, pc}

08005d92 <__sclose>:
 8005d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d96:	f000 b809 	b.w	8005dac <_close_r>

08005d9a <memset>:
 8005d9a:	4402      	add	r2, r0
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d100      	bne.n	8005da4 <memset+0xa>
 8005da2:	4770      	bx	lr
 8005da4:	f803 1b01 	strb.w	r1, [r3], #1
 8005da8:	e7f9      	b.n	8005d9e <memset+0x4>
	...

08005dac <_close_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	2300      	movs	r3, #0
 8005db0:	4d05      	ldr	r5, [pc, #20]	; (8005dc8 <_close_r+0x1c>)
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fb fa59 	bl	800126e <_close>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_close_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_close_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20000624 	.word	0x20000624

08005dcc <_lseek_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4604      	mov	r4, r0
 8005dd0:	4d06      	ldr	r5, [pc, #24]	; (8005dec <_lseek_r+0x20>)
 8005dd2:	4608      	mov	r0, r1
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	602a      	str	r2, [r5, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f7fb fa6e 	bl	80012bc <_lseek>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_lseek_r+0x1e>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_lseek_r+0x1e>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	20000624 	.word	0x20000624

08005df0 <_read_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4604      	mov	r4, r0
 8005df4:	4d06      	ldr	r5, [pc, #24]	; (8005e10 <_read_r+0x20>)
 8005df6:	4608      	mov	r0, r1
 8005df8:	4611      	mov	r1, r2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f7fb fa18 	bl	8001234 <_read>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d102      	bne.n	8005e0e <_read_r+0x1e>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b103      	cbz	r3, 8005e0e <_read_r+0x1e>
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	20000624 	.word	0x20000624

08005e14 <_write_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4604      	mov	r4, r0
 8005e18:	4d06      	ldr	r5, [pc, #24]	; (8005e34 <_write_r+0x20>)
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	602a      	str	r2, [r5, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f7fa feda 	bl	8000bdc <_write>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_write_r+0x1e>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_write_r+0x1e>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000624 	.word	0x20000624

08005e38 <__errno>:
 8005e38:	4b01      	ldr	r3, [pc, #4]	; (8005e40 <__errno+0x8>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20000098 	.word	0x20000098

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4d0d      	ldr	r5, [pc, #52]	; (8005e7c <__libc_init_array+0x38>)
 8005e48:	2600      	movs	r6, #0
 8005e4a:	4c0d      	ldr	r4, [pc, #52]	; (8005e80 <__libc_init_array+0x3c>)
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4d0b      	ldr	r5, [pc, #44]	; (8005e84 <__libc_init_array+0x40>)
 8005e56:	2600      	movs	r6, #0
 8005e58:	4c0b      	ldr	r4, [pc, #44]	; (8005e88 <__libc_init_array+0x44>)
 8005e5a:	f000 fdcb 	bl	80069f4 <_init>
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	3601      	adds	r6, #1
 8005e6e:	4798      	blx	r3
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	3601      	adds	r6, #1
 8005e78:	4798      	blx	r3
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08006ae4 	.word	0x08006ae4
 8005e80:	08006ae4 	.word	0x08006ae4
 8005e84:	08006ae4 	.word	0x08006ae4
 8005e88:	08006ae8 	.word	0x08006ae8

08005e8c <__retarget_lock_acquire_recursive>:
 8005e8c:	4770      	bx	lr

08005e8e <__retarget_lock_release_recursive>:
 8005e8e:	4770      	bx	lr

08005e90 <_free_r>:
 8005e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e92:	2900      	cmp	r1, #0
 8005e94:	d043      	beq.n	8005f1e <_free_r+0x8e>
 8005e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9a:	1f0c      	subs	r4, r1, #4
 8005e9c:	9001      	str	r0, [sp, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfb8      	it	lt
 8005ea2:	18e4      	addlt	r4, r4, r3
 8005ea4:	f000 f8e0 	bl	8006068 <__malloc_lock>
 8005ea8:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <_free_r+0x94>)
 8005eaa:	9801      	ldr	r0, [sp, #4]
 8005eac:	6813      	ldr	r3, [r2, #0]
 8005eae:	b933      	cbnz	r3, 8005ebe <_free_r+0x2e>
 8005eb0:	6063      	str	r3, [r4, #4]
 8005eb2:	6014      	str	r4, [r2, #0]
 8005eb4:	b003      	add	sp, #12
 8005eb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005eba:	f000 b8db 	b.w	8006074 <__malloc_unlock>
 8005ebe:	42a3      	cmp	r3, r4
 8005ec0:	d908      	bls.n	8005ed4 <_free_r+0x44>
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	1961      	adds	r1, r4, r5
 8005ec6:	428b      	cmp	r3, r1
 8005ec8:	bf01      	itttt	eq
 8005eca:	6819      	ldreq	r1, [r3, #0]
 8005ecc:	685b      	ldreq	r3, [r3, #4]
 8005ece:	1949      	addeq	r1, r1, r5
 8005ed0:	6021      	streq	r1, [r4, #0]
 8005ed2:	e7ed      	b.n	8005eb0 <_free_r+0x20>
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	b10b      	cbz	r3, 8005ede <_free_r+0x4e>
 8005eda:	42a3      	cmp	r3, r4
 8005edc:	d9fa      	bls.n	8005ed4 <_free_r+0x44>
 8005ede:	6811      	ldr	r1, [r2, #0]
 8005ee0:	1855      	adds	r5, r2, r1
 8005ee2:	42a5      	cmp	r5, r4
 8005ee4:	d10b      	bne.n	8005efe <_free_r+0x6e>
 8005ee6:	6824      	ldr	r4, [r4, #0]
 8005ee8:	4421      	add	r1, r4
 8005eea:	1854      	adds	r4, r2, r1
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	42a3      	cmp	r3, r4
 8005ef0:	d1e0      	bne.n	8005eb4 <_free_r+0x24>
 8005ef2:	681c      	ldr	r4, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	440c      	add	r4, r1
 8005ef8:	6053      	str	r3, [r2, #4]
 8005efa:	6014      	str	r4, [r2, #0]
 8005efc:	e7da      	b.n	8005eb4 <_free_r+0x24>
 8005efe:	d902      	bls.n	8005f06 <_free_r+0x76>
 8005f00:	230c      	movs	r3, #12
 8005f02:	6003      	str	r3, [r0, #0]
 8005f04:	e7d6      	b.n	8005eb4 <_free_r+0x24>
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	1961      	adds	r1, r4, r5
 8005f0a:	428b      	cmp	r3, r1
 8005f0c:	bf02      	ittt	eq
 8005f0e:	6819      	ldreq	r1, [r3, #0]
 8005f10:	685b      	ldreq	r3, [r3, #4]
 8005f12:	1949      	addeq	r1, r1, r5
 8005f14:	6063      	str	r3, [r4, #4]
 8005f16:	bf08      	it	eq
 8005f18:	6021      	streq	r1, [r4, #0]
 8005f1a:	6054      	str	r4, [r2, #4]
 8005f1c:	e7ca      	b.n	8005eb4 <_free_r+0x24>
 8005f1e:	b003      	add	sp, #12
 8005f20:	bd30      	pop	{r4, r5, pc}
 8005f22:	bf00      	nop
 8005f24:	2000062c 	.word	0x2000062c

08005f28 <sbrk_aligned>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4e0e      	ldr	r6, [pc, #56]	; (8005f64 <sbrk_aligned+0x3c>)
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	4605      	mov	r5, r0
 8005f30:	6831      	ldr	r1, [r6, #0]
 8005f32:	b911      	cbnz	r1, 8005f3a <sbrk_aligned+0x12>
 8005f34:	f000 fcbc 	bl	80068b0 <_sbrk_r>
 8005f38:	6030      	str	r0, [r6, #0]
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 fcb7 	bl	80068b0 <_sbrk_r>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d00a      	beq.n	8005f5c <sbrk_aligned+0x34>
 8005f46:	1cc4      	adds	r4, r0, #3
 8005f48:	f024 0403 	bic.w	r4, r4, #3
 8005f4c:	42a0      	cmp	r0, r4
 8005f4e:	d007      	beq.n	8005f60 <sbrk_aligned+0x38>
 8005f50:	1a21      	subs	r1, r4, r0
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 fcac 	bl	80068b0 <_sbrk_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d101      	bne.n	8005f60 <sbrk_aligned+0x38>
 8005f5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f60:	4620      	mov	r0, r4
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	20000630 	.word	0x20000630

08005f68 <_malloc_r>:
 8005f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	1ccd      	adds	r5, r1, #3
 8005f6e:	4607      	mov	r7, r0
 8005f70:	f025 0503 	bic.w	r5, r5, #3
 8005f74:	3508      	adds	r5, #8
 8005f76:	2d0c      	cmp	r5, #12
 8005f78:	bf38      	it	cc
 8005f7a:	250c      	movcc	r5, #12
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	db01      	blt.n	8005f84 <_malloc_r+0x1c>
 8005f80:	42a9      	cmp	r1, r5
 8005f82:	d905      	bls.n	8005f90 <_malloc_r+0x28>
 8005f84:	230c      	movs	r3, #12
 8005f86:	2600      	movs	r6, #0
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006064 <_malloc_r+0xfc>
 8005f94:	f000 f868 	bl	8006068 <__malloc_lock>
 8005f98:	f8d8 3000 	ldr.w	r3, [r8]
 8005f9c:	461c      	mov	r4, r3
 8005f9e:	bb5c      	cbnz	r4, 8005ff8 <_malloc_r+0x90>
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	f7ff ffc0 	bl	8005f28 <sbrk_aligned>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	4604      	mov	r4, r0
 8005fac:	d155      	bne.n	800605a <_malloc_r+0xf2>
 8005fae:	f8d8 4000 	ldr.w	r4, [r8]
 8005fb2:	4626      	mov	r6, r4
 8005fb4:	2e00      	cmp	r6, #0
 8005fb6:	d145      	bne.n	8006044 <_malloc_r+0xdc>
 8005fb8:	2c00      	cmp	r4, #0
 8005fba:	d048      	beq.n	800604e <_malloc_r+0xe6>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	eb04 0903 	add.w	r9, r4, r3
 8005fc6:	f000 fc73 	bl	80068b0 <_sbrk_r>
 8005fca:	4581      	cmp	r9, r0
 8005fcc:	d13f      	bne.n	800604e <_malloc_r+0xe6>
 8005fce:	6821      	ldr	r1, [r4, #0]
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	1a6d      	subs	r5, r5, r1
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	f7ff ffa7 	bl	8005f28 <sbrk_aligned>
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d037      	beq.n	800604e <_malloc_r+0xe6>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	442b      	add	r3, r5
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d038      	beq.n	800605e <_malloc_r+0xf6>
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	42a2      	cmp	r2, r4
 8005ff0:	d12b      	bne.n	800604a <_malloc_r+0xe2>
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	e00f      	b.n	8006018 <_malloc_r+0xb0>
 8005ff8:	6822      	ldr	r2, [r4, #0]
 8005ffa:	1b52      	subs	r2, r2, r5
 8005ffc:	d41f      	bmi.n	800603e <_malloc_r+0xd6>
 8005ffe:	2a0b      	cmp	r2, #11
 8006000:	d917      	bls.n	8006032 <_malloc_r+0xca>
 8006002:	1961      	adds	r1, r4, r5
 8006004:	42a3      	cmp	r3, r4
 8006006:	6025      	str	r5, [r4, #0]
 8006008:	bf18      	it	ne
 800600a:	6059      	strne	r1, [r3, #4]
 800600c:	6863      	ldr	r3, [r4, #4]
 800600e:	bf08      	it	eq
 8006010:	f8c8 1000 	streq.w	r1, [r8]
 8006014:	5162      	str	r2, [r4, r5]
 8006016:	604b      	str	r3, [r1, #4]
 8006018:	f104 060b 	add.w	r6, r4, #11
 800601c:	4638      	mov	r0, r7
 800601e:	f000 f829 	bl	8006074 <__malloc_unlock>
 8006022:	1d23      	adds	r3, r4, #4
 8006024:	f026 0607 	bic.w	r6, r6, #7
 8006028:	1af2      	subs	r2, r6, r3
 800602a:	d0ae      	beq.n	8005f8a <_malloc_r+0x22>
 800602c:	1b9b      	subs	r3, r3, r6
 800602e:	50a3      	str	r3, [r4, r2]
 8006030:	e7ab      	b.n	8005f8a <_malloc_r+0x22>
 8006032:	42a3      	cmp	r3, r4
 8006034:	6862      	ldr	r2, [r4, #4]
 8006036:	d1dd      	bne.n	8005ff4 <_malloc_r+0x8c>
 8006038:	f8c8 2000 	str.w	r2, [r8]
 800603c:	e7ec      	b.n	8006018 <_malloc_r+0xb0>
 800603e:	4623      	mov	r3, r4
 8006040:	6864      	ldr	r4, [r4, #4]
 8006042:	e7ac      	b.n	8005f9e <_malloc_r+0x36>
 8006044:	4634      	mov	r4, r6
 8006046:	6876      	ldr	r6, [r6, #4]
 8006048:	e7b4      	b.n	8005fb4 <_malloc_r+0x4c>
 800604a:	4613      	mov	r3, r2
 800604c:	e7cc      	b.n	8005fe8 <_malloc_r+0x80>
 800604e:	230c      	movs	r3, #12
 8006050:	4638      	mov	r0, r7
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	f000 f80e 	bl	8006074 <__malloc_unlock>
 8006058:	e797      	b.n	8005f8a <_malloc_r+0x22>
 800605a:	6025      	str	r5, [r4, #0]
 800605c:	e7dc      	b.n	8006018 <_malloc_r+0xb0>
 800605e:	605b      	str	r3, [r3, #4]
 8006060:	deff      	udf	#255	; 0xff
 8006062:	bf00      	nop
 8006064:	2000062c 	.word	0x2000062c

08006068 <__malloc_lock>:
 8006068:	4801      	ldr	r0, [pc, #4]	; (8006070 <__malloc_lock+0x8>)
 800606a:	f7ff bf0f 	b.w	8005e8c <__retarget_lock_acquire_recursive>
 800606e:	bf00      	nop
 8006070:	20000628 	.word	0x20000628

08006074 <__malloc_unlock>:
 8006074:	4801      	ldr	r0, [pc, #4]	; (800607c <__malloc_unlock+0x8>)
 8006076:	f7ff bf0a 	b.w	8005e8e <__retarget_lock_release_recursive>
 800607a:	bf00      	nop
 800607c:	20000628 	.word	0x20000628

08006080 <__sfputc_r>:
 8006080:	6893      	ldr	r3, [r2, #8]
 8006082:	3b01      	subs	r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	6093      	str	r3, [r2, #8]
 8006088:	b410      	push	{r4}
 800608a:	da08      	bge.n	800609e <__sfputc_r+0x1e>
 800608c:	6994      	ldr	r4, [r2, #24]
 800608e:	42a3      	cmp	r3, r4
 8006090:	db01      	blt.n	8006096 <__sfputc_r+0x16>
 8006092:	290a      	cmp	r1, #10
 8006094:	d103      	bne.n	800609e <__sfputc_r+0x1e>
 8006096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800609a:	f000 bb73 	b.w	8006784 <__swbuf_r>
 800609e:	6813      	ldr	r3, [r2, #0]
 80060a0:	1c58      	adds	r0, r3, #1
 80060a2:	6010      	str	r0, [r2, #0]
 80060a4:	4608      	mov	r0, r1
 80060a6:	7019      	strb	r1, [r3, #0]
 80060a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <__sfputs_r>:
 80060ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b0:	4606      	mov	r6, r0
 80060b2:	460f      	mov	r7, r1
 80060b4:	4614      	mov	r4, r2
 80060b6:	18d5      	adds	r5, r2, r3
 80060b8:	42ac      	cmp	r4, r5
 80060ba:	d101      	bne.n	80060c0 <__sfputs_r+0x12>
 80060bc:	2000      	movs	r0, #0
 80060be:	e007      	b.n	80060d0 <__sfputs_r+0x22>
 80060c0:	463a      	mov	r2, r7
 80060c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c6:	4630      	mov	r0, r6
 80060c8:	f7ff ffda 	bl	8006080 <__sfputc_r>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d1f3      	bne.n	80060b8 <__sfputs_r+0xa>
 80060d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060d4 <_vfiprintf_r>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	460d      	mov	r5, r1
 80060da:	b09d      	sub	sp, #116	; 0x74
 80060dc:	4614      	mov	r4, r2
 80060de:	4698      	mov	r8, r3
 80060e0:	4606      	mov	r6, r0
 80060e2:	b118      	cbz	r0, 80060ec <_vfiprintf_r+0x18>
 80060e4:	6a03      	ldr	r3, [r0, #32]
 80060e6:	b90b      	cbnz	r3, 80060ec <_vfiprintf_r+0x18>
 80060e8:	f7ff fdcc 	bl	8005c84 <__sinit>
 80060ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060ee:	07d9      	lsls	r1, r3, #31
 80060f0:	d405      	bmi.n	80060fe <_vfiprintf_r+0x2a>
 80060f2:	89ab      	ldrh	r3, [r5, #12]
 80060f4:	059a      	lsls	r2, r3, #22
 80060f6:	d402      	bmi.n	80060fe <_vfiprintf_r+0x2a>
 80060f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060fa:	f7ff fec7 	bl	8005e8c <__retarget_lock_acquire_recursive>
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	071b      	lsls	r3, r3, #28
 8006102:	d501      	bpl.n	8006108 <_vfiprintf_r+0x34>
 8006104:	692b      	ldr	r3, [r5, #16]
 8006106:	b99b      	cbnz	r3, 8006130 <_vfiprintf_r+0x5c>
 8006108:	4629      	mov	r1, r5
 800610a:	4630      	mov	r0, r6
 800610c:	f000 fb78 	bl	8006800 <__swsetup_r>
 8006110:	b170      	cbz	r0, 8006130 <_vfiprintf_r+0x5c>
 8006112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006114:	07dc      	lsls	r4, r3, #31
 8006116:	d504      	bpl.n	8006122 <_vfiprintf_r+0x4e>
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	b01d      	add	sp, #116	; 0x74
 800611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006122:	89ab      	ldrh	r3, [r5, #12]
 8006124:	0598      	lsls	r0, r3, #22
 8006126:	d4f7      	bmi.n	8006118 <_vfiprintf_r+0x44>
 8006128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800612a:	f7ff feb0 	bl	8005e8e <__retarget_lock_release_recursive>
 800612e:	e7f3      	b.n	8006118 <_vfiprintf_r+0x44>
 8006130:	2300      	movs	r3, #0
 8006132:	f8cd 800c 	str.w	r8, [sp, #12]
 8006136:	f04f 0901 	mov.w	r9, #1
 800613a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80062f4 <_vfiprintf_r+0x220>
 800613e:	9309      	str	r3, [sp, #36]	; 0x24
 8006140:	2320      	movs	r3, #32
 8006142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006146:	2330      	movs	r3, #48	; 0x30
 8006148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800614c:	4623      	mov	r3, r4
 800614e:	469a      	mov	sl, r3
 8006150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006154:	b10a      	cbz	r2, 800615a <_vfiprintf_r+0x86>
 8006156:	2a25      	cmp	r2, #37	; 0x25
 8006158:	d1f9      	bne.n	800614e <_vfiprintf_r+0x7a>
 800615a:	ebba 0b04 	subs.w	fp, sl, r4
 800615e:	d00b      	beq.n	8006178 <_vfiprintf_r+0xa4>
 8006160:	465b      	mov	r3, fp
 8006162:	4622      	mov	r2, r4
 8006164:	4629      	mov	r1, r5
 8006166:	4630      	mov	r0, r6
 8006168:	f7ff ffa1 	bl	80060ae <__sfputs_r>
 800616c:	3001      	adds	r0, #1
 800616e:	f000 80a9 	beq.w	80062c4 <_vfiprintf_r+0x1f0>
 8006172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006174:	445a      	add	r2, fp
 8006176:	9209      	str	r2, [sp, #36]	; 0x24
 8006178:	f89a 3000 	ldrb.w	r3, [sl]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80a1 	beq.w	80062c4 <_vfiprintf_r+0x1f0>
 8006182:	2300      	movs	r3, #0
 8006184:	f04f 32ff 	mov.w	r2, #4294967295
 8006188:	f10a 0a01 	add.w	sl, sl, #1
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006194:	931a      	str	r3, [sp, #104]	; 0x68
 8006196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800619a:	4654      	mov	r4, sl
 800619c:	2205      	movs	r2, #5
 800619e:	4855      	ldr	r0, [pc, #340]	; (80062f4 <_vfiprintf_r+0x220>)
 80061a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a4:	f000 fb94 	bl	80068d0 <memchr>
 80061a8:	9a04      	ldr	r2, [sp, #16]
 80061aa:	b9d8      	cbnz	r0, 80061e4 <_vfiprintf_r+0x110>
 80061ac:	06d1      	lsls	r1, r2, #27
 80061ae:	bf44      	itt	mi
 80061b0:	2320      	movmi	r3, #32
 80061b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061b6:	0713      	lsls	r3, r2, #28
 80061b8:	bf44      	itt	mi
 80061ba:	232b      	movmi	r3, #43	; 0x2b
 80061bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061c0:	f89a 3000 	ldrb.w	r3, [sl]
 80061c4:	2b2a      	cmp	r3, #42	; 0x2a
 80061c6:	d015      	beq.n	80061f4 <_vfiprintf_r+0x120>
 80061c8:	9a07      	ldr	r2, [sp, #28]
 80061ca:	4654      	mov	r4, sl
 80061cc:	2000      	movs	r0, #0
 80061ce:	f04f 0c0a 	mov.w	ip, #10
 80061d2:	4621      	mov	r1, r4
 80061d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061d8:	3b30      	subs	r3, #48	; 0x30
 80061da:	2b09      	cmp	r3, #9
 80061dc:	d94d      	bls.n	800627a <_vfiprintf_r+0x1a6>
 80061de:	b1b0      	cbz	r0, 800620e <_vfiprintf_r+0x13a>
 80061e0:	9207      	str	r2, [sp, #28]
 80061e2:	e014      	b.n	800620e <_vfiprintf_r+0x13a>
 80061e4:	eba0 0308 	sub.w	r3, r0, r8
 80061e8:	46a2      	mov	sl, r4
 80061ea:	fa09 f303 	lsl.w	r3, r9, r3
 80061ee:	4313      	orrs	r3, r2
 80061f0:	9304      	str	r3, [sp, #16]
 80061f2:	e7d2      	b.n	800619a <_vfiprintf_r+0xc6>
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	1d19      	adds	r1, r3, #4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	9103      	str	r1, [sp, #12]
 80061fe:	bfbb      	ittet	lt
 8006200:	425b      	neglt	r3, r3
 8006202:	f042 0202 	orrlt.w	r2, r2, #2
 8006206:	9307      	strge	r3, [sp, #28]
 8006208:	9307      	strlt	r3, [sp, #28]
 800620a:	bfb8      	it	lt
 800620c:	9204      	strlt	r2, [sp, #16]
 800620e:	7823      	ldrb	r3, [r4, #0]
 8006210:	2b2e      	cmp	r3, #46	; 0x2e
 8006212:	d10c      	bne.n	800622e <_vfiprintf_r+0x15a>
 8006214:	7863      	ldrb	r3, [r4, #1]
 8006216:	2b2a      	cmp	r3, #42	; 0x2a
 8006218:	d134      	bne.n	8006284 <_vfiprintf_r+0x1b0>
 800621a:	9b03      	ldr	r3, [sp, #12]
 800621c:	3402      	adds	r4, #2
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	9203      	str	r2, [sp, #12]
 8006226:	bfb8      	it	lt
 8006228:	f04f 33ff 	movlt.w	r3, #4294967295
 800622c:	9305      	str	r3, [sp, #20]
 800622e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006304 <_vfiprintf_r+0x230>
 8006232:	2203      	movs	r2, #3
 8006234:	7821      	ldrb	r1, [r4, #0]
 8006236:	4650      	mov	r0, sl
 8006238:	f000 fb4a 	bl	80068d0 <memchr>
 800623c:	b138      	cbz	r0, 800624e <_vfiprintf_r+0x17a>
 800623e:	eba0 000a 	sub.w	r0, r0, sl
 8006242:	2240      	movs	r2, #64	; 0x40
 8006244:	9b04      	ldr	r3, [sp, #16]
 8006246:	3401      	adds	r4, #1
 8006248:	4082      	lsls	r2, r0
 800624a:	4313      	orrs	r3, r2
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006252:	2206      	movs	r2, #6
 8006254:	4828      	ldr	r0, [pc, #160]	; (80062f8 <_vfiprintf_r+0x224>)
 8006256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800625a:	f000 fb39 	bl	80068d0 <memchr>
 800625e:	2800      	cmp	r0, #0
 8006260:	d03f      	beq.n	80062e2 <_vfiprintf_r+0x20e>
 8006262:	4b26      	ldr	r3, [pc, #152]	; (80062fc <_vfiprintf_r+0x228>)
 8006264:	bb1b      	cbnz	r3, 80062ae <_vfiprintf_r+0x1da>
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	3307      	adds	r3, #7
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	3308      	adds	r3, #8
 8006270:	9303      	str	r3, [sp, #12]
 8006272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006274:	443b      	add	r3, r7
 8006276:	9309      	str	r3, [sp, #36]	; 0x24
 8006278:	e768      	b.n	800614c <_vfiprintf_r+0x78>
 800627a:	fb0c 3202 	mla	r2, ip, r2, r3
 800627e:	460c      	mov	r4, r1
 8006280:	2001      	movs	r0, #1
 8006282:	e7a6      	b.n	80061d2 <_vfiprintf_r+0xfe>
 8006284:	2300      	movs	r3, #0
 8006286:	3401      	adds	r4, #1
 8006288:	f04f 0c0a 	mov.w	ip, #10
 800628c:	4619      	mov	r1, r3
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	4620      	mov	r0, r4
 8006292:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006296:	3a30      	subs	r2, #48	; 0x30
 8006298:	2a09      	cmp	r2, #9
 800629a:	d903      	bls.n	80062a4 <_vfiprintf_r+0x1d0>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0c6      	beq.n	800622e <_vfiprintf_r+0x15a>
 80062a0:	9105      	str	r1, [sp, #20]
 80062a2:	e7c4      	b.n	800622e <_vfiprintf_r+0x15a>
 80062a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80062a8:	4604      	mov	r4, r0
 80062aa:	2301      	movs	r3, #1
 80062ac:	e7f0      	b.n	8006290 <_vfiprintf_r+0x1bc>
 80062ae:	ab03      	add	r3, sp, #12
 80062b0:	462a      	mov	r2, r5
 80062b2:	a904      	add	r1, sp, #16
 80062b4:	4630      	mov	r0, r6
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	4b11      	ldr	r3, [pc, #68]	; (8006300 <_vfiprintf_r+0x22c>)
 80062ba:	f3af 8000 	nop.w
 80062be:	4607      	mov	r7, r0
 80062c0:	1c78      	adds	r0, r7, #1
 80062c2:	d1d6      	bne.n	8006272 <_vfiprintf_r+0x19e>
 80062c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062c6:	07d9      	lsls	r1, r3, #31
 80062c8:	d405      	bmi.n	80062d6 <_vfiprintf_r+0x202>
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	059a      	lsls	r2, r3, #22
 80062ce:	d402      	bmi.n	80062d6 <_vfiprintf_r+0x202>
 80062d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062d2:	f7ff fddc 	bl	8005e8e <__retarget_lock_release_recursive>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	065b      	lsls	r3, r3, #25
 80062da:	f53f af1d 	bmi.w	8006118 <_vfiprintf_r+0x44>
 80062de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062e0:	e71c      	b.n	800611c <_vfiprintf_r+0x48>
 80062e2:	ab03      	add	r3, sp, #12
 80062e4:	462a      	mov	r2, r5
 80062e6:	a904      	add	r1, sp, #16
 80062e8:	4630      	mov	r0, r6
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4b04      	ldr	r3, [pc, #16]	; (8006300 <_vfiprintf_r+0x22c>)
 80062ee:	f000 f87d 	bl	80063ec <_printf_i>
 80062f2:	e7e4      	b.n	80062be <_vfiprintf_r+0x1ea>
 80062f4:	08006aa8 	.word	0x08006aa8
 80062f8:	08006ab2 	.word	0x08006ab2
 80062fc:	00000000 	.word	0x00000000
 8006300:	080060af 	.word	0x080060af
 8006304:	08006aae 	.word	0x08006aae

08006308 <_printf_common>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	4616      	mov	r6, r2
 800630e:	4699      	mov	r9, r3
 8006310:	688a      	ldr	r2, [r1, #8]
 8006312:	4607      	mov	r7, r0
 8006314:	690b      	ldr	r3, [r1, #16]
 8006316:	460c      	mov	r4, r1
 8006318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800631c:	4293      	cmp	r3, r2
 800631e:	bfb8      	it	lt
 8006320:	4613      	movlt	r3, r2
 8006322:	6033      	str	r3, [r6, #0]
 8006324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006328:	b10a      	cbz	r2, 800632e <_printf_common+0x26>
 800632a:	3301      	adds	r3, #1
 800632c:	6033      	str	r3, [r6, #0]
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	0699      	lsls	r1, r3, #26
 8006332:	bf42      	ittt	mi
 8006334:	6833      	ldrmi	r3, [r6, #0]
 8006336:	3302      	addmi	r3, #2
 8006338:	6033      	strmi	r3, [r6, #0]
 800633a:	6825      	ldr	r5, [r4, #0]
 800633c:	f015 0506 	ands.w	r5, r5, #6
 8006340:	d106      	bne.n	8006350 <_printf_common+0x48>
 8006342:	f104 0a19 	add.w	sl, r4, #25
 8006346:	68e3      	ldr	r3, [r4, #12]
 8006348:	6832      	ldr	r2, [r6, #0]
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	42ab      	cmp	r3, r5
 800634e:	dc2b      	bgt.n	80063a8 <_printf_common+0xa0>
 8006350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006354:	1e13      	subs	r3, r2, #0
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	bf18      	it	ne
 800635a:	2301      	movne	r3, #1
 800635c:	0692      	lsls	r2, r2, #26
 800635e:	d430      	bmi.n	80063c2 <_printf_common+0xba>
 8006360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006364:	4649      	mov	r1, r9
 8006366:	4638      	mov	r0, r7
 8006368:	47c0      	blx	r8
 800636a:	3001      	adds	r0, #1
 800636c:	d023      	beq.n	80063b6 <_printf_common+0xae>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	341a      	adds	r4, #26
 8006372:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8006376:	f003 0306 	and.w	r3, r3, #6
 800637a:	2b04      	cmp	r3, #4
 800637c:	bf0a      	itet	eq
 800637e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8006382:	2500      	movne	r5, #0
 8006384:	6833      	ldreq	r3, [r6, #0]
 8006386:	f04f 0600 	mov.w	r6, #0
 800638a:	bf08      	it	eq
 800638c:	1aed      	subeq	r5, r5, r3
 800638e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006392:	bf08      	it	eq
 8006394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006398:	4293      	cmp	r3, r2
 800639a:	bfc4      	itt	gt
 800639c:	1a9b      	subgt	r3, r3, r2
 800639e:	18ed      	addgt	r5, r5, r3
 80063a0:	42b5      	cmp	r5, r6
 80063a2:	d11a      	bne.n	80063da <_printf_common+0xd2>
 80063a4:	2000      	movs	r0, #0
 80063a6:	e008      	b.n	80063ba <_printf_common+0xb2>
 80063a8:	2301      	movs	r3, #1
 80063aa:	4652      	mov	r2, sl
 80063ac:	4649      	mov	r1, r9
 80063ae:	4638      	mov	r0, r7
 80063b0:	47c0      	blx	r8
 80063b2:	3001      	adds	r0, #1
 80063b4:	d103      	bne.n	80063be <_printf_common+0xb6>
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063be:	3501      	adds	r5, #1
 80063c0:	e7c1      	b.n	8006346 <_printf_common+0x3e>
 80063c2:	18e1      	adds	r1, r4, r3
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	2030      	movs	r0, #48	; 0x30
 80063c8:	3302      	adds	r3, #2
 80063ca:	4422      	add	r2, r4
 80063cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063d8:	e7c2      	b.n	8006360 <_printf_common+0x58>
 80063da:	2301      	movs	r3, #1
 80063dc:	4622      	mov	r2, r4
 80063de:	4649      	mov	r1, r9
 80063e0:	4638      	mov	r0, r7
 80063e2:	47c0      	blx	r8
 80063e4:	3001      	adds	r0, #1
 80063e6:	d0e6      	beq.n	80063b6 <_printf_common+0xae>
 80063e8:	3601      	adds	r6, #1
 80063ea:	e7d9      	b.n	80063a0 <_printf_common+0x98>

080063ec <_printf_i>:
 80063ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063f0:	7e0f      	ldrb	r7, [r1, #24]
 80063f2:	4691      	mov	r9, r2
 80063f4:	4680      	mov	r8, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	2f78      	cmp	r7, #120	; 0x78
 80063fa:	469a      	mov	sl, r3
 80063fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006402:	d807      	bhi.n	8006414 <_printf_i+0x28>
 8006404:	2f62      	cmp	r7, #98	; 0x62
 8006406:	d80a      	bhi.n	800641e <_printf_i+0x32>
 8006408:	2f00      	cmp	r7, #0
 800640a:	f000 80d3 	beq.w	80065b4 <_printf_i+0x1c8>
 800640e:	2f58      	cmp	r7, #88	; 0x58
 8006410:	f000 80bf 	beq.w	8006592 <_printf_i+0x1a6>
 8006414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800641c:	e03a      	b.n	8006494 <_printf_i+0xa8>
 800641e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006422:	2b15      	cmp	r3, #21
 8006424:	d8f6      	bhi.n	8006414 <_printf_i+0x28>
 8006426:	a101      	add	r1, pc, #4	; (adr r1, 800642c <_printf_i+0x40>)
 8006428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800642c:	08006485 	.word	0x08006485
 8006430:	08006499 	.word	0x08006499
 8006434:	08006415 	.word	0x08006415
 8006438:	08006415 	.word	0x08006415
 800643c:	08006415 	.word	0x08006415
 8006440:	08006415 	.word	0x08006415
 8006444:	08006499 	.word	0x08006499
 8006448:	08006415 	.word	0x08006415
 800644c:	08006415 	.word	0x08006415
 8006450:	08006415 	.word	0x08006415
 8006454:	08006415 	.word	0x08006415
 8006458:	0800659b 	.word	0x0800659b
 800645c:	080064c5 	.word	0x080064c5
 8006460:	08006557 	.word	0x08006557
 8006464:	08006415 	.word	0x08006415
 8006468:	08006415 	.word	0x08006415
 800646c:	080065bd 	.word	0x080065bd
 8006470:	08006415 	.word	0x08006415
 8006474:	080064c5 	.word	0x080064c5
 8006478:	08006415 	.word	0x08006415
 800647c:	08006415 	.word	0x08006415
 8006480:	0800655f 	.word	0x0800655f
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	1d1a      	adds	r2, r3, #4
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	602a      	str	r2, [r5, #0]
 800648c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006494:	2301      	movs	r3, #1
 8006496:	e09e      	b.n	80065d6 <_printf_i+0x1ea>
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	0607      	lsls	r7, r0, #24
 800649e:	f103 0104 	add.w	r1, r3, #4
 80064a2:	6029      	str	r1, [r5, #0]
 80064a4:	d501      	bpl.n	80064aa <_printf_i+0xbe>
 80064a6:	681e      	ldr	r6, [r3, #0]
 80064a8:	e003      	b.n	80064b2 <_printf_i+0xc6>
 80064aa:	0646      	lsls	r6, r0, #25
 80064ac:	d5fb      	bpl.n	80064a6 <_printf_i+0xba>
 80064ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064b2:	2e00      	cmp	r6, #0
 80064b4:	da03      	bge.n	80064be <_printf_i+0xd2>
 80064b6:	232d      	movs	r3, #45	; 0x2d
 80064b8:	4276      	negs	r6, r6
 80064ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064be:	4859      	ldr	r0, [pc, #356]	; (8006624 <_printf_i+0x238>)
 80064c0:	230a      	movs	r3, #10
 80064c2:	e012      	b.n	80064ea <_printf_i+0xfe>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	6820      	ldr	r0, [r4, #0]
 80064c8:	1d19      	adds	r1, r3, #4
 80064ca:	6029      	str	r1, [r5, #0]
 80064cc:	0605      	lsls	r5, r0, #24
 80064ce:	d501      	bpl.n	80064d4 <_printf_i+0xe8>
 80064d0:	681e      	ldr	r6, [r3, #0]
 80064d2:	e002      	b.n	80064da <_printf_i+0xee>
 80064d4:	0641      	lsls	r1, r0, #25
 80064d6:	d5fb      	bpl.n	80064d0 <_printf_i+0xe4>
 80064d8:	881e      	ldrh	r6, [r3, #0]
 80064da:	2f6f      	cmp	r7, #111	; 0x6f
 80064dc:	4851      	ldr	r0, [pc, #324]	; (8006624 <_printf_i+0x238>)
 80064de:	bf0c      	ite	eq
 80064e0:	2308      	moveq	r3, #8
 80064e2:	230a      	movne	r3, #10
 80064e4:	2100      	movs	r1, #0
 80064e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ea:	6865      	ldr	r5, [r4, #4]
 80064ec:	2d00      	cmp	r5, #0
 80064ee:	60a5      	str	r5, [r4, #8]
 80064f0:	bfa2      	ittt	ge
 80064f2:	6821      	ldrge	r1, [r4, #0]
 80064f4:	f021 0104 	bicge.w	r1, r1, #4
 80064f8:	6021      	strge	r1, [r4, #0]
 80064fa:	b90e      	cbnz	r6, 8006500 <_printf_i+0x114>
 80064fc:	2d00      	cmp	r5, #0
 80064fe:	d04a      	beq.n	8006596 <_printf_i+0x1aa>
 8006500:	4615      	mov	r5, r2
 8006502:	fbb6 f1f3 	udiv	r1, r6, r3
 8006506:	fb03 6711 	mls	r7, r3, r1, r6
 800650a:	5dc7      	ldrb	r7, [r0, r7]
 800650c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006510:	4637      	mov	r7, r6
 8006512:	460e      	mov	r6, r1
 8006514:	42bb      	cmp	r3, r7
 8006516:	d9f4      	bls.n	8006502 <_printf_i+0x116>
 8006518:	2b08      	cmp	r3, #8
 800651a:	d10b      	bne.n	8006534 <_printf_i+0x148>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	07de      	lsls	r6, r3, #31
 8006520:	d508      	bpl.n	8006534 <_printf_i+0x148>
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	6861      	ldr	r1, [r4, #4]
 8006526:	4299      	cmp	r1, r3
 8006528:	bfde      	ittt	le
 800652a:	2330      	movle	r3, #48	; 0x30
 800652c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006530:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006534:	1b52      	subs	r2, r2, r5
 8006536:	6122      	str	r2, [r4, #16]
 8006538:	464b      	mov	r3, r9
 800653a:	aa03      	add	r2, sp, #12
 800653c:	4621      	mov	r1, r4
 800653e:	4640      	mov	r0, r8
 8006540:	f8cd a000 	str.w	sl, [sp]
 8006544:	f7ff fee0 	bl	8006308 <_printf_common>
 8006548:	3001      	adds	r0, #1
 800654a:	d149      	bne.n	80065e0 <_printf_i+0x1f4>
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	b004      	add	sp, #16
 8006552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	f043 0320 	orr.w	r3, r3, #32
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	2778      	movs	r7, #120	; 0x78
 8006560:	4831      	ldr	r0, [pc, #196]	; (8006628 <_printf_i+0x23c>)
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006568:	061f      	lsls	r7, r3, #24
 800656a:	6829      	ldr	r1, [r5, #0]
 800656c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006570:	d402      	bmi.n	8006578 <_printf_i+0x18c>
 8006572:	065f      	lsls	r7, r3, #25
 8006574:	bf48      	it	mi
 8006576:	b2b6      	uxthmi	r6, r6
 8006578:	07df      	lsls	r7, r3, #31
 800657a:	6029      	str	r1, [r5, #0]
 800657c:	bf44      	itt	mi
 800657e:	f043 0320 	orrmi.w	r3, r3, #32
 8006582:	6023      	strmi	r3, [r4, #0]
 8006584:	b91e      	cbnz	r6, 800658e <_printf_i+0x1a2>
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	f023 0320 	bic.w	r3, r3, #32
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	2310      	movs	r3, #16
 8006590:	e7a8      	b.n	80064e4 <_printf_i+0xf8>
 8006592:	4824      	ldr	r0, [pc, #144]	; (8006624 <_printf_i+0x238>)
 8006594:	e7e5      	b.n	8006562 <_printf_i+0x176>
 8006596:	4615      	mov	r5, r2
 8006598:	e7be      	b.n	8006518 <_printf_i+0x12c>
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	6826      	ldr	r6, [r4, #0]
 800659e:	1d18      	adds	r0, r3, #4
 80065a0:	6961      	ldr	r1, [r4, #20]
 80065a2:	6028      	str	r0, [r5, #0]
 80065a4:	0635      	lsls	r5, r6, #24
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	d501      	bpl.n	80065ae <_printf_i+0x1c2>
 80065aa:	6019      	str	r1, [r3, #0]
 80065ac:	e002      	b.n	80065b4 <_printf_i+0x1c8>
 80065ae:	0670      	lsls	r0, r6, #25
 80065b0:	d5fb      	bpl.n	80065aa <_printf_i+0x1be>
 80065b2:	8019      	strh	r1, [r3, #0]
 80065b4:	2300      	movs	r3, #0
 80065b6:	4615      	mov	r5, r2
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	e7bd      	b.n	8006538 <_printf_i+0x14c>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	2100      	movs	r1, #0
 80065c0:	1d1a      	adds	r2, r3, #4
 80065c2:	602a      	str	r2, [r5, #0]
 80065c4:	681d      	ldr	r5, [r3, #0]
 80065c6:	6862      	ldr	r2, [r4, #4]
 80065c8:	4628      	mov	r0, r5
 80065ca:	f000 f981 	bl	80068d0 <memchr>
 80065ce:	b108      	cbz	r0, 80065d4 <_printf_i+0x1e8>
 80065d0:	1b40      	subs	r0, r0, r5
 80065d2:	6060      	str	r0, [r4, #4]
 80065d4:	6863      	ldr	r3, [r4, #4]
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	2300      	movs	r3, #0
 80065da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065de:	e7ab      	b.n	8006538 <_printf_i+0x14c>
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	462a      	mov	r2, r5
 80065e4:	4649      	mov	r1, r9
 80065e6:	4640      	mov	r0, r8
 80065e8:	47d0      	blx	sl
 80065ea:	3001      	adds	r0, #1
 80065ec:	d0ae      	beq.n	800654c <_printf_i+0x160>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	079b      	lsls	r3, r3, #30
 80065f2:	d413      	bmi.n	800661c <_printf_i+0x230>
 80065f4:	68e0      	ldr	r0, [r4, #12]
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	4298      	cmp	r0, r3
 80065fa:	bfb8      	it	lt
 80065fc:	4618      	movlt	r0, r3
 80065fe:	e7a7      	b.n	8006550 <_printf_i+0x164>
 8006600:	2301      	movs	r3, #1
 8006602:	4632      	mov	r2, r6
 8006604:	4649      	mov	r1, r9
 8006606:	4640      	mov	r0, r8
 8006608:	47d0      	blx	sl
 800660a:	3001      	adds	r0, #1
 800660c:	d09e      	beq.n	800654c <_printf_i+0x160>
 800660e:	3501      	adds	r5, #1
 8006610:	68e3      	ldr	r3, [r4, #12]
 8006612:	9903      	ldr	r1, [sp, #12]
 8006614:	1a5b      	subs	r3, r3, r1
 8006616:	42ab      	cmp	r3, r5
 8006618:	dcf2      	bgt.n	8006600 <_printf_i+0x214>
 800661a:	e7eb      	b.n	80065f4 <_printf_i+0x208>
 800661c:	2500      	movs	r5, #0
 800661e:	f104 0619 	add.w	r6, r4, #25
 8006622:	e7f5      	b.n	8006610 <_printf_i+0x224>
 8006624:	08006ab9 	.word	0x08006ab9
 8006628:	08006aca 	.word	0x08006aca

0800662c <__sflush_r>:
 800662c:	898a      	ldrh	r2, [r1, #12]
 800662e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006632:	4605      	mov	r5, r0
 8006634:	0710      	lsls	r0, r2, #28
 8006636:	460c      	mov	r4, r1
 8006638:	d458      	bmi.n	80066ec <__sflush_r+0xc0>
 800663a:	684b      	ldr	r3, [r1, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dc05      	bgt.n	800664c <__sflush_r+0x20>
 8006640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	dc02      	bgt.n	800664c <__sflush_r+0x20>
 8006646:	2000      	movs	r0, #0
 8006648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800664c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800664e:	2e00      	cmp	r6, #0
 8006650:	d0f9      	beq.n	8006646 <__sflush_r+0x1a>
 8006652:	2300      	movs	r3, #0
 8006654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006658:	682f      	ldr	r7, [r5, #0]
 800665a:	6a21      	ldr	r1, [r4, #32]
 800665c:	602b      	str	r3, [r5, #0]
 800665e:	d032      	beq.n	80066c6 <__sflush_r+0x9a>
 8006660:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	075a      	lsls	r2, r3, #29
 8006666:	d505      	bpl.n	8006674 <__sflush_r+0x48>
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	1ac0      	subs	r0, r0, r3
 800666c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800666e:	b10b      	cbz	r3, 8006674 <__sflush_r+0x48>
 8006670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006672:	1ac0      	subs	r0, r0, r3
 8006674:	2300      	movs	r3, #0
 8006676:	4602      	mov	r2, r0
 8006678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800667a:	4628      	mov	r0, r5
 800667c:	6a21      	ldr	r1, [r4, #32]
 800667e:	47b0      	blx	r6
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	d106      	bne.n	8006694 <__sflush_r+0x68>
 8006686:	6829      	ldr	r1, [r5, #0]
 8006688:	291d      	cmp	r1, #29
 800668a:	d82b      	bhi.n	80066e4 <__sflush_r+0xb8>
 800668c:	4a28      	ldr	r2, [pc, #160]	; (8006730 <__sflush_r+0x104>)
 800668e:	410a      	asrs	r2, r1
 8006690:	07d6      	lsls	r6, r2, #31
 8006692:	d427      	bmi.n	80066e4 <__sflush_r+0xb8>
 8006694:	2200      	movs	r2, #0
 8006696:	04d9      	lsls	r1, r3, #19
 8006698:	6062      	str	r2, [r4, #4]
 800669a:	6922      	ldr	r2, [r4, #16]
 800669c:	6022      	str	r2, [r4, #0]
 800669e:	d504      	bpl.n	80066aa <__sflush_r+0x7e>
 80066a0:	1c42      	adds	r2, r0, #1
 80066a2:	d101      	bne.n	80066a8 <__sflush_r+0x7c>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	b903      	cbnz	r3, 80066aa <__sflush_r+0x7e>
 80066a8:	6560      	str	r0, [r4, #84]	; 0x54
 80066aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ac:	602f      	str	r7, [r5, #0]
 80066ae:	2900      	cmp	r1, #0
 80066b0:	d0c9      	beq.n	8006646 <__sflush_r+0x1a>
 80066b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b6:	4299      	cmp	r1, r3
 80066b8:	d002      	beq.n	80066c0 <__sflush_r+0x94>
 80066ba:	4628      	mov	r0, r5
 80066bc:	f7ff fbe8 	bl	8005e90 <_free_r>
 80066c0:	2000      	movs	r0, #0
 80066c2:	6360      	str	r0, [r4, #52]	; 0x34
 80066c4:	e7c0      	b.n	8006648 <__sflush_r+0x1c>
 80066c6:	2301      	movs	r3, #1
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b0      	blx	r6
 80066cc:	1c41      	adds	r1, r0, #1
 80066ce:	d1c8      	bne.n	8006662 <__sflush_r+0x36>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0c5      	beq.n	8006662 <__sflush_r+0x36>
 80066d6:	2b1d      	cmp	r3, #29
 80066d8:	d001      	beq.n	80066de <__sflush_r+0xb2>
 80066da:	2b16      	cmp	r3, #22
 80066dc:	d101      	bne.n	80066e2 <__sflush_r+0xb6>
 80066de:	602f      	str	r7, [r5, #0]
 80066e0:	e7b1      	b.n	8006646 <__sflush_r+0x1a>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e8:	81a3      	strh	r3, [r4, #12]
 80066ea:	e7ad      	b.n	8006648 <__sflush_r+0x1c>
 80066ec:	690f      	ldr	r7, [r1, #16]
 80066ee:	2f00      	cmp	r7, #0
 80066f0:	d0a9      	beq.n	8006646 <__sflush_r+0x1a>
 80066f2:	0793      	lsls	r3, r2, #30
 80066f4:	680e      	ldr	r6, [r1, #0]
 80066f6:	600f      	str	r7, [r1, #0]
 80066f8:	bf0c      	ite	eq
 80066fa:	694b      	ldreq	r3, [r1, #20]
 80066fc:	2300      	movne	r3, #0
 80066fe:	eba6 0807 	sub.w	r8, r6, r7
 8006702:	608b      	str	r3, [r1, #8]
 8006704:	f1b8 0f00 	cmp.w	r8, #0
 8006708:	dd9d      	ble.n	8006646 <__sflush_r+0x1a>
 800670a:	4643      	mov	r3, r8
 800670c:	463a      	mov	r2, r7
 800670e:	6a21      	ldr	r1, [r4, #32]
 8006710:	4628      	mov	r0, r5
 8006712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006714:	47b0      	blx	r6
 8006716:	2800      	cmp	r0, #0
 8006718:	dc06      	bgt.n	8006728 <__sflush_r+0xfc>
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	e78f      	b.n	8006648 <__sflush_r+0x1c>
 8006728:	4407      	add	r7, r0
 800672a:	eba8 0800 	sub.w	r8, r8, r0
 800672e:	e7e9      	b.n	8006704 <__sflush_r+0xd8>
 8006730:	dfbffffe 	.word	0xdfbffffe

08006734 <_fflush_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	690b      	ldr	r3, [r1, #16]
 8006738:	4605      	mov	r5, r0
 800673a:	460c      	mov	r4, r1
 800673c:	b913      	cbnz	r3, 8006744 <_fflush_r+0x10>
 800673e:	2500      	movs	r5, #0
 8006740:	4628      	mov	r0, r5
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	b118      	cbz	r0, 800674e <_fflush_r+0x1a>
 8006746:	6a03      	ldr	r3, [r0, #32]
 8006748:	b90b      	cbnz	r3, 800674e <_fflush_r+0x1a>
 800674a:	f7ff fa9b 	bl	8005c84 <__sinit>
 800674e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f3      	beq.n	800673e <_fflush_r+0xa>
 8006756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006758:	07d0      	lsls	r0, r2, #31
 800675a:	d404      	bmi.n	8006766 <_fflush_r+0x32>
 800675c:	0599      	lsls	r1, r3, #22
 800675e:	d402      	bmi.n	8006766 <_fflush_r+0x32>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f7ff fb93 	bl	8005e8c <__retarget_lock_acquire_recursive>
 8006766:	4628      	mov	r0, r5
 8006768:	4621      	mov	r1, r4
 800676a:	f7ff ff5f 	bl	800662c <__sflush_r>
 800676e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006770:	4605      	mov	r5, r0
 8006772:	07da      	lsls	r2, r3, #31
 8006774:	d4e4      	bmi.n	8006740 <_fflush_r+0xc>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	059b      	lsls	r3, r3, #22
 800677a:	d4e1      	bmi.n	8006740 <_fflush_r+0xc>
 800677c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677e:	f7ff fb86 	bl	8005e8e <__retarget_lock_release_recursive>
 8006782:	e7dd      	b.n	8006740 <_fflush_r+0xc>

08006784 <__swbuf_r>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	460e      	mov	r6, r1
 8006788:	4614      	mov	r4, r2
 800678a:	4605      	mov	r5, r0
 800678c:	b118      	cbz	r0, 8006796 <__swbuf_r+0x12>
 800678e:	6a03      	ldr	r3, [r0, #32]
 8006790:	b90b      	cbnz	r3, 8006796 <__swbuf_r+0x12>
 8006792:	f7ff fa77 	bl	8005c84 <__sinit>
 8006796:	69a3      	ldr	r3, [r4, #24]
 8006798:	60a3      	str	r3, [r4, #8]
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	071a      	lsls	r2, r3, #28
 800679e:	d525      	bpl.n	80067ec <__swbuf_r+0x68>
 80067a0:	6923      	ldr	r3, [r4, #16]
 80067a2:	b31b      	cbz	r3, 80067ec <__swbuf_r+0x68>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	b2f6      	uxtb	r6, r6
 80067a8:	6922      	ldr	r2, [r4, #16]
 80067aa:	4637      	mov	r7, r6
 80067ac:	1a98      	subs	r0, r3, r2
 80067ae:	6963      	ldr	r3, [r4, #20]
 80067b0:	4283      	cmp	r3, r0
 80067b2:	dc04      	bgt.n	80067be <__swbuf_r+0x3a>
 80067b4:	4621      	mov	r1, r4
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7ff ffbc 	bl	8006734 <_fflush_r>
 80067bc:	b9e0      	cbnz	r0, 80067f8 <__swbuf_r+0x74>
 80067be:	68a3      	ldr	r3, [r4, #8]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	60a3      	str	r3, [r4, #8]
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	6022      	str	r2, [r4, #0]
 80067ca:	701e      	strb	r6, [r3, #0]
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	6962      	ldr	r2, [r4, #20]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d004      	beq.n	80067de <__swbuf_r+0x5a>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	07db      	lsls	r3, r3, #31
 80067d8:	d506      	bpl.n	80067e8 <__swbuf_r+0x64>
 80067da:	2e0a      	cmp	r6, #10
 80067dc:	d104      	bne.n	80067e8 <__swbuf_r+0x64>
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f7ff ffa7 	bl	8006734 <_fflush_r>
 80067e6:	b938      	cbnz	r0, 80067f8 <__swbuf_r+0x74>
 80067e8:	4638      	mov	r0, r7
 80067ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ec:	4621      	mov	r1, r4
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 f806 	bl	8006800 <__swsetup_r>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d0d5      	beq.n	80067a4 <__swbuf_r+0x20>
 80067f8:	f04f 37ff 	mov.w	r7, #4294967295
 80067fc:	e7f4      	b.n	80067e8 <__swbuf_r+0x64>
	...

08006800 <__swsetup_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4b2a      	ldr	r3, [pc, #168]	; (80068ac <__swsetup_r+0xac>)
 8006804:	4605      	mov	r5, r0
 8006806:	460c      	mov	r4, r1
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	b118      	cbz	r0, 8006814 <__swsetup_r+0x14>
 800680c:	6a03      	ldr	r3, [r0, #32]
 800680e:	b90b      	cbnz	r3, 8006814 <__swsetup_r+0x14>
 8006810:	f7ff fa38 	bl	8005c84 <__sinit>
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800681a:	0718      	lsls	r0, r3, #28
 800681c:	d422      	bmi.n	8006864 <__swsetup_r+0x64>
 800681e:	06d9      	lsls	r1, r3, #27
 8006820:	d407      	bmi.n	8006832 <__swsetup_r+0x32>
 8006822:	2309      	movs	r3, #9
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	e034      	b.n	800689c <__swsetup_r+0x9c>
 8006832:	0758      	lsls	r0, r3, #29
 8006834:	d512      	bpl.n	800685c <__swsetup_r+0x5c>
 8006836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006838:	b141      	cbz	r1, 800684c <__swsetup_r+0x4c>
 800683a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800683e:	4299      	cmp	r1, r3
 8006840:	d002      	beq.n	8006848 <__swsetup_r+0x48>
 8006842:	4628      	mov	r0, r5
 8006844:	f7ff fb24 	bl	8005e90 <_free_r>
 8006848:	2300      	movs	r3, #0
 800684a:	6363      	str	r3, [r4, #52]	; 0x34
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	2300      	movs	r3, #0
 8006856:	6063      	str	r3, [r4, #4]
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	6023      	str	r3, [r4, #0]
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	f043 0308 	orr.w	r3, r3, #8
 8006862:	81a3      	strh	r3, [r4, #12]
 8006864:	6923      	ldr	r3, [r4, #16]
 8006866:	b94b      	cbnz	r3, 800687c <__swsetup_r+0x7c>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800686e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006872:	d003      	beq.n	800687c <__swsetup_r+0x7c>
 8006874:	4621      	mov	r1, r4
 8006876:	4628      	mov	r0, r5
 8006878:	f000 f85d 	bl	8006936 <__smakebuf_r>
 800687c:	89a0      	ldrh	r0, [r4, #12]
 800687e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006882:	f010 0301 	ands.w	r3, r0, #1
 8006886:	d00a      	beq.n	800689e <__swsetup_r+0x9e>
 8006888:	2300      	movs	r3, #0
 800688a:	60a3      	str	r3, [r4, #8]
 800688c:	6963      	ldr	r3, [r4, #20]
 800688e:	425b      	negs	r3, r3
 8006890:	61a3      	str	r3, [r4, #24]
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	b943      	cbnz	r3, 80068a8 <__swsetup_r+0xa8>
 8006896:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800689a:	d1c4      	bne.n	8006826 <__swsetup_r+0x26>
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	0781      	lsls	r1, r0, #30
 80068a0:	bf58      	it	pl
 80068a2:	6963      	ldrpl	r3, [r4, #20]
 80068a4:	60a3      	str	r3, [r4, #8]
 80068a6:	e7f4      	b.n	8006892 <__swsetup_r+0x92>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e7f7      	b.n	800689c <__swsetup_r+0x9c>
 80068ac:	20000098 	.word	0x20000098

080068b0 <_sbrk_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	2300      	movs	r3, #0
 80068b4:	4d05      	ldr	r5, [pc, #20]	; (80068cc <_sbrk_r+0x1c>)
 80068b6:	4604      	mov	r4, r0
 80068b8:	4608      	mov	r0, r1
 80068ba:	602b      	str	r3, [r5, #0]
 80068bc:	f7fa fd0c 	bl	80012d8 <_sbrk>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_sbrk_r+0x1a>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_sbrk_r+0x1a>
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	20000624 	.word	0x20000624

080068d0 <memchr>:
 80068d0:	b2c9      	uxtb	r1, r1
 80068d2:	4402      	add	r2, r0
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4290      	cmp	r0, r2
 80068d8:	4603      	mov	r3, r0
 80068da:	d101      	bne.n	80068e0 <memchr+0x10>
 80068dc:	2300      	movs	r3, #0
 80068de:	e003      	b.n	80068e8 <memchr+0x18>
 80068e0:	781c      	ldrb	r4, [r3, #0]
 80068e2:	3001      	adds	r0, #1
 80068e4:	428c      	cmp	r4, r1
 80068e6:	d1f6      	bne.n	80068d6 <memchr+0x6>
 80068e8:	4618      	mov	r0, r3
 80068ea:	bd10      	pop	{r4, pc}

080068ec <__swhatbuf_r>:
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	460c      	mov	r4, r1
 80068f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f4:	b096      	sub	sp, #88	; 0x58
 80068f6:	4615      	mov	r5, r2
 80068f8:	2900      	cmp	r1, #0
 80068fa:	461e      	mov	r6, r3
 80068fc:	da0c      	bge.n	8006918 <__swhatbuf_r+0x2c>
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	2100      	movs	r1, #0
 8006902:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006906:	bf0c      	ite	eq
 8006908:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800690c:	2340      	movne	r3, #64	; 0x40
 800690e:	2000      	movs	r0, #0
 8006910:	6031      	str	r1, [r6, #0]
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	b016      	add	sp, #88	; 0x58
 8006916:	bd70      	pop	{r4, r5, r6, pc}
 8006918:	466a      	mov	r2, sp
 800691a:	f000 f849 	bl	80069b0 <_fstat_r>
 800691e:	2800      	cmp	r0, #0
 8006920:	dbed      	blt.n	80068fe <__swhatbuf_r+0x12>
 8006922:	9901      	ldr	r1, [sp, #4]
 8006924:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006928:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800692c:	4259      	negs	r1, r3
 800692e:	4159      	adcs	r1, r3
 8006930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006934:	e7eb      	b.n	800690e <__swhatbuf_r+0x22>

08006936 <__smakebuf_r>:
 8006936:	898b      	ldrh	r3, [r1, #12]
 8006938:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800693a:	079d      	lsls	r5, r3, #30
 800693c:	4606      	mov	r6, r0
 800693e:	460c      	mov	r4, r1
 8006940:	d507      	bpl.n	8006952 <__smakebuf_r+0x1c>
 8006942:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	2301      	movs	r3, #1
 800694c:	6163      	str	r3, [r4, #20]
 800694e:	b002      	add	sp, #8
 8006950:	bd70      	pop	{r4, r5, r6, pc}
 8006952:	ab01      	add	r3, sp, #4
 8006954:	466a      	mov	r2, sp
 8006956:	f7ff ffc9 	bl	80068ec <__swhatbuf_r>
 800695a:	9900      	ldr	r1, [sp, #0]
 800695c:	4605      	mov	r5, r0
 800695e:	4630      	mov	r0, r6
 8006960:	f7ff fb02 	bl	8005f68 <_malloc_r>
 8006964:	b948      	cbnz	r0, 800697a <__smakebuf_r+0x44>
 8006966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800696a:	059a      	lsls	r2, r3, #22
 800696c:	d4ef      	bmi.n	800694e <__smakebuf_r+0x18>
 800696e:	f023 0303 	bic.w	r3, r3, #3
 8006972:	f043 0302 	orr.w	r3, r3, #2
 8006976:	81a3      	strh	r3, [r4, #12]
 8006978:	e7e3      	b.n	8006942 <__smakebuf_r+0xc>
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	6020      	str	r0, [r4, #0]
 800697e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006982:	6120      	str	r0, [r4, #16]
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	9b00      	ldr	r3, [sp, #0]
 8006988:	6163      	str	r3, [r4, #20]
 800698a:	9b01      	ldr	r3, [sp, #4]
 800698c:	b15b      	cbz	r3, 80069a6 <__smakebuf_r+0x70>
 800698e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006992:	4630      	mov	r0, r6
 8006994:	f000 f81e 	bl	80069d4 <_isatty_r>
 8006998:	b128      	cbz	r0, 80069a6 <__smakebuf_r+0x70>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f023 0303 	bic.w	r3, r3, #3
 80069a0:	f043 0301 	orr.w	r3, r3, #1
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	431d      	orrs	r5, r3
 80069aa:	81a5      	strh	r5, [r4, #12]
 80069ac:	e7cf      	b.n	800694e <__smakebuf_r+0x18>
	...

080069b0 <_fstat_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	2300      	movs	r3, #0
 80069b4:	4d06      	ldr	r5, [pc, #24]	; (80069d0 <_fstat_r+0x20>)
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	602b      	str	r3, [r5, #0]
 80069be:	f7fa fc62 	bl	8001286 <_fstat>
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	d102      	bne.n	80069cc <_fstat_r+0x1c>
 80069c6:	682b      	ldr	r3, [r5, #0]
 80069c8:	b103      	cbz	r3, 80069cc <_fstat_r+0x1c>
 80069ca:	6023      	str	r3, [r4, #0]
 80069cc:	bd38      	pop	{r3, r4, r5, pc}
 80069ce:	bf00      	nop
 80069d0:	20000624 	.word	0x20000624

080069d4 <_isatty_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	2300      	movs	r3, #0
 80069d8:	4d05      	ldr	r5, [pc, #20]	; (80069f0 <_isatty_r+0x1c>)
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fa fc61 	bl	80012a6 <_isatty>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_isatty_r+0x1a>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_isatty_r+0x1a>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000624 	.word	0x20000624

080069f4 <_init>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr

08006a00 <_fini>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr
