
Tarea2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d8  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006360  08006360  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006368  08006368  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000078  080063e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  080063e8  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b40a  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038e8  00000000  00000000  0003b4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114f  00000000  00000000  00040498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f10f  00000000  00000000  000415e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a01d  00000000  00000000  000706f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012cf7c  00000000  00000000  0008a713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066e4  00000000  00000000  001b7690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001bdd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000078 	.word	0x20000078
 8000210:	00000000 	.word	0x00000000
 8000214:	080062b4 	.word	0x080062b4

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000007c 	.word	0x2000007c
 8000230:	080062b4 	.word	0x080062b4

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800055c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000560:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d013      	beq.n	8000594 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800056c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000570:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000574:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800057c:	e000      	b.n	8000580 <ITM_SendChar+0x2c>
    {
      __NOP();
 800057e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800058a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b0:	4907      	ldr	r1, [pc, #28]	; (80005d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4013      	ands	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40021000 	.word	0x40021000

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fe80 	bl	800130e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f829 	bl	8000664 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <main+0x54>)
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 fa0a 	bl	8000a30 <MX_GPIO_Init>
  MX_ADC1_Init();
 800061c:	f000 f888 	bl	8000730 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000620:	f000 f8fc 	bl	800081c <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8000624:	f000 f90e 	bl	8000844 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000628:	f000 f95a 	bl	80008e0 <MX_RTC_Init>
  MX_UCPD1_Init();
 800062c:	f000 f9a2 	bl	8000974 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000630:	f000 f9d6 	bl	80009e0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("GPIO Init Done \r\n");
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <main+0x58>)
 8000636:	f005 faab 	bl	8005b90 <puts>
  ITM_Port32(31) = 2;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <main+0x54>)
 800063c:	2202      	movs	r2, #2
 800063e:	601a      	str	r2, [r3, #0]


  enum state_codes cur_state = ENTRY_STATE; //Estado en el que empiezo
 8000640:	2300      	movs	r3, #0
 8000642:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  state_fun = state[cur_state]; //state_fun busca en el array de punteros a funciones que funcion tiene que ejecutar segun el estado actual
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	4a06      	ldr	r2, [pc, #24]	; (8000660 <main+0x5c>)
 8000648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064c:	60bb      	str	r3, [r7, #8]
	  rc = state_fun(); //Ejecución de la función del estado actual
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	4798      	blx	r3
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	  state_fun = state[cur_state]; //state_fun busca en el array de punteros a funciones que funcion tiene que ejecutar segun el estado actual
 8000656:	e7f5      	b.n	8000644 <main+0x40>
 8000658:	e000007c 	.word	0xe000007c
 800065c:	080062cc 	.word	0x080062cc
 8000660:	20000000 	.word	0x20000000

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b098      	sub	sp, #96	; 0x60
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2248      	movs	r2, #72	; 0x48
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 fb6c 	bl	8005d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000686:	2000      	movs	r0, #0
 8000688:	f002 fa84 	bl	8002b94 <HAL_PWREx_ControlVoltageScaling>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000692:	f000 fb0f 	bl	8000cb4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000696:	f002 fa5f 	bl	8002b58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xc8>)
 800069c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <SystemClock_Config+0xc8>)
 80006a2:	f023 0318 	bic.w	r3, r3, #24
 80006a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006aa:	2336      	movs	r3, #54	; 0x36
 80006ac:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ae:	2381      	movs	r3, #129	; 0x81
 80006b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d0:	2301      	movs	r3, #1
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006d8:	2337      	movs	r3, #55	; 0x37
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006dc:	2307      	movs	r3, #7
 80006de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fae1 	bl	8002cb4 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f8:	f000 fadc 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2105      	movs	r1, #5
 8000714:	4618      	mov	r0, r3
 8000716:	f002 ffa3 	bl	8003660 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000720:	f000 fac8 	bl	8000cb4 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3760      	adds	r7, #96	; 0x60
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_ADC1_Init+0xe0>)
 8000754:	4a2f      	ldr	r2, [pc, #188]	; (8000814 <MX_ADC1_Init+0xe4>)
 8000756:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_ADC1_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_ADC1_Init+0xe0>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_ADC1_Init+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_ADC1_Init+0xe0>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_ADC1_Init+0xe0>)
 8000772:	2204      	movs	r2, #4
 8000774:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_ADC1_Init+0xe0>)
 8000778:	2200      	movs	r2, #0
 800077a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_ADC1_Init+0xe0>)
 800077e:	2200      	movs	r2, #0
 8000780:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_ADC1_Init+0xe0>)
 8000784:	2201      	movs	r2, #1
 8000786:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_ADC1_Init+0xe0>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_ADC1_Init+0xe0>)
 8000792:	2200      	movs	r2, #0
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_ADC1_Init+0xe0>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_ADC1_Init+0xe0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_ADC1_Init+0xe0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_ADC1_Init+0xe0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b2:	4817      	ldr	r0, [pc, #92]	; (8000810 <MX_ADC1_Init+0xe0>)
 80007b4:	f000 ffc2 	bl	800173c <HAL_ADC_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007be:	f000 fa79 	bl	8000cb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4810      	ldr	r0, [pc, #64]	; (8000810 <MX_ADC1_Init+0xe0>)
 80007ce:	f001 fd11 	bl	80021f4 <HAL_ADCEx_MultiModeConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007d8:	f000 fa6c 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_ADC1_Init+0xe8>)
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e0:	2306      	movs	r3, #6
 80007e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e8:	237f      	movs	r3, #127	; 0x7f
 80007ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ec:	2304      	movs	r3, #4
 80007ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_ADC1_Init+0xe0>)
 80007fa:	f001 f8eb 	bl	80019d4 <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000804:	f000 fa56 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000094 	.word	0x20000094
 8000814:	42028000 	.word	0x42028000
 8000818:	0c900008 	.word	0x0c900008

0800081c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000820:	2000      	movs	r0, #0
 8000822:	f002 f865 	bl	80028f0 <HAL_ICACHE_ConfigAssociativityMode>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800082c:	f000 fa42 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000830:	f002 f87e 	bl	8002930 <HAL_ICACHE_Enable>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800083a:	f000 fa3b 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 800084a:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <MX_LPUART1_UART_Init+0x94>)
 800084c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 8000850:	4a22      	ldr	r2, [pc, #136]	; (80008dc <MX_LPUART1_UART_Init+0x98>)
 8000852:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 8000868:	220c      	movs	r2, #12
 800086a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 800088c:	f004 f81c 	bl	80048c8 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000896:	f000 fa0d 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 800089e:	f004 fdb5 	bl	800540c <HAL_UARTEx_SetTxFifoThreshold>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008a8:	f000 fa04 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 80008b0:	f004 fdea 	bl	8005488 <HAL_UARTEx_SetRxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008ba:	f000 f9fb 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_LPUART1_UART_Init+0x90>)
 80008c0:	f004 fd6b 	bl	800539a <HAL_UARTEx_DisableFifoMode>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008ca:	f000 f9f3 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000fc 	.word	0x200000fc
 80008d8:	40008000 	.word	0x40008000
 80008dc:	00033324 	.word	0x00033324

080008e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_RTC_Init+0x8c>)
 80008f8:	4a1d      	ldr	r2, [pc, #116]	; (8000970 <MX_RTC_Init+0x90>)
 80008fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_RTC_Init+0x8c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_RTC_Init+0x8c>)
 8000904:	227f      	movs	r2, #127	; 0x7f
 8000906:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_RTC_Init+0x8c>)
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_RTC_Init+0x8c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_RTC_Init+0x8c>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_RTC_Init+0x8c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_RTC_Init+0x8c>)
 8000922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000926:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_RTC_Init+0x8c>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800092e:	480f      	ldr	r0, [pc, #60]	; (800096c <MX_RTC_Init+0x8c>)
 8000930:	f003 fe90 	bl	8004654 <HAL_RTC_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800093a:	f000 f9bb 	bl	8000cb4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_RTC_Init+0x8c>)
 8000954:	f003 ff8c 	bl	8004870 <HAL_RTCEx_PrivilegeModeSet>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800095e:	f000 f9a9 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000190 	.word	0x20000190
 8000970:	40002800 	.word	0x40002800

08000974 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800098a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800098e:	f7ff fe21 	bl	80005d4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff fe06 	bl	80005a4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fe03 	bl	80005a4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800099e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009a4:	2303      	movs	r3, #3
 80009a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <MX_UCPD1_Init+0x64>)
 80009b2:	f004 ff40 	bl	8005836 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009bc:	2303      	movs	r3, #3
 80009be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_UCPD1_Init+0x68>)
 80009ca:	f004 ff34 	bl	8005836 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	42020400 	.word	0x42020400
 80009dc:	42020000 	.word	0x42020000

080009e0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USB_PCD_Init+0x48>)
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <MX_USB_PCD_Init+0x4c>)
 80009e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_USB_PCD_Init+0x48>)
 80009ec:	2208      	movs	r2, #8
 80009ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_USB_PCD_Init+0x48>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USB_PCD_Init+0x48>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_USB_PCD_Init+0x48>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USB_PCD_Init+0x48>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_USB_PCD_Init+0x48>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USB_PCD_Init+0x48>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_USB_PCD_Init+0x48>)
 8000a16:	f001 ff9b 	bl	8002950 <HAL_PCD_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a20:	f000 f948 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001b8 	.word	0x200001b8
 8000a2c:	4000d400 	.word	0x4000d400

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b54      	ldr	r3, [pc, #336]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a53      	ldr	r2, [pc, #332]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b51      	ldr	r3, [pc, #324]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a4d      	ldr	r2, [pc, #308]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b4b      	ldr	r3, [pc, #300]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0320 	and.w	r3, r3, #32
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b48      	ldr	r3, [pc, #288]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a47      	ldr	r2, [pc, #284]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8e:	4b42      	ldr	r3, [pc, #264]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000aa6:	f002 f8d1 	bl	8002c4c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	4835      	ldr	r0, [pc, #212]	; (8000b9c <MX_GPIO_Init+0x16c>)
 8000ac8:	f001 fec8 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad2:	4833      	ldr	r0, [pc, #204]	; (8000ba0 <MX_GPIO_Init+0x170>)
 8000ad4:	f001 fec2 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	21a0      	movs	r1, #160	; 0xa0
 8000adc:	4831      	ldr	r0, [pc, #196]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000ade:	f001 febd 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4828      	ldr	r0, [pc, #160]	; (8000b9c <MX_GPIO_Init+0x16c>)
 8000afa:	f001 fd2f 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000afe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4824      	ldr	r0, [pc, #144]	; (8000ba8 <MX_GPIO_Init+0x178>)
 8000b16:	f001 fd21 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481a      	ldr	r0, [pc, #104]	; (8000b9c <MX_GPIO_Init+0x16c>)
 8000b32:	f001 fd13 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <MX_GPIO_Init+0x170>)
 8000b50:	f001 fd04 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000b6c:	f001 fcf6 	bl	800255c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2018      	movs	r0, #24
 8000b76:	f001 fcbc 	bl	80024f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b7a:	2018      	movs	r0, #24
 8000b7c:	f001 fcd3 	bl	8002526 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2019      	movs	r0, #25
 8000b86:	f001 fcb4 	bl	80024f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8000b8a:	2019      	movs	r0, #25
 8000b8c:	f001 fccb 	bl	8002526 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	42020800 	.word	0x42020800
 8000ba0:	42020000 	.word	0x42020000
 8000ba4:	42020400 	.word	0x42020400
 8000ba8:	42021400 	.word	0x42021400

08000bac <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e009      	b.n	8000bd2 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	60ba      	str	r2, [r7, #8]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fcc4 	bl	8000554 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	dbf1      	blt.n	8000bbe <_write+0x12>
	}
	return len;
 8000bda:	687b      	ldr	r3, [r7, #4]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <state1>:

int state1(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
	//Enciendo L1 y apago L0
	enum ret_codes rc;
	if(btn1 != btn1Anterior) //Si cambia el valor el boton se ha pulsado
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <state1+0x3c>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <state1+0x40>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d002      	beq.n	8000bfc <state1+0x18>
	{
		rc = button1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	e00a      	b.n	8000c12 <state1+0x2e>
	}
	else if(btn1 != btn2Anterior) //Si cambia el valor el boton se ha pulsado
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <state1+0x3c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <state1+0x44>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d002      	beq.n	8000c0e <state1+0x2a>
	{
		rc = button2;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	e001      	b.n	8000c12 <state1+0x2e>
	}
	else //Repito si no ha sido pulsado ningún botón
	{
		rc = repeat;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	71fb      	strb	r3, [r7, #7]
	}

	return rc; //Devuelvo la transición
 8000c12:	79fb      	ldrb	r3, [r7, #7]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	200004ac 	.word	0x200004ac
 8000c24:	200004b4 	.word	0x200004b4
 8000c28:	200004b8 	.word	0x200004b8

08000c2c <state2>:

int state2(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	//Enciendo L0 y apago L1
	return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <state3>:

int state3(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	//Enciendo L0 y L1
	return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <state4>:

int state4(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	//Apago L0 y L1
	return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c6c:	d109      	bne.n	8000c82 <HAL_GPIO_EXTI_Rising_Callback+0x26>
	{
		btn1 = btn1==0?1:0; //Si pulso primer boton cambio su estado
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_GPIO_EXTI_Rising_Callback+0x50>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf0c      	ite	eq
 8000c76:	2301      	moveq	r3, #1
 8000c78:	2300      	movne	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_GPIO_EXTI_Rising_Callback+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_14)
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c88:	d109      	bne.n	8000c9e <HAL_GPIO_EXTI_Rising_Callback+0x42>
	{
		btn2 = btn2==0?1:0; //Si pulso segundo boton cambio su estado
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf0c      	ite	eq
 8000c92:	2301      	moveq	r3, #1
 8000c94:	2300      	movne	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 8000c9c:	601a      	str	r2, [r3, #0]
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200004ac 	.word	0x200004ac
 8000cb0:	200004b0 	.word	0x200004b0

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_MspInit+0x44>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <HAL_MspInit+0x44>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_MspInit+0x44>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_MspInit+0x44>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x44>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x44>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0ae      	sub	sp, #184	; 0xb8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	2294      	movs	r2, #148	; 0x94
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 f811 	bl	8005d50 <memset>
  if(hadc->Instance==ADC1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <HAL_ADC_MspInit+0xa8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d137      	bne.n	8000da8 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 ff6c 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000d56:	f7ff ffad 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_ADC_MspInit+0xac>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <HAL_ADC_MspInit+0xac>)
 8000d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_ADC_MspInit+0xac>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_ADC_MspInit+0xac>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_ADC_MspInit+0xac>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_ADC_MspInit+0xac>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d90:	2303      	movs	r3, #3
 8000d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_ADC_MspInit+0xb0>)
 8000da4:	f001 fbda 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	37b8      	adds	r7, #184	; 0xb8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	42028000 	.word	0x42028000
 8000db4:	40021000 	.word	0x40021000
 8000db8:	42020800 	.word	0x42020800

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ae      	sub	sp, #184	; 0xb8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	2294      	movs	r2, #148	; 0x94
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 ffb7 	bl	8005d50 <memset>
  if(huart->Instance==LPUART1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <HAL_UART_MspInit+0xb4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d13d      	bne.n	8000e68 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dec:	2320      	movs	r3, #32
 8000dee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 ff15 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e04:	f7ff ff56 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e38:	f001 ff08 	bl	8002c4c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000e3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e56:	2308      	movs	r3, #8
 8000e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_UART_MspInit+0xbc>)
 8000e64:	f001 fb7a 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	37b8      	adds	r7, #184	; 0xb8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40008000 	.word	0x40008000
 8000e74:	40021000 	.word	0x40021000
 8000e78:	42021800 	.word	0x42021800

08000e7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0a8      	sub	sp, #160	; 0xa0
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2294      	movs	r2, #148	; 0x94
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 ff5f 	bl	8005d50 <memset>
  if(hrtc->Instance==RTC)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <HAL_RTC_MspInit+0x74>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d124      	bne.n	8000ee6 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 feba 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000eba:	f7ff fefb 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_RTC_MspInit+0x78>)
 8000ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_RTC_MspInit+0x78>)
 8000ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_RTC_MspInit+0x78>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_RTC_MspInit+0x78>)
 8000ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_RTC_MspInit+0x78>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	37a0      	adds	r7, #160	; 0xa0
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40002800 	.word	0x40002800
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0ae      	sub	sp, #184	; 0xb8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	2294      	movs	r2, #148	; 0x94
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 ff19 	bl	8005d50 <memset>
  if(hpcd->Instance==USB)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <HAL_PCD_MspInit+0xb4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d13d      	bne.n	8000fa4 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 fe75 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f44:	f7ff feb6 	bl	8000cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_PCD_MspInit+0xb8>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <HAL_PCD_MspInit+0xb8>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_PCD_MspInit+0xb8>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f84:	4619      	mov	r1, r3
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <HAL_PCD_MspInit+0xbc>)
 8000f88:	f001 fae8 	bl	800255c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_PCD_MspInit+0xb8>)
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_PCD_MspInit+0xb8>)
 8000f92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f96:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_PCD_MspInit+0xb8>)
 8000f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	37b8      	adds	r7, #184	; 0xb8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	4000d400 	.word	0x4000d400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	42020000 	.word	0x42020000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f9da 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001010:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001014:	f001 fc3a 	bl	800288c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001020:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001024:	f001 fc32 	bl	800288c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e00a      	b.n	8001054 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103e:	f3af 8000 	nop.w
 8001042:	4601      	mov	r1, r0
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60ba      	str	r2, [r7, #8]
 800104a:	b2ca      	uxtb	r2, r1
 800104c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf0      	blt.n	800103e <_read+0x12>
  }

  return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108e:	605a      	str	r2, [r3, #4]
  return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_isatty>:

int _isatty(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f004 fe74 	bl	8005dec <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20030000 	.word	0x20030000
 8001130:	00000400 	.word	0x00000400
 8001134:	200004bc 	.word	0x200004bc
 8001138:	20000610 	.word	0x20000610

0800113c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001166:	4b4f      	ldr	r3, [pc, #316]	; (80012a4 <SystemCoreClockUpdate+0x144>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d107      	bne.n	8001182 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001172:	4b4c      	ldr	r3, [pc, #304]	; (80012a4 <SystemCoreClockUpdate+0x144>)
 8001174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e005      	b.n	800118e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001182:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <SystemCoreClockUpdate+0x144>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800118e:	4a46      	ldr	r2, [pc, #280]	; (80012a8 <SystemCoreClockUpdate+0x148>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001198:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <SystemCoreClockUpdate+0x144>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	d866      	bhi.n	8001272 <SystemCoreClockUpdate+0x112>
 80011a4:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <SystemCoreClockUpdate+0x4c>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	080011e1 	.word	0x080011e1
 80011b0:	08001273 	.word	0x08001273
 80011b4:	08001273 	.word	0x08001273
 80011b8:	08001273 	.word	0x08001273
 80011bc:	080011e9 	.word	0x080011e9
 80011c0:	08001273 	.word	0x08001273
 80011c4:	08001273 	.word	0x08001273
 80011c8:	08001273 	.word	0x08001273
 80011cc:	080011f1 	.word	0x080011f1
 80011d0:	08001273 	.word	0x08001273
 80011d4:	08001273 	.word	0x08001273
 80011d8:	08001273 	.word	0x08001273
 80011dc:	080011f9 	.word	0x080011f9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80011e0:	4a32      	ldr	r2, [pc, #200]	; (80012ac <SystemCoreClockUpdate+0x14c>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	6013      	str	r3, [r2, #0]
      break;
 80011e6:	e048      	b.n	800127a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80011e8:	4b30      	ldr	r3, [pc, #192]	; (80012ac <SystemCoreClockUpdate+0x14c>)
 80011ea:	4a31      	ldr	r2, [pc, #196]	; (80012b0 <SystemCoreClockUpdate+0x150>)
 80011ec:	601a      	str	r2, [r3, #0]
      break;
 80011ee:	e044      	b.n	800127a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <SystemCoreClockUpdate+0x14c>)
 80011f2:	4a30      	ldr	r2, [pc, #192]	; (80012b4 <SystemCoreClockUpdate+0x154>)
 80011f4:	601a      	str	r2, [r3, #0]
      break;
 80011f6:	e040      	b.n	800127a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80011f8:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <SystemCoreClockUpdate+0x144>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <SystemCoreClockUpdate+0x144>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	3301      	adds	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d003      	beq.n	800121e <SystemCoreClockUpdate+0xbe>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d006      	beq.n	800122a <SystemCoreClockUpdate+0xca>
 800121c:	e00b      	b.n	8001236 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800121e:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <SystemCoreClockUpdate+0x150>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	613b      	str	r3, [r7, #16]
          break;
 8001228:	e00b      	b.n	8001242 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800122a:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <SystemCoreClockUpdate+0x154>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	613b      	str	r3, [r7, #16]
          break;
 8001234:	e005      	b.n	8001242 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	613b      	str	r3, [r7, #16]
          break;
 8001240:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <SystemCoreClockUpdate+0x144>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <SystemCoreClockUpdate+0x144>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0e5b      	lsrs	r3, r3, #25
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	3301      	adds	r3, #1
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	fbb2 f3f3 	udiv	r3, r2, r3
 800126c:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <SystemCoreClockUpdate+0x14c>)
 800126e:	6013      	str	r3, [r2, #0]
      break;
 8001270:	e003      	b.n	800127a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <SystemCoreClockUpdate+0x14c>)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	6013      	str	r3, [r2, #0]
      break;
 8001278:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <SystemCoreClockUpdate+0x144>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <SystemCoreClockUpdate+0x158>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <SystemCoreClockUpdate+0x14c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	fa22 f303 	lsr.w	r3, r2, r3
 8001294:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemCoreClockUpdate+0x14c>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000
 80012a8:	080062f8 	.word	0x080062f8
 80012ac:	20000010 	.word	0x20000010
 80012b0:	00f42400 	.word	0x00f42400
 80012b4:	007a1200 	.word	0x007a1200
 80012b8:	080062e0 	.word	0x080062e0

080012bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c0:	f7ff ff3c 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012c6:	e003      	b.n	80012d0 <LoopCopyDataInit>

080012c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ce:	3104      	adds	r1, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012d0:	480a      	ldr	r0, [pc, #40]	; (80012fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012d8:	d3f6      	bcc.n	80012c8 <CopyDataInit>
	ldr	r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012dc:	e002      	b.n	80012e4 <LoopFillZerobss>

080012de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012e0:	f842 3b04 	str.w	r3, [r2], #4

080012e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <LoopForever+0x16>)
	cmp	r2, r3
 80012e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012e8:	d3f9      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012ea:	f004 fd85 	bl	8005df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ee:	f7ff f989 	bl	8000604 <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80012f4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80012f8:	08006370 	.word	0x08006370
	ldr	r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001300:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001304:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001308:	20000610 	.word	0x20000610

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>

0800130e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001318:	2004      	movs	r0, #4
 800131a:	f001 f8df 	bl	80024dc <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800131e:	f7ff ff1f 	bl	8001160 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f80e 	bl	8001344 <HAL_InitTick>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	e001      	b.n	8001338 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001334:	f7ff fcc4 	bl	8000cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001338:	79fb      	ldrb	r3, [r7, #7]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_InitTick+0x6c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d023      	beq.n	80013a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_InitTick+0x70>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_InitTick+0x6c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f001 f8e7 	bl	8002542 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b07      	cmp	r3, #7
 800137e:	d809      	bhi.n	8001394 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f001 f8b3 	bl	80024f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_InitTick+0x74>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e007      	b.n	80013a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e004      	b.n	80013a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e001      	b.n	80013a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000018 	.word	0x20000018
 80013b4:	20000010 	.word	0x20000010
 80013b8:	20000014 	.word	0x20000014

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000018 	.word	0x20000018
 80013e0:	200004c0 	.word	0x200004c0

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	200004c0 	.word	0x200004c0

080013fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	609a      	str	r2, [r3, #8]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3360      	adds	r3, #96	; 0x60
 8001476:	461a      	mov	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <LL_ADC_SetOffset+0x44>)
 8001486:	4013      	ands	r3, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	4313      	orrs	r3, r2
 8001494:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800149c:	bf00      	nop
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	03fff000 	.word	0x03fff000

080014ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3360      	adds	r3, #96	; 0x60
 80014ba:	461a      	mov	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3360      	adds	r3, #96	; 0x60
 80014e8:	461a      	mov	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	615a      	str	r2, [r3, #20]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3330      	adds	r3, #48	; 0x30
 8001544:	461a      	mov	r2, r3
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	4413      	add	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	211f      	movs	r1, #31
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0e9b      	lsrs	r3, r3, #26
 800156c:	f003 011f 	and.w	r1, r3, #31
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3314      	adds	r3, #20
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	0e5b      	lsrs	r3, r3, #25
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	0d1b      	lsrs	r3, r3, #20
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2107      	movs	r1, #7
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	401a      	ands	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	0d1b      	lsrs	r3, r3, #20
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0318 	and.w	r3, r3, #24
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001608:	40d9      	lsrs	r1, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	400b      	ands	r3, r1
 800160e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	0007ffff 	.word	0x0007ffff

0800162c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800163c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6093      	str	r3, [r2, #8]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001664:	d101      	bne.n	800166a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001688:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016b4:	d101      	bne.n	80016ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <LL_ADC_IsEnabled+0x18>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <LL_ADC_IsEnabled+0x1a>
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d101      	bne.n	8001706 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b08      	cmp	r3, #8
 8001726:	d101      	bne.n	800172c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e12e      	b.n	80019b4 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff facf 	bl	8000d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff67 	bl	8001650 <LL_ADC_IsDeepPowerDownEnabled>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff4d 	bl	800162c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff82 	bl	80016a0 <LL_ADC_IsInternalRegulatorEnabled>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff66 	bl	8001678 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ac:	4b83      	ldr	r3, [pc, #524]	; (80019bc <HAL_ADC_Init+0x280>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	4a83      	ldr	r2, [pc, #524]	; (80019c0 <HAL_ADC_Init+0x284>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	3301      	adds	r3, #1
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff64 	bl	80016a0 <LL_ADC_IsInternalRegulatorEnabled>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	f043 0210 	orr.w	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff75 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 8001804:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 80c7 	bne.w	80019a2 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 80c3 	bne.w	80019a2 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001824:	f043 0202 	orr.w	r2, r3, #2
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff49 	bl	80016c8 <LL_ADC_IsEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d110      	bne.n	800185e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800183c:	4861      	ldr	r0, [pc, #388]	; (80019c4 <HAL_ADC_Init+0x288>)
 800183e:	f7ff ff43 	bl	80016c8 <LL_ADC_IsEnabled>
 8001842:	4604      	mov	r4, r0
 8001844:	4860      	ldr	r0, [pc, #384]	; (80019c8 <HAL_ADC_Init+0x28c>)
 8001846:	f7ff ff3f 	bl	80016c8 <LL_ADC_IsEnabled>
 800184a:	4603      	mov	r3, r0
 800184c:	4323      	orrs	r3, r4
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4619      	mov	r1, r3
 8001858:	485c      	ldr	r0, [pc, #368]	; (80019cc <HAL_ADC_Init+0x290>)
 800185a:	f7ff fdcf 	bl	80013fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7e5b      	ldrb	r3, [r3, #25]
 8001862:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001868:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800186e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001874:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	3b01      	subs	r3, #1
 8001892:	045b      	lsls	r3, r3, #17
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <HAL_ADC_Init+0x294>)
 80018be:	4013      	ands	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	69b9      	ldr	r1, [r7, #24]
 80018c6:	430b      	orrs	r3, r1
 80018c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff20 	bl	8001714 <LL_ADC_INJ_IsConversionOngoing>
 80018d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d140      	bne.n	800195e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d13d      	bne.n	800195e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7e1b      	ldrb	r3, [r3, #24]
 80018ea:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ec:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018f4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001904:	f023 0306 	bic.w	r3, r3, #6
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	69b9      	ldr	r1, [r7, #24]
 800190e:	430b      	orrs	r3, r1
 8001910:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001918:	2b01      	cmp	r3, #1
 800191a:	d118      	bne.n	800194e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001926:	f023 0304 	bic.w	r3, r3, #4
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001932:	4311      	orrs	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800193e:	430a      	orrs	r2, r1
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	e007      	b.n	800195e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d10c      	bne.n	8001980 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f023 010f 	bic.w	r1, r3, #15
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
 800197e:	e007      	b.n	8001990 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 020f 	bic.w	r2, r2, #15
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	f023 0303 	bic.w	r3, r3, #3
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	659a      	str	r2, [r3, #88]	; 0x58
 80019a0:	e007      	b.n	80019b2 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f043 0210 	orr.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3724      	adds	r7, #36	; 0x24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	20000010 	.word	0x20000010
 80019c0:	053e2d63 	.word	0x053e2d63
 80019c4:	42028000 	.word	0x42028000
 80019c8:	42028100 	.word	0x42028100
 80019cc:	42028300 	.word	0x42028300
 80019d0:	fff0c007 	.word	0xfff0c007

080019d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b0b7      	sub	sp, #220	; 0xdc
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x22>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e3c1      	b.n	800217a <HAL_ADC_ConfigChannel+0x7a6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fe73 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 83a6 	bne.w	800215c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f7ff fd89 	bl	8001534 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fe61 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 8001a2c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe6d 	bl	8001714 <LL_ADC_INJ_IsConversionOngoing>
 8001a3a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 81c1 	bne.w	8001dca <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 81bc 	bne.w	8001dca <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a5a:	d10f      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff fd90 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fd4a 	bl	800150e <LL_ADC_SetSamplingTimeCommonConfig>
 8001a7a:	e00e      	b.n	8001a9a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6819      	ldr	r1, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f7ff fd7f 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fd3a 	bl	800150e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d00a      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6919      	ldr	r1, [r3, #16]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001acc:	f7ff fcca 	bl	8001464 <LL_ADC_SetOffset>
 8001ad0:	e17b      	b.n	8001dca <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fce7 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10a      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x12a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fcdc 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	0e9b      	lsrs	r3, r3, #26
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	e01e      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x168>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fcd1 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	e004      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001b30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x180>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	e018      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1b2>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	e004      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d106      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fca0 	bl	80014d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fc84 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1f0>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fc79 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	0e9b      	lsrs	r3, r3, #26
 8001bbe:	f003 021f 	and.w	r2, r3, #31
 8001bc2:	e01e      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x22e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fc6e 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	e004      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x246>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	e018      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x278>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e004      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fc3d 	bl	80014d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2102      	movs	r1, #2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fc21 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10a      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x2b6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fc16 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	e01e      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x2f4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2102      	movs	r1, #2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fc0b 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e004      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x30c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	e016      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x33a>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001d00:	2320      	movs	r3, #32
 8001d02:	e004      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d106      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fbdc 	bl	80014d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2103      	movs	r1, #3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fbc0 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x378>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fbb5 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	f003 021f 	and.w	r2, r3, #31
 8001d4a:	e017      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x3a8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2103      	movs	r1, #3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fbaa 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d66:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e003      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x3c0>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	e011      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x3e4>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001da4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e003      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d106      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fb87 	bl	80014d8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fc7a 	bl	80016c8 <LL_ADC_IsEnabled>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 81c9 	bne.w	800216e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	461a      	mov	r2, r3
 8001dea:	f7ff fbfb 	bl	80015e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a8f      	ldr	r2, [pc, #572]	; (8002030 <HAL_ADC_ConfigChannel+0x65c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	f040 8131 	bne.w	800205c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10b      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x44e>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	3301      	adds	r3, #1
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2b09      	cmp	r3, #9
 8001e18:	bf94      	ite	ls
 8001e1a:	2301      	movls	r3, #1
 8001e1c:	2300      	movhi	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	e019      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x482>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e32:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	e003      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2b09      	cmp	r3, #9
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d079      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d107      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x4a2>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	069b      	lsls	r3, r3, #26
 8001e70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e74:	e015      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x4ce>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e86:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	e003      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	069b      	lsls	r3, r3, #26
 8001e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x4ee>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	0e9b      	lsrs	r3, r3, #26
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	e017      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x51e>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e003      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	ea42 0103 	orr.w	r1, r2, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10a      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x544>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 021f 	and.w	r2, r3, #31
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	051b      	lsls	r3, r3, #20
 8001f16:	e018      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x576>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f003 021f 	and.w	r2, r3, #31
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	e081      	b.n	8002052 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x596>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	3301      	adds	r3, #1
 8001f62:	069b      	lsls	r3, r3, #26
 8001f64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f68:	e015      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x5c2>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001f82:	2320      	movs	r3, #32
 8001f84:	e003      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	069b      	lsls	r3, r3, #26
 8001f92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x5e2>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	e017      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x612>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	e003      	b.n	8001fda <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	ea42 0103 	orr.w	r1, r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x63e>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0e9b      	lsrs	r3, r3, #26
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f003 021f 	and.w	r2, r3, #31
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	3b1e      	subs	r3, #30
 800200a:	051b      	lsls	r3, r3, #20
 800200c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002010:	e01e      	b.n	8002050 <HAL_ADC_ConfigChannel+0x67c>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	613b      	str	r3, [r7, #16]
  return result;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d104      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e006      	b.n	800203c <HAL_ADC_ConfigChannel+0x668>
 800202e:	bf00      	nop
 8002030:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f003 021f 	and.w	r2, r3, #31
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	3b1e      	subs	r3, #30
 800204a:	051b      	lsls	r3, r3, #20
 800204c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002050:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002056:	4619      	mov	r1, r3
 8002058:	f7ff fa98 	bl	800158c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b48      	ldr	r3, [pc, #288]	; (8002184 <HAL_ADC_ConfigChannel+0x7b0>)
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8082 	beq.w	800216e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800206a:	4847      	ldr	r0, [pc, #284]	; (8002188 <HAL_ADC_ConfigChannel+0x7b4>)
 800206c:	f7ff f9ec 	bl	8001448 <LL_ADC_GetCommonPathInternalCh>
 8002070:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002074:	4845      	ldr	r0, [pc, #276]	; (800218c <HAL_ADC_ConfigChannel+0x7b8>)
 8002076:	f7ff fb27 	bl	80016c8 <LL_ADC_IsEnabled>
 800207a:	4604      	mov	r4, r0
 800207c:	4844      	ldr	r0, [pc, #272]	; (8002190 <HAL_ADC_ConfigChannel+0x7bc>)
 800207e:	f7ff fb23 	bl	80016c8 <LL_ADC_IsEnabled>
 8002082:	4603      	mov	r3, r0
 8002084:	4323      	orrs	r3, r4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d15e      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a41      	ldr	r2, [pc, #260]	; (8002194 <HAL_ADC_ConfigChannel+0x7c0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d127      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d121      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a39      	ldr	r2, [pc, #228]	; (800218c <HAL_ADC_ConfigChannel+0x7b8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d161      	bne.n	800216e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020b2:	4619      	mov	r1, r3
 80020b4:	4834      	ldr	r0, [pc, #208]	; (8002188 <HAL_ADC_ConfigChannel+0x7b4>)
 80020b6:	f7ff f9b4 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_ADC_ConfigChannel+0x7c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	099b      	lsrs	r3, r3, #6
 80020c0:	4a36      	ldr	r2, [pc, #216]	; (800219c <HAL_ADC_ConfigChannel+0x7c8>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80020d2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020e2:	e044      	b.n	800216e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2d      	ldr	r2, [pc, #180]	; (80021a0 <HAL_ADC_ConfigChannel+0x7cc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d113      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a23      	ldr	r2, [pc, #140]	; (800218c <HAL_ADC_ConfigChannel+0x7b8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d134      	bne.n	800216e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002104:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210c:	4619      	mov	r1, r3
 800210e:	481e      	ldr	r0, [pc, #120]	; (8002188 <HAL_ADC_ConfigChannel+0x7b4>)
 8002110:	f7ff f987 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002114:	e02b      	b.n	800216e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <HAL_ADC_ConfigChannel+0x7d0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d126      	bne.n	800216e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d120      	bne.n	800216e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_ADC_ConfigChannel+0x7b8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d11b      	bne.n	800216e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002136:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800213a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213e:	4619      	mov	r1, r3
 8002140:	4811      	ldr	r0, [pc, #68]	; (8002188 <HAL_ADC_ConfigChannel+0x7b4>)
 8002142:	f7ff f96e 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
 8002146:	e012      	b.n	800216e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800215a:	e008      	b.n	800216e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002176:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800217a:	4618      	mov	r0, r3
 800217c:	37dc      	adds	r7, #220	; 0xdc
 800217e:	46bd      	mov	sp, r7
 8002180:	bd90      	pop	{r4, r7, pc}
 8002182:	bf00      	nop
 8002184:	80080000 	.word	0x80080000
 8002188:	42028300 	.word	0x42028300
 800218c:	42028000 	.word	0x42028000
 8002190:	42028100 	.word	0x42028100
 8002194:	c7520000 	.word	0xc7520000
 8002198:	20000010 	.word	0x20000010
 800219c:	053e2d63 	.word	0x053e2d63
 80021a0:	cb840000 	.word	0xcb840000
 80021a4:	80000001 	.word	0x80000001

080021a8 <LL_ADC_IsEnabled>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <LL_ADC_IsEnabled+0x18>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_ADC_IsEnabled+0x1a>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_REG_IsConversionOngoing>:
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d101      	bne.n	80021e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b0a1      	sub	sp, #132	; 0x84
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800220e:	2302      	movs	r3, #2
 8002210:	e089      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800221a:	2300      	movs	r3, #0
 800221c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800221e:	2300      	movs	r3, #0
 8002220:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a42      	ldr	r2, [pc, #264]	; (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d102      	bne.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800222c:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e001      	b.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e068      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ffb9 	bl	80021ce <LL_ADC_REG_IsConversionOngoing>
 800225c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ffb3 	bl	80021ce <LL_ADC_REG_IsConversionOngoing>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d14a      	bne.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800226e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002270:	2b00      	cmp	r3, #0
 8002272:	d147      	bne.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002274:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002276:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d027      	beq.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002292:	035b      	lsls	r3, r3, #13
 8002294:	430b      	orrs	r3, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800229a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800229c:	4824      	ldr	r0, [pc, #144]	; (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800229e:	f7ff ff83 	bl	80021a8 <LL_ADC_IsEnabled>
 80022a2:	4604      	mov	r4, r0
 80022a4:	4823      	ldr	r0, [pc, #140]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022a6:	f7ff ff7f 	bl	80021a8 <LL_ADC_IsEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4323      	orrs	r3, r4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d132      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022ba:	f023 030f 	bic.w	r3, r3, #15
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	6811      	ldr	r1, [r2, #0]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	6892      	ldr	r2, [r2, #8]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022cc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022ce:	e023      	b.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022dc:	4814      	ldr	r0, [pc, #80]	; (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80022de:	f7ff ff63 	bl	80021a8 <LL_ADC_IsEnabled>
 80022e2:	4604      	mov	r4, r0
 80022e4:	4813      	ldr	r0, [pc, #76]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022e6:	f7ff ff5f 	bl	80021a8 <LL_ADC_IsEnabled>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4323      	orrs	r3, r4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d112      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022fa:	f023 030f 	bic.w	r3, r3, #15
 80022fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002300:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002302:	e009      	b.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002316:	e000      	b.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002318:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002322:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002326:	4618      	mov	r0, r3
 8002328:	3784      	adds	r7, #132	; 0x84
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
 800232e:	bf00      	nop
 8002330:	42028000 	.word	0x42028000
 8002334:	42028100 	.word	0x42028100
 8002338:	42028300 	.word	0x42028300

0800233c <__NVIC_SetPriorityGrouping>:
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60d3      	str	r3, [r2, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_GetPriorityGrouping>:
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_GetPriorityGrouping+0x18>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0307 	and.w	r3, r3, #7
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_EnableIRQ>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db0b      	blt.n	80023ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <__NVIC_EnableIRQ+0x38>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2001      	movs	r0, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	; (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0152      	lsls	r2, r2, #5
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	; (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0152      	lsls	r2, r2, #5
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b03      	cmp	r3, #3
 800244c:	bf28      	it	cs
 800244e:	2303      	movcs	r3, #3
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3303      	adds	r3, #3
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b04      	subs	r3, #4
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <SysTick_Config>:
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a8:	d301      	bcc.n	80024ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00f      	b.n	80024ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <SysTick_Config+0x40>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b6:	2107      	movs	r1, #7
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f7ff ff8e 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <SysTick_Config+0x40>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <SysTick_Config+0x40>)
 80024c8:	2207      	movs	r2, #7
 80024ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	e000e010 	.word	0xe000e010

080024dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff29 	bl	800233c <__NVIC_SetPriorityGrouping>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff40 	bl	8002384 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff90 	bl	8002430 <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5f 	bl	80023dc <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff33 	bl	80023a0 <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa4 	bl	8002498 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800256a:	e158      	b.n	800281e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 814a 	beq.w	8002818 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d005      	beq.n	800259c <HAL_GPIO_Init+0x40>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d130      	bne.n	80025fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025d2:	2201      	movs	r2, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 0201 	and.w	r2, r3, #1
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b03      	cmp	r3, #3
 8002608:	d017      	beq.n	800263a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d123      	bne.n	800268e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	220f      	movs	r2, #15
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	08da      	lsrs	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	6939      	ldr	r1, [r7, #16]
 800268a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0203 	and.w	r2, r3, #3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80a4 	beq.w	8002818 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80026d0:	4a5a      	ldr	r2, [pc, #360]	; (800283c <HAL_GPIO_Init+0x2e0>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3318      	adds	r3, #24
 80026d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_GPIO_Init+0x2e4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d025      	beq.n	8002748 <HAL_GPIO_Init+0x1ec>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a51      	ldr	r2, [pc, #324]	; (8002844 <HAL_GPIO_Init+0x2e8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d01f      	beq.n	8002744 <HAL_GPIO_Init+0x1e8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a50      	ldr	r2, [pc, #320]	; (8002848 <HAL_GPIO_Init+0x2ec>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d019      	beq.n	8002740 <HAL_GPIO_Init+0x1e4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a4f      	ldr	r2, [pc, #316]	; (800284c <HAL_GPIO_Init+0x2f0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d013      	beq.n	800273c <HAL_GPIO_Init+0x1e0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a4e      	ldr	r2, [pc, #312]	; (8002850 <HAL_GPIO_Init+0x2f4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00d      	beq.n	8002738 <HAL_GPIO_Init+0x1dc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a4d      	ldr	r2, [pc, #308]	; (8002854 <HAL_GPIO_Init+0x2f8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <HAL_GPIO_Init+0x1d8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a4c      	ldr	r2, [pc, #304]	; (8002858 <HAL_GPIO_Init+0x2fc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_GPIO_Init+0x1d4>
 800272c:	2306      	movs	r3, #6
 800272e:	e00c      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002730:	2307      	movs	r3, #7
 8002732:	e00a      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002734:	2305      	movs	r3, #5
 8002736:	e008      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002738:	2304      	movs	r3, #4
 800273a:	e006      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 800273c:	2303      	movs	r3, #3
 800273e:	e004      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002740:	2302      	movs	r3, #2
 8002742:	e002      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002748:	2300      	movs	r3, #0
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	f002 0203 	and.w	r2, r2, #3
 8002750:	00d2      	lsls	r2, r2, #3
 8002752:	4093      	lsls	r3, r2
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800275a:	4938      	ldr	r1, [pc, #224]	; (800283c <HAL_GPIO_Init+0x2e0>)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3318      	adds	r3, #24
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_GPIO_Init+0x2e0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800278c:	4a2b      	ldr	r2, [pc, #172]	; (800283c <HAL_GPIO_Init+0x2e0>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002792:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_GPIO_Init+0x2e0>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027b6:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_GPIO_Init+0x2e0>)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <HAL_GPIO_Init+0x2e0>)
 80027be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_GPIO_Init+0x2e0>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_GPIO_Init+0x2e0>)
 80027ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_GPIO_Init+0x2e0>)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	f47f ae9f 	bne.w	800256c <HAL_GPIO_Init+0x10>
  }
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	4002f400 	.word	0x4002f400
 8002840:	42020000 	.word	0x42020000
 8002844:	42020400 	.word	0x42020400
 8002848:	42020800 	.word	0x42020800
 800284c:	42020c00 	.word	0x42020c00
 8002850:	42021000 	.word	0x42021000
 8002854:	42021400 	.word	0x42021400
 8002858:	42021800 	.word	0x42021800

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002878:	e002      	b.n	8002880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80028a2:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe f9d6 	bl	8000c5c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80028bc:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 f807 	bl	80028d8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	4002f400 	.word	0x4002f400

080028d8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e007      	b.n	800291e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 0204 	bic.w	r2, r3, #4
 8002916:	4905      	ldr	r1, [pc, #20]	; (800292c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40030400 	.word	0x40030400

08002930 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_ICACHE_Enable+0x1c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a04      	ldr	r2, [pc, #16]	; (800294c <HAL_ICACHE_Enable+0x1c>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	40030400 	.word	0x40030400

08002950 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002952:	b08b      	sub	sp, #44	; 0x2c
 8002954:	af06      	add	r7, sp, #24
 8002956:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0cb      	b.n	8002afa <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fabe 	bl	8000ef8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2203      	movs	r2, #3
 8002980:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f002 ffc1 	bl	8005910 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	e040      	b.n	8002a16 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	3301      	adds	r3, #1
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	3303      	adds	r3, #3
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	3338      	adds	r3, #56	; 0x38
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	333c      	adds	r3, #60	; 0x3c
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3340      	adds	r3, #64	; 0x40
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	3301      	adds	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3b9      	bcc.n	8002994 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e044      	b.n	8002ab0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	3301      	adds	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d3b5      	bcc.n	8002a26 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	687e      	ldr	r6, [r7, #4]
 8002ac2:	466d      	mov	r5, sp
 8002ac4:	f106 0410 	add.w	r4, r6, #16
 8002ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	602b      	str	r3, [r5, #0]
 8002ad0:	1d33      	adds	r3, r6, #4
 8002ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad4:	6838      	ldr	r0, [r7, #0]
 8002ad6:	f002 ff36 	bl	8005946 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f805 	bl	8002b02 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b02 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000

08002b78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40007000 	.word	0x40007000

08002b94 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ba4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002ba6:	f000 f861 	bl	8002c6c <HAL_PWREx_SMPS_GetEffectiveMode>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb0:	d101      	bne.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e03e      	b.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc2:	d101      	bne.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e035      	b.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d101      	bne.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e02f      	b.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002bdc:	4917      	ldr	r1, [pc, #92]	; (8002c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	09db      	lsrs	r3, r3, #7
 8002bf2:	2232      	movs	r2, #50	; 0x32
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	08db      	lsrs	r3, r3, #3
 8002c00:	3301      	adds	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c04:	e002      	b.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d102      	bne.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f2      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2c:	d101      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e000      	b.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40007000 	.word	0x40007000
 8002c40:	20000010 	.word	0x20000010
 8002c44:	0a7c5ac5 	.word	0x0a7c5ac5
 8002c48:	cccccccd 	.word	0xcccccccd

08002c4c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5a:	6053      	str	r3, [r2, #4]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40007000 	.word	0x40007000

08002c6c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002c72:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	e00a      	b.n	8002ca0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	e001      	b.n	8002ca0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002ca0:	687b      	ldr	r3, [r7, #4]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f000 bcc2 	b.w	800364c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc8:	4b99      	ldr	r3, [pc, #612]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd2:	4b97      	ldr	r3, [pc, #604]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80e9 	beq.w	8002ebc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d006      	beq.n	8002cfe <HAL_RCC_OscConfig+0x4a>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	f040 8083 	bne.w	8002dfe <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d17f      	bne.n	8002dfe <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cfe:	4b8c      	ldr	r3, [pc, #560]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <HAL_RCC_OscConfig+0x64>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f000 bc9a 	b.w	800364c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1c:	4b84      	ldr	r3, [pc, #528]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_RCC_OscConfig+0x7e>
 8002d28:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d30:	e005      	b.n	8002d3e <HAL_RCC_OscConfig+0x8a>
 8002d32:	4b7f      	ldr	r3, [pc, #508]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d224      	bcs.n	8002d8c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fe9c 	bl	8003a84 <RCC_SetFlashLatencyFromMSIRange>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f000 bc7a 	b.w	800364c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d58:	4b75      	ldr	r3, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a74      	ldr	r2, [pc, #464]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	f043 0308 	orr.w	r3, r3, #8
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	496f      	ldr	r1, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d76:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	496a      	ldr	r1, [pc, #424]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
 8002d8a:	e026      	b.n	8002dda <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a67      	ldr	r2, [pc, #412]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	f043 0308 	orr.w	r3, r3, #8
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	4962      	ldr	r1, [pc, #392]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002daa:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	495d      	ldr	r1, [pc, #372]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fe5b 	bl	8003a84 <RCC_SetFlashLatencyFromMSIRange>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f000 bc39 	b.w	800364c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dda:	f000 fe17 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4a54      	ldr	r2, [pc, #336]	; (8002f34 <HAL_RCC_OscConfig+0x280>)
 8002de2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002de4:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <HAL_RCC_OscConfig+0x284>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe faab 	bl	8001344 <HAL_InitTick>
 8002dee:	4603      	mov	r3, r0
 8002df0:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d060      	beq.n	8002eba <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	f000 bc27 	b.w	800364c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d039      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e06:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fae7 	bl	80013e4 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e18:	e00f      	b.n	8002e3a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fae3 	bl	80013e4 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d908      	bls.n	8002e3a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e28:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f000 bc09 	b.w	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0e9      	beq.n	8002e1a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e46:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a39      	ldr	r2, [pc, #228]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e4c:	f043 0308 	orr.w	r3, r3, #8
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	4934      	ldr	r1, [pc, #208]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e64:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	492f      	ldr	r1, [pc, #188]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
 8002e78:	e020      	b.n	8002ebc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e7a:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2c      	ldr	r2, [pc, #176]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e86:	f7fe faad 	bl	80013e4 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e8c:	e00e      	b.n	8002eac <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e8e:	f7fe faa9 	bl	80013e4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d907      	bls.n	8002eac <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e9c:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e3cf      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ea      	bne.n	8002e8e <HAL_RCC_OscConfig+0x1da>
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d07e      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d005      	beq.n	8002eda <HAL_RCC_OscConfig+0x226>
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d06e      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x310>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d16a      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e3ac      	b.n	800364c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x256>
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e024      	b.n	8002f54 <HAL_RCC_OscConfig+0x2a0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f12:	d113      	bne.n	8002f3c <HAL_RCC_OscConfig+0x288>
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a05      	ldr	r2, [pc, #20]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a02      	ldr	r2, [pc, #8]	; (8002f30 <HAL_RCC_OscConfig+0x27c>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e012      	b.n	8002f54 <HAL_RCC_OscConfig+0x2a0>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	20000010 	.word	0x20000010
 8002f38:	20000014 	.word	0x20000014
 8002f3c:	4b8b      	ldr	r3, [pc, #556]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a8a      	ldr	r2, [pc, #552]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a87      	ldr	r2, [pc, #540]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d019      	beq.n	8002f90 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fa42 	bl	80013e4 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f62:	e00e      	b.n	8002f82 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fa3e 	bl	80013e4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d907      	bls.n	8002f82 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f72:	4b7e      	ldr	r3, [pc, #504]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e364      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f82:	4b7a      	ldr	r3, [pc, #488]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0ea      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2b0>
 8002f8e:	e01a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fa28 	bl	80013e4 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f96:	e00e      	b.n	8002fb6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe fa24 	bl	80013e4 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d907      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fa6:	4b71      	ldr	r3, [pc, #452]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e34a      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ea      	bne.n	8002f98 <HAL_RCC_OscConfig+0x2e4>
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d06c      	beq.n	80030ac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x330>
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d119      	bne.n	8003012 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d116      	bne.n	8003012 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe4:	4b61      	ldr	r3, [pc, #388]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_OscConfig+0x348>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e327      	b.n	800364c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b5b      	ldr	r3, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	4958      	ldr	r1, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003010:	e04c      	b.n	80030ac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d029      	beq.n	800306e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301a:	4b54      	ldr	r3, [pc, #336]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a53      	ldr	r2, [pc, #332]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe f9dd 	bl	80013e4 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800302c:	e00e      	b.n	800304c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302e:	f7fe f9d9 	bl	80013e4 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d907      	bls.n	800304c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e2ff      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304c:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ea      	beq.n	800302e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b44      	ldr	r3, [pc, #272]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	4941      	ldr	r1, [pc, #260]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
 800306c:	e01e      	b.n	80030ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a3e      	ldr	r2, [pc, #248]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe f9b3 	bl	80013e4 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003080:	e00e      	b.n	80030a0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe f9af 	bl	80013e4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d907      	bls.n	80030a0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e2d5      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ea      	bne.n	8003082 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d062      	beq.n	800317e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d038      	beq.n	8003132 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d108      	bne.n	80030da <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 80030ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ce:	4a27      	ldr	r2, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 80030d0:	f023 0310 	bic.w	r3, r3, #16
 80030d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80030d8:	e007      	b.n	80030ea <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e0:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 80030e2:	f043 0310 	orr.w	r3, r3, #16
 80030e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 80030ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f0:	4a1e      	ldr	r2, [pc, #120]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fe f973 	bl	80013e4 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003100:	e00f      	b.n	8003122 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003102:	f7fe f96f 	bl	80013e4 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b07      	cmp	r3, #7
 800310e:	d908      	bls.n	8003122 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e294      	b.n	800364c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8003124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0e8      	beq.n	8003102 <HAL_RCC_OscConfig+0x44e>
 8003130:	e025      	b.n	800317e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 8003134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003138:	4a0c      	ldr	r2, [pc, #48]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7fe f94f 	bl	80013e4 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003148:	e012      	b.n	8003170 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314a:	f7fe f94b 	bl	80013e4 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b07      	cmp	r3, #7
 8003156:	d90b      	bls.n	8003170 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e270      	b.n	800364c <HAL_RCC_OscConfig+0x998>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003170:	4ba8      	ldr	r3, [pc, #672]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1e5      	bne.n	800314a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 812d 	beq.w	80033e6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318c:	2300      	movs	r3, #0
 800318e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003190:	4ba0      	ldr	r3, [pc, #640]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10d      	bne.n	80031b8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b9d      	ldr	r3, [pc, #628]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	4a9c      	ldr	r2, [pc, #624]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6593      	str	r3, [r2, #88]	; 0x58
 80031a8:	4b9a      	ldr	r3, [pc, #616]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b4:	2301      	movs	r3, #1
 80031b6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	4b97      	ldr	r3, [pc, #604]	; (8003418 <HAL_RCC_OscConfig+0x764>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11e      	bne.n	8003202 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b94      	ldr	r3, [pc, #592]	; (8003418 <HAL_RCC_OscConfig+0x764>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a93      	ldr	r2, [pc, #588]	; (8003418 <HAL_RCC_OscConfig+0x764>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d0:	f7fe f908 	bl	80013e4 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d6:	e00e      	b.n	80031f6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fe f904 	bl	80013e4 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d907      	bls.n	80031f6 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e6:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <HAL_RCC_OscConfig+0x764>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e22a      	b.n	800364c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f6:	4b88      	ldr	r3, [pc, #544]	; (8003418 <HAL_RCC_OscConfig+0x764>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ea      	beq.n	80031d8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01f      	beq.n	800324e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d010      	beq.n	800323c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800321a:	4b7e      	ldr	r3, [pc, #504]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	4a7c      	ldr	r2, [pc, #496]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800322a:	4b7a      	ldr	r3, [pc, #488]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	4a78      	ldr	r2, [pc, #480]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800323a:	e018      	b.n	800326e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800323c:	4b75      	ldr	r3, [pc, #468]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	4a74      	ldr	r2, [pc, #464]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324c:	e00f      	b.n	800326e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800324e:	4b71      	ldr	r3, [pc, #452]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	4a6f      	ldr	r2, [pc, #444]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800325e:	4b6d      	ldr	r3, [pc, #436]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	4a6b      	ldr	r2, [pc, #428]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003266:	f023 0304 	bic.w	r3, r3, #4
 800326a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d068      	beq.n	8003348 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe f8b5 	bl	80013e4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327c:	e011      	b.n	80032a2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe f8b1 	bl	80013e4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d908      	bls.n	80032a2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003290:	4b60      	ldr	r3, [pc, #384]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1d4      	b.n	800364c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	4b5c      	ldr	r3, [pc, #368]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0e6      	beq.n	800327e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d022      	beq.n	8003302 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032bc:	4b55      	ldr	r3, [pc, #340]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	4a54      	ldr	r2, [pc, #336]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80032c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032cc:	e011      	b.n	80032f2 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe f889 	bl	80013e4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d908      	bls.n	80032f2 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032e0:	4b4c      	ldr	r3, [pc, #304]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e1ac      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032f2:	4b48      	ldr	r3, [pc, #288]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0e6      	beq.n	80032ce <HAL_RCC_OscConfig+0x61a>
 8003300:	e068      	b.n	80033d4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003302:	4b44      	ldr	r3, [pc, #272]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	4a42      	ldr	r2, [pc, #264]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 800330a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003312:	e011      	b.n	8003338 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe f866 	bl	80013e4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d908      	bls.n	8003338 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e189      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003338:	4b36      	ldr	r3, [pc, #216]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e6      	bne.n	8003314 <HAL_RCC_OscConfig+0x660>
 8003346:	e045      	b.n	80033d4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fe f84c 	bl	80013e4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800334e:	e011      	b.n	8003374 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fe f848 	bl	80013e4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d908      	bls.n	8003374 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003362:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e16b      	b.n	800364c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e6      	bne.n	8003350 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	d021      	beq.n	80033d4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003390:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800339c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033a0:	e011      	b.n	80033c6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe f81f 	bl	80013e4 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d908      	bls.n	80033c6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033b4:	4b17      	ldr	r3, [pc, #92]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e142      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033c6:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e6      	bne.n	80033a2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d4:	7ffb      	ldrb	r3, [r7, #31]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80033e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d04f      	beq.n	8003492 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d028      	beq.n	800344c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 80033fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003400:	4a04      	ldr	r2, [pc, #16]	; (8003414 <HAL_RCC_OscConfig+0x760>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fd ffeb 	bl	80013e4 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003410:	e014      	b.n	800343c <HAL_RCC_OscConfig+0x788>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800341c:	f7fd ffe2 	bl	80013e4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d908      	bls.n	800343c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800342a:	4b8a      	ldr	r3, [pc, #552]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 800342c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e107      	b.n	800364c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800343c:	4b85      	ldr	r3, [pc, #532]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 800343e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0e8      	beq.n	800341c <HAL_RCC_OscConfig+0x768>
 800344a:	e022      	b.n	8003492 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800344c:	4b81      	ldr	r3, [pc, #516]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 800344e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003452:	4a80      	ldr	r2, [pc, #512]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345c:	f7fd ffc2 	bl	80013e4 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003462:	e00f      	b.n	8003484 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003464:	f7fd ffbe 	bl	80013e4 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d908      	bls.n	8003484 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003472:	4b78      	ldr	r3, [pc, #480]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0e3      	b.n	800364c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003484:	4b73      	ldr	r3, [pc, #460]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e8      	bne.n	8003464 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80d7 	beq.w	800364a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349c:	4b6d      	ldr	r3, [pc, #436]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	f000 8091 	beq.w	80035cc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d166      	bne.n	8003580 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	4b68      	ldr	r3, [pc, #416]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a67      	ldr	r2, [pc, #412]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80034b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd ff91 	bl	80013e4 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c4:	e00e      	b.n	80034e4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fd ff8d 	bl	80013e4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d907      	bls.n	80034e4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	4b5f      	ldr	r3, [pc, #380]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0b3      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e4:	4b5b      	ldr	r3, [pc, #364]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ea      	bne.n	80034c6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f0:	4b58      	ldr	r3, [pc, #352]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	4b58      	ldr	r3, [pc, #352]	; (8003658 <HAL_RCC_OscConfig+0x9a4>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003500:	3a01      	subs	r2, #1
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	4311      	orrs	r1, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800350a:	0212      	lsls	r2, r2, #8
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003512:	0852      	lsrs	r2, r2, #1
 8003514:	3a01      	subs	r2, #1
 8003516:	0552      	lsls	r2, r2, #21
 8003518:	4311      	orrs	r1, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800351e:	0852      	lsrs	r2, r2, #1
 8003520:	3a01      	subs	r2, #1
 8003522:	0652      	lsls	r2, r2, #25
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800352a:	06d2      	lsls	r2, r2, #27
 800352c:	430a      	orrs	r2, r1
 800352e:	4949      	ldr	r1, [pc, #292]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b47      	ldr	r3, [pc, #284]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a46      	ldr	r2, [pc, #280]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003540:	4b44      	ldr	r3, [pc, #272]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a43      	ldr	r2, [pc, #268]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd ff4a 	bl	80013e4 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	e00e      	b.n	8003572 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd ff46 	bl	80013e4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d907      	bls.n	8003572 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003562:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e06c      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0ea      	beq.n	8003554 <HAL_RCC_OscConfig+0x8a0>
 800357e:	e064      	b.n	800364a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a33      	ldr	r2, [pc, #204]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 8003586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800358a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd ff2a 	bl	80013e4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003592:	e00e      	b.n	80035b2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd ff26 	bl	80013e4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d907      	bls.n	80035b2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a2:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e04c      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b2:	4b28      	ldr	r3, [pc, #160]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ea      	bne.n	8003594 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035be:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	4924      	ldr	r1, [pc, #144]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_OscConfig+0x9a8>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	60cb      	str	r3, [r1, #12]
 80035ca:	e03e      	b.n	800364a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e039      	b.n	800364c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80035d8:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <HAL_RCC_OscConfig+0x9a0>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 0203 	and.w	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d12c      	bne.n	8003646 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	3b01      	subs	r3, #1
 80035f8:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d123      	bne.n	8003646 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d11b      	bne.n	8003646 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d113      	bne.n	8003646 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	3b01      	subs	r3, #1
 800362c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d109      	bne.n	8003646 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	019f800c 	.word	0x019f800c
 800365c:	feeefffc 	.word	0xfeeefffc

08003660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e11c      	b.n	80038b2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003678:	4b90      	ldr	r3, [pc, #576]	; (80038bc <HAL_RCC_ClockConfig+0x25c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d910      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b8d      	ldr	r3, [pc, #564]	; (80038bc <HAL_RCC_ClockConfig+0x25c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 020f 	bic.w	r2, r3, #15
 800368e:	498b      	ldr	r1, [pc, #556]	; (80038bc <HAL_RCC_ClockConfig+0x25c>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b89      	ldr	r3, [pc, #548]	; (80038bc <HAL_RCC_ClockConfig+0x25c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e104      	b.n	80038b2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d010      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b81      	ldr	r3, [pc, #516]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d908      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b7e      	ldr	r3, [pc, #504]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	497b      	ldr	r1, [pc, #492]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8085 	beq.w	80037ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d11f      	bne.n	800372c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ec:	4b74      	ldr	r3, [pc, #464]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0da      	b.n	80038b2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036fc:	f000 fa26 	bl	8003b4c <RCC_GetSysClockFreqFromPLLSource>
 8003700:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4a6f      	ldr	r2, [pc, #444]	; (80038c4 <HAL_RCC_ClockConfig+0x264>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d947      	bls.n	800379a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800370a:	4b6d      	ldr	r3, [pc, #436]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d141      	bne.n	800379a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003716:	4b6a      	ldr	r3, [pc, #424]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800371e:	4a68      	ldr	r2, [pc, #416]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003724:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e036      	b.n	800379a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d107      	bne.n	8003744 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003734:	4b62      	ldr	r3, [pc, #392]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d115      	bne.n	800376c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0b6      	b.n	80038b2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800374c:	4b5c      	ldr	r3, [pc, #368]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0aa      	b.n	80038b2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375c:	4b58      	ldr	r3, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0a2      	b.n	80038b2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800376c:	f000 f8b0 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8003770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4a53      	ldr	r2, [pc, #332]	; (80038c4 <HAL_RCC_ClockConfig+0x264>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d90f      	bls.n	800379a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800377a:	4b51      	ldr	r3, [pc, #324]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003786:	4b4e      	ldr	r3, [pc, #312]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378e:	4a4c      	ldr	r2, [pc, #304]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003794:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800379a:	4b49      	ldr	r3, [pc, #292]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f023 0203 	bic.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4946      	ldr	r1, [pc, #280]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ac:	f7fd fe1a 	bl	80013e4 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	e013      	b.n	80037dc <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b4:	f7fd fe16 	bl	80013e4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d90a      	bls.n	80037dc <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e06a      	b.n	80038b2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037dc:	4b38      	ldr	r3, [pc, #224]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 020c 	and.w	r2, r3, #12
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d1e2      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b80      	cmp	r3, #128	; 0x80
 80037f2:	d105      	bne.n	8003800 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037f4:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a31      	ldr	r2, [pc, #196]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80037fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037fe:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003818:	429a      	cmp	r2, r3
 800381a:	d208      	bcs.n	800382e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4925      	ldr	r1, [pc, #148]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800382e:	4b23      	ldr	r3, [pc, #140]	; (80038bc <HAL_RCC_ClockConfig+0x25c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d210      	bcs.n	800385e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383c:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <HAL_RCC_ClockConfig+0x25c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 020f 	bic.w	r2, r3, #15
 8003844:	491d      	ldr	r1, [pc, #116]	; (80038bc <HAL_RCC_ClockConfig+0x25c>)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCC_ClockConfig+0x25c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e029      	b.n	80038b2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4912      	ldr	r1, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	490a      	ldr	r1, [pc, #40]	; (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800389c:	f000 f8b6 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x268>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fd4a 	bl	8001344 <HAL_InitTick>
 80038b0:	4603      	mov	r3, r0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40021000 	.word	0x40021000
 80038c4:	04c4b400 	.word	0x04c4b400
 80038c8:	20000010 	.word	0x20000010
 80038cc:	20000014 	.word	0x20000014

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e8:	4b44      	ldr	r3, [pc, #272]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x34>
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d121      	bne.n	8003942 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d11e      	bne.n	8003942 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003904:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003910:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	e005      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003920:	4b36      	ldr	r3, [pc, #216]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800392c:	4a34      	ldr	r2, [pc, #208]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x130>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003934:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10d      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b04      	cmp	r3, #4
 8003946:	d102      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003948:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x134>)
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e004      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d101      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003954:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x138>)
 8003956:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d146      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3301      	adds	r3, #1
 8003974:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d003      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0xb4>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b03      	cmp	r3, #3
 8003980:	d00d      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xce>
 8003982:	e019      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003984:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x134>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 800398e:	68d2      	ldr	r2, [r2, #12]
 8003990:	0a12      	lsrs	r2, r2, #8
 8003992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	617b      	str	r3, [r7, #20]
        break;
 800399c:	e019      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800399e:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x138>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	4a15      	ldr	r2, [pc, #84]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80039a8:	68d2      	ldr	r2, [r2, #12]
 80039aa:	0a12      	lsrs	r2, r2, #8
 80039ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039b0:	fb02 f303 	mul.w	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
        break;
 80039b6:	e00c      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80039c2:	68d2      	ldr	r2, [r2, #12]
 80039c4:	0a12      	lsrs	r2, r2, #8
 80039c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	617b      	str	r3, [r7, #20]
        break;
 80039d0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	0e5b      	lsrs	r3, r3, #25
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	3301      	adds	r3, #1
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ec:	69bb      	ldr	r3, [r7, #24]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	080062f8 	.word	0x080062f8
 8003a04:	00f42400 	.word	0x00f42400
 8003a08:	007a1200 	.word	0x007a1200

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003a10:	f7ff ff5e 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x20>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	4903      	ldr	r1, [pc, #12]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	080062e0 	.word	0x080062e0

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a38:	f7ff ffe8 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4903      	ldr	r1, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	080062f0 	.word	0x080062f0

08003a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a60:	f7ff ffd4 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0adb      	lsrs	r3, r3, #11
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	080062f0 	.word	0x080062f0

08003a84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a90:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a9c:	f7ff f86c 	bl	8002b78 <HAL_PWREx_GetVoltageRange>
 8003aa0:	6138      	str	r0, [r7, #16]
 8003aa2:	e014      	b.n	8003ace <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aae:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003abc:	f7ff f85c 	bl	8002b78 <HAL_PWREx_GetVoltageRange>
 8003ac0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ada:	d10b      	bne.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b80      	cmp	r3, #128	; 0x80
 8003ae0:	d919      	bls.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2ba0      	cmp	r3, #160	; 0xa0
 8003ae6:	d902      	bls.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ae8:	2302      	movs	r3, #2
 8003aea:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003aec:	e013      	b.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aee:	2301      	movs	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003af2:	e010      	b.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b80      	cmp	r3, #128	; 0x80
 8003af8:	d902      	bls.n	8003b00 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003afa:	2303      	movs	r3, #3
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e00a      	b.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d102      	bne.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b06:	2302      	movs	r3, #2
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e004      	b.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b70      	cmp	r3, #112	; 0x70
 8003b10:	d101      	bne.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 020f 	bic.w	r2, r3, #15
 8003b1e:	490a      	ldr	r1, [pc, #40]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40022000 	.word	0x40022000

08003b4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b52:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b5c:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	3301      	adds	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d015      	beq.n	8003b9c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d839      	bhi.n	8003bea <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d01c      	beq.n	8003bb6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d133      	bne.n	8003bea <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b82:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b8c:	68d2      	ldr	r2, [r2, #12]
 8003b8e:	0a12      	lsrs	r2, r2, #8
 8003b90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	613b      	str	r3, [r7, #16]
      break;
 8003b9a:	e029      	b.n	8003bf0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ba6:	68d2      	ldr	r2, [r2, #12]
 8003ba8:	0a12      	lsrs	r2, r2, #8
 8003baa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	613b      	str	r3, [r7, #16]
      break;
 8003bb4:	e01c      	b.n	8003bf0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d107      	bne.n	8003bd2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e005      	b.n	8003bde <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003bde:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be6:	613b      	str	r3, [r7, #16]
        break;
 8003be8:	e002      	b.n	8003bf0 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
      break;
 8003bee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0e5b      	lsrs	r3, r3, #25
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c0a:	683b      	ldr	r3, [r7, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	00f42400 	.word	0x00f42400
 8003c20:	007a1200 	.word	0x007a1200
 8003c24:	080062f8 	.word	0x080062f8

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c30:	2300      	movs	r3, #0
 8003c32:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d040      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d02a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c4c:	2b80      	cmp	r3, #128	; 0x80
 8003c4e:	d825      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c50:	2b60      	cmp	r3, #96	; 0x60
 8003c52:	d026      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c54:	2b60      	cmp	r3, #96	; 0x60
 8003c56:	d821      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d006      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d81d      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d010      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003c68:	e018      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c6a:	4b8f      	ldr	r3, [pc, #572]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4a8e      	ldr	r2, [pc, #568]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c76:	e015      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fb56 	bl	8004330 <RCCEx_PLLSAI1_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3320      	adds	r3, #32
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fc33 	bl	80044fc <RCCEx_PLLSAI2_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77fb      	strb	r3, [r7, #31]
        break;
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca4:	7ffb      	ldrb	r3, [r7, #31]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003caa:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cb0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb8:	497b      	ldr	r1, [pc, #492]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003cc0:	e001      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc2:	7ffb      	ldrb	r3, [r7, #31]
 8003cc4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d047      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cda:	d030      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce0:	d82a      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ce6:	d02a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cec:	d824      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf8:	d81e      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	d010      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d04:	e018      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d06:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4a67      	ldr	r2, [pc, #412]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d12:	e015      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fb08 	bl	8004330 <RCCEx_PLLSAI1_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d24:	e00c      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3320      	adds	r3, #32
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fbe5 	bl	80044fc <RCCEx_PLLSAI2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d36:	e003      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	77fb      	strb	r3, [r7, #31]
        break;
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d40:	7ffb      	ldrb	r3, [r7, #31]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d46:	4b58      	ldr	r3, [pc, #352]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4954      	ldr	r1, [pc, #336]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d5c:	e001      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
 8003d60:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80ab 	beq.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d74:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d80:	4b49      	ldr	r3, [pc, #292]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	4a48      	ldr	r2, [pc, #288]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d8c:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9c:	4b43      	ldr	r3, [pc, #268]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a42      	ldr	r2, [pc, #264]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da8:	f7fd fb1c 	bl	80013e4 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dae:	e00f      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fd fb18 	bl	80013e4 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d908      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003dce:	e006      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd0:	4b36      	ldr	r3, [pc, #216]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0e9      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003dde:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003de0:	7ffb      	ldrb	r3, [r7, #31]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d164      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01f      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d019      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e04:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a20      	ldr	r2, [pc, #128]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e30:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01f      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fd facf 	bl	80013e4 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e48:	e012      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fd facb 	bl	80013e4 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d909      	bls.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003e6e:	e007      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0e5      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003e80:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10c      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	4903      	ldr	r1, [pc, #12]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea2:	7ffb      	ldrb	r3, [r7, #31]
 8003ea4:	77bb      	strb	r3, [r7, #30]
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	7ffb      	ldrb	r3, [r7, #31]
 8003eb2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eba:	4b9c      	ldr	r3, [pc, #624]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	4a9b      	ldr	r2, [pc, #620]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed2:	4b96      	ldr	r3, [pc, #600]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f023 0203 	bic.w	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	4992      	ldr	r1, [pc, #584]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef4:	4b8d      	ldr	r3, [pc, #564]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f023 020c 	bic.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	498a      	ldr	r1, [pc, #552]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f16:	4b85      	ldr	r3, [pc, #532]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	4981      	ldr	r1, [pc, #516]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f38:	4b7c      	ldr	r3, [pc, #496]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	4979      	ldr	r1, [pc, #484]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f5a:	4b74      	ldr	r3, [pc, #464]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	4970      	ldr	r1, [pc, #448]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f7c:	4b6b      	ldr	r3, [pc, #428]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8a:	4968      	ldr	r1, [pc, #416]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f9e:	4b63      	ldr	r3, [pc, #396]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	495f      	ldr	r1, [pc, #380]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc0:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	4957      	ldr	r1, [pc, #348]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003fe2:	4b52      	ldr	r3, [pc, #328]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff0:	494e      	ldr	r1, [pc, #312]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d031      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800400c:	d00e      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800400e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004012:	d814      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d015      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800401c:	d10f      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401e:	4b43      	ldr	r3, [pc, #268]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4a42      	ldr	r2, [pc, #264]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004028:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800402a:	e00c      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f97c 	bl	8004330 <RCCEx_PLLSAI1_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800403c:	e003      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	77fb      	strb	r3, [r7, #31]
        break;
 8004042:	e000      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004046:	7ffb      	ldrb	r3, [r7, #31]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800404c:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800405a:	4934      	ldr	r1, [pc, #208]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004062:	e001      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	7ffb      	ldrb	r3, [r7, #31]
 8004066:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004074:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	492a      	ldr	r1, [pc, #168]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004096:	4b25      	ldr	r3, [pc, #148]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a4:	4921      	ldr	r1, [pc, #132]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	4919      	ldr	r1, [pc, #100]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e0:	f023 0203 	bic.w	r2, r3, #3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	4910      	ldr	r1, [pc, #64]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d02b      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410a:	4908      	ldr	r1, [pc, #32]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800411a:	d109      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a02      	ldr	r2, [pc, #8]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004126:	60d3      	str	r3, [r2, #12]
 8004128:	e014      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004138:	d10c      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3304      	adds	r3, #4
 800413e:	2101      	movs	r1, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f8f5 	bl	8004330 <RCCEx_PLLSAI1_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800414a:	7ffb      	ldrb	r3, [r7, #31]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004150:	7ffb      	ldrb	r3, [r7, #31]
 8004152:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d04a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004168:	d108      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x554>
 800416a:	4b70      	ldr	r3, [pc, #448]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800416c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004170:	4a6e      	ldr	r2, [pc, #440]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004176:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800417a:	e012      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800417c:	4b6b      	ldr	r3, [pc, #428]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418a:	4968      	ldr	r1, [pc, #416]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004192:	4b66      	ldr	r3, [pc, #408]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004194:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004198:	4a64      	ldr	r2, [pc, #400]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800419a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800419e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041aa:	d10d      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	2101      	movs	r1, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f8bc 	bl	8004330 <RCCEx_PLLSAI1_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80041bc:	7ffb      	ldrb	r3, [r7, #31]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d019      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80041c2:	7ffb      	ldrb	r3, [r7, #31]
 80041c4:	77bb      	strb	r3, [r7, #30]
 80041c6:	e016      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d0:	d106      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d2:	4b56      	ldr	r3, [pc, #344]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4a55      	ldr	r2, [pc, #340]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041dc:	60d3      	str	r3, [r2, #12]
 80041de:	e00a      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e8:	d105      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041ea:	4b50      	ldr	r3, [pc, #320]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	4a4f      	ldr	r2, [pc, #316]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d028      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004202:	4b4a      	ldr	r3, [pc, #296]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004210:	4946      	ldr	r1, [pc, #280]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800421c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004220:	d106      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004222:	4b42      	ldr	r3, [pc, #264]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4a41      	ldr	r2, [pc, #260]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422c:	60d3      	str	r3, [r2, #12]
 800422e:	e011      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004238:	d10c      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f000 f875 	bl	8004330 <RCCEx_PLLSAI1_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800424a:	7ffb      	ldrb	r3, [r7, #31]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004250:	7ffb      	ldrb	r3, [r7, #31]
 8004252:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01e      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004270:	492e      	ldr	r1, [pc, #184]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004282:	d10c      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	2102      	movs	r1, #2
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f850 	bl	8004330 <RCCEx_PLLSAI1_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004294:	7ffb      	ldrb	r3, [r7, #31]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800429a:	7ffb      	ldrb	r3, [r7, #31]
 800429c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00b      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b0:	f023 0204 	bic.w	r2, r3, #4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ba:	491c      	ldr	r1, [pc, #112]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042ce:	4b17      	ldr	r3, [pc, #92]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d4:	f023 0218 	bic.w	r2, r3, #24
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	4913      	ldr	r1, [pc, #76]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d017      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042f2:	4b0e      	ldr	r3, [pc, #56]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004302:	490a      	ldr	r1, [pc, #40]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004314:	d105      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800431c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004320:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004322:	7fbb      	ldrb	r3, [r7, #30]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000

08004330 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d018      	beq.n	8004378 <RCCEx_PLLSAI1_Config+0x48>
 8004346:	2b03      	cmp	r3, #3
 8004348:	d81f      	bhi.n	800438a <RCCEx_PLLSAI1_Config+0x5a>
 800434a:	2b01      	cmp	r3, #1
 800434c:	d002      	beq.n	8004354 <RCCEx_PLLSAI1_Config+0x24>
 800434e:	2b02      	cmp	r3, #2
 8004350:	d009      	beq.n	8004366 <RCCEx_PLLSAI1_Config+0x36>
 8004352:	e01a      	b.n	800438a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004354:	4b65      	ldr	r3, [pc, #404]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d117      	bne.n	8004390 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004364:	e014      	b.n	8004390 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004366:	4b61      	ldr	r3, [pc, #388]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436e:	2b00      	cmp	r3, #0
 8004370:	d110      	bne.n	8004394 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004376:	e00d      	b.n	8004394 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004378:	4b5c      	ldr	r3, [pc, #368]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004388:	e006      	b.n	8004398 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
      break;
 800438e:	e004      	b.n	800439a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004390:	bf00      	nop
 8004392:	e002      	b.n	800439a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004398:	bf00      	nop
  }

  if (status == HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 809f 	bne.w	80044e0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043a2:	4b52      	ldr	r3, [pc, #328]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a51      	ldr	r2, [pc, #324]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80043a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ae:	f7fd f819 	bl	80013e4 <HAL_GetTick>
 80043b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043b4:	e00f      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b6:	f7fd f815 	bl	80013e4 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d908      	bls.n	80043d6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043c4:	4b49      	ldr	r3, [pc, #292]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043d4:	e006      	b.n	80043e4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043d6:	4b45      	ldr	r3, [pc, #276]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e9      	bne.n	80043b6 <RCCEx_PLLSAI1_Config+0x86>
 80043e2:	e000      	b.n	80043e6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80043e4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d179      	bne.n	80044e0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043f2:	4b3e      	ldr	r3, [pc, #248]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <RCCEx_PLLSAI1_Config+0x1c0>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6892      	ldr	r2, [r2, #8]
 80043fe:	0211      	lsls	r1, r2, #8
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68d2      	ldr	r2, [r2, #12]
 8004404:	06d2      	lsls	r2, r2, #27
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6852      	ldr	r2, [r2, #4]
 800440c:	3a01      	subs	r2, #1
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	4934      	ldr	r1, [pc, #208]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	610b      	str	r3, [r1, #16]
 800441e:	e033      	b.n	8004488 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d118      	bne.n	8004458 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004426:	4b31      	ldr	r3, [pc, #196]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	4b32      	ldr	r3, [pc, #200]	; (80044f4 <RCCEx_PLLSAI1_Config+0x1c4>)
 800442c:	4013      	ands	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6892      	ldr	r2, [r2, #8]
 8004432:	0211      	lsls	r1, r2, #8
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6912      	ldr	r2, [r2, #16]
 8004438:	0852      	lsrs	r2, r2, #1
 800443a:	3a01      	subs	r2, #1
 800443c:	0552      	lsls	r2, r2, #21
 800443e:	4311      	orrs	r1, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6852      	ldr	r2, [r2, #4]
 8004444:	3a01      	subs	r2, #1
 8004446:	0112      	lsls	r2, r2, #4
 8004448:	4311      	orrs	r1, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	4926      	ldr	r1, [pc, #152]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	610b      	str	r3, [r1, #16]
 8004456:	e017      	b.n	8004488 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1c8>)
 800445e:	4013      	ands	r3, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6892      	ldr	r2, [r2, #8]
 8004464:	0211      	lsls	r1, r2, #8
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6952      	ldr	r2, [r2, #20]
 800446a:	0852      	lsrs	r2, r2, #1
 800446c:	3a01      	subs	r2, #1
 800446e:	0652      	lsls	r2, r2, #25
 8004470:	4311      	orrs	r1, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6852      	ldr	r2, [r2, #4]
 8004476:	3a01      	subs	r2, #1
 8004478:	0112      	lsls	r2, r2, #4
 800447a:	4311      	orrs	r1, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	491a      	ldr	r1, [pc, #104]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8004484:	4313      	orrs	r3, r2
 8004486:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004488:	4b18      	ldr	r3, [pc, #96]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a17      	ldr	r2, [pc, #92]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800448e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004492:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fc ffa6 	bl	80013e4 <HAL_GetTick>
 8004498:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800449a:	e00f      	b.n	80044bc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800449c:	f7fc ffa2 	bl	80013e4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d908      	bls.n	80044bc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80044ba:	e006      	b.n	80044ca <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0e9      	beq.n	800449c <RCCEx_PLLSAI1_Config+0x16c>
 80044c8:	e000      	b.n	80044cc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80044ca:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	4904      	ldr	r1, [pc, #16]	; (80044ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	07ff800c 	.word	0x07ff800c
 80044f4:	ff9f800c 	.word	0xff9f800c
 80044f8:	f9ff800c 	.word	0xf9ff800c

080044fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d018      	beq.n	8004544 <RCCEx_PLLSAI2_Config+0x48>
 8004512:	2b03      	cmp	r3, #3
 8004514:	d81f      	bhi.n	8004556 <RCCEx_PLLSAI2_Config+0x5a>
 8004516:	2b01      	cmp	r3, #1
 8004518:	d002      	beq.n	8004520 <RCCEx_PLLSAI2_Config+0x24>
 800451a:	2b02      	cmp	r3, #2
 800451c:	d009      	beq.n	8004532 <RCCEx_PLLSAI2_Config+0x36>
 800451e:	e01a      	b.n	8004556 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004520:	4b4a      	ldr	r3, [pc, #296]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d117      	bne.n	800455c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004530:	e014      	b.n	800455c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004532:	4b46      	ldr	r3, [pc, #280]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453a:	2b00      	cmp	r3, #0
 800453c:	d110      	bne.n	8004560 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004542:	e00d      	b.n	8004560 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004544:	4b41      	ldr	r3, [pc, #260]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004554:	e006      	b.n	8004564 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
      break;
 800455a:	e004      	b.n	8004566 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800455c:	bf00      	nop
 800455e:	e002      	b.n	8004566 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004560:	bf00      	nop
 8004562:	e000      	b.n	8004566 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004564:	bf00      	nop
  }

  if (status == HAL_OK)
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d169      	bne.n	8004640 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800456c:	4b37      	ldr	r3, [pc, #220]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a36      	ldr	r2, [pc, #216]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fc ff34 	bl	80013e4 <HAL_GetTick>
 800457c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800457e:	e00f      	b.n	80045a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004580:	f7fc ff30 	bl	80013e4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d908      	bls.n	80045a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800458e:	4b2f      	ldr	r3, [pc, #188]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800459e:	e006      	b.n	80045ae <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045a0:	4b2a      	ldr	r3, [pc, #168]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e9      	bne.n	8004580 <RCCEx_PLLSAI2_Config+0x84>
 80045ac:	e000      	b.n	80045b0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80045ae:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d144      	bne.n	8004640 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d115      	bne.n	80045e8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045bc:	4b23      	ldr	r3, [pc, #140]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	4b23      	ldr	r3, [pc, #140]	; (8004650 <RCCEx_PLLSAI2_Config+0x154>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6892      	ldr	r2, [r2, #8]
 80045c8:	0211      	lsls	r1, r2, #8
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68d2      	ldr	r2, [r2, #12]
 80045ce:	06d2      	lsls	r2, r2, #27
 80045d0:	4311      	orrs	r1, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6852      	ldr	r2, [r2, #4]
 80045d6:	3a01      	subs	r2, #1
 80045d8:	0112      	lsls	r2, r2, #4
 80045da:	4311      	orrs	r1, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	491a      	ldr	r1, [pc, #104]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045e8:	4b18      	ldr	r3, [pc, #96]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a17      	ldr	r2, [pc, #92]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fc fef6 	bl	80013e4 <HAL_GetTick>
 80045f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045fa:	e00f      	b.n	800461c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045fc:	f7fc fef2 	bl	80013e4 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d908      	bls.n	800461c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800461a:	e006      	b.n	800462a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0e9      	beq.n	80045fc <RCCEx_PLLSAI2_Config+0x100>
 8004628:	e000      	b.n	800462c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800462a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	4904      	ldr	r1, [pc, #16]	; (800464c <RCCEx_PLLSAI2_Config+0x150>)
 800463c:	4313      	orrs	r3, r2
 800463e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004640:	7bfb      	ldrb	r3, [r7, #15]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	07ff800c 	.word	0x07ff800c

08004654 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d066      	beq.n	8004734 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc fbfe 	bl	8000e7c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b10      	cmp	r3, #16
 8004694:	d045      	beq.n	8004722 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004696:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <HAL_RTC_Init+0xec>)
 8004698:	22ca      	movs	r2, #202	; 0xca
 800469a:	625a      	str	r2, [r3, #36]	; 0x24
 800469c:	4b28      	ldr	r3, [pc, #160]	; (8004740 <HAL_RTC_Init+0xec>)
 800469e:	2253      	movs	r2, #83	; 0x53
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f872 	bl	800478c <RTC_EnterInitMode>
 80046a8:	4603      	mov	r3, r0
 80046aa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d121      	bne.n	80046f6 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80046b2:	4b23      	ldr	r3, [pc, #140]	; (8004740 <HAL_RTC_Init+0xec>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	4a22      	ldr	r2, [pc, #136]	; (8004740 <HAL_RTC_Init+0xec>)
 80046b8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80046bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80046c2:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <HAL_RTC_Init+0xec>)
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	4319      	orrs	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	430b      	orrs	r3, r1
 80046d6:	491a      	ldr	r1, [pc, #104]	; (8004740 <HAL_RTC_Init+0xec>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	4916      	ldr	r1, [pc, #88]	; (8004740 <HAL_RTC_Init+0xec>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f881 	bl	80047f4 <RTC_ExitInitMode>
 80046f2:	4603      	mov	r3, r0
 80046f4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10e      	bne.n	800471a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <HAL_RTC_Init+0xec>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a19      	ldr	r1, [r3, #32]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	4319      	orrs	r1, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	430b      	orrs	r3, r1
 8004714:	490a      	ldr	r1, [pc, #40]	; (8004740 <HAL_RTC_Init+0xec>)
 8004716:	4313      	orrs	r3, r2
 8004718:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800471a:	4b09      	ldr	r3, [pc, #36]	; (8004740 <HAL_RTC_Init+0xec>)
 800471c:	22ff      	movs	r2, #255	; 0xff
 800471e:	625a      	str	r2, [r3, #36]	; 0x24
 8004720:	e001      	b.n	8004726 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40002800 	.word	0x40002800

08004744 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800474c:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <HAL_RTC_WaitForSynchro+0x40>)
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <HAL_RTC_WaitForSynchro+0x44>)
 8004750:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004752:	f7fc fe47 	bl	80013e4 <HAL_GetTick>
 8004756:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004758:	e009      	b.n	800476e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800475a:	f7fc fe43 	bl	80013e4 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004768:	d901      	bls.n	800476e <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e006      	b.n	800477c <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RTC_WaitForSynchro+0x40>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0ef      	beq.n	800475a <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40002800 	.word	0x40002800
 8004788:	0001005c 	.word	0x0001005c

0800478c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004798:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <RTC_EnterInitMode+0x64>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d120      	bne.n	80047e6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80047a4:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <RTC_EnterInitMode+0x64>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <RTC_EnterInitMode+0x64>)
 80047aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ae:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80047b0:	f7fc fe18 	bl	80013e4 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047b6:	e00d      	b.n	80047d4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80047b8:	f7fc fe14 	bl	80013e4 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047c6:	d905      	bls.n	80047d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2203      	movs	r2, #3
 80047d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <RTC_EnterInitMode+0x64>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <RTC_EnterInitMode+0x5a>
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d1e8      	bne.n	80047b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40002800 	.word	0x40002800

080047f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <RTC_ExitInitMode+0x78>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a19      	ldr	r2, [pc, #100]	; (800486c <RTC_ExitInitMode+0x78>)
 8004806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800480c:	4b17      	ldr	r3, [pc, #92]	; (800486c <RTC_ExitInitMode+0x78>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10c      	bne.n	8004832 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff93 	bl	8004744 <HAL_RTC_WaitForSynchro>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01e      	beq.n	8004862 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2203      	movs	r2, #3
 8004828:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e017      	b.n	8004862 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <RTC_ExitInitMode+0x78>)
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	4a0d      	ldr	r2, [pc, #52]	; (800486c <RTC_ExitInitMode+0x78>)
 8004838:	f023 0320 	bic.w	r3, r3, #32
 800483c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff80 	bl	8004744 <HAL_RTC_WaitForSynchro>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2203      	movs	r2, #3
 800484e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <RTC_ExitInitMode+0x78>)
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	4a04      	ldr	r2, [pc, #16]	; (800486c <RTC_ExitInitMode+0x78>)
 800485c:	f043 0320 	orr.w	r3, r3, #32
 8004860:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40002800 	.word	0x40002800

08004870 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	490f      	ldr	r1, [pc, #60]	; (80048c0 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004884:	4313      	orrs	r3, r2
 8004886:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	490c      	ldr	r1, [pc, #48]	; (80048c4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004892:	4313      	orrs	r3, r2
 8004894:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6919      	ldr	r1, [r3, #16]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	430b      	orrs	r3, r1
 80048aa:	4906      	ldr	r1, [pc, #24]	; (80048c4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40002800 	.word	0x40002800
 80048c4:	40003400 	.word	0x40003400

080048c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e042      	b.n	8004960 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fc fa65 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2224      	movs	r2, #36	; 0x24
 80048f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f82c 	bl	8004968 <UART_SetConfig>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e022      	b.n	8004960 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fb20 	bl	8004f68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fba7 	bl	80050ac <UART_CheckIdleState>
 800495e:	4603      	mov	r3, r0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800496c:	b08c      	sub	sp, #48	; 0x30
 800496e:	af00      	add	r7, sp, #0
 8004970:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	431a      	orrs	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	431a      	orrs	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	4313      	orrs	r3, r2
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4baa      	ldr	r3, [pc, #680]	; (8004c40 <UART_SetConfig+0x2d8>)
 8004998:	4013      	ands	r3, r2
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a9f      	ldr	r2, [pc, #636]	; (8004c44 <UART_SetConfig+0x2dc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d004      	beq.n	80049d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d0:	4313      	orrs	r3, r2
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80049de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	f023 010f 	bic.w	r1, r3, #15
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a90      	ldr	r2, [pc, #576]	; (8004c48 <UART_SetConfig+0x2e0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d125      	bne.n	8004a58 <UART_SetConfig+0xf0>
 8004a0c:	4b8f      	ldr	r3, [pc, #572]	; (8004c4c <UART_SetConfig+0x2e4>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d81a      	bhi.n	8004a50 <UART_SetConfig+0xe8>
 8004a1a:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <UART_SetConfig+0xb8>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a41 	.word	0x08004a41
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a49 	.word	0x08004a49
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a36:	e116      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3e:	e112      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004a40:	2304      	movs	r3, #4
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a46:	e10e      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4e:	e10a      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004a50:	2310      	movs	r3, #16
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a56:	e106      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a7c      	ldr	r2, [pc, #496]	; (8004c50 <UART_SetConfig+0x2e8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d138      	bne.n	8004ad4 <UART_SetConfig+0x16c>
 8004a62:	4b7a      	ldr	r3, [pc, #488]	; (8004c4c <UART_SetConfig+0x2e4>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b0c      	cmp	r3, #12
 8004a6e:	d82d      	bhi.n	8004acc <UART_SetConfig+0x164>
 8004a70:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <UART_SetConfig+0x110>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004aad 	.word	0x08004aad
 8004a7c:	08004acd 	.word	0x08004acd
 8004a80:	08004acd 	.word	0x08004acd
 8004a84:	08004acd 	.word	0x08004acd
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004acd 	.word	0x08004acd
 8004a90:	08004acd 	.word	0x08004acd
 8004a94:	08004acd 	.word	0x08004acd
 8004a98:	08004ab5 	.word	0x08004ab5
 8004a9c:	08004acd 	.word	0x08004acd
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab2:	e0d8      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aba:	e0d4      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004abc:	2304      	movs	r3, #4
 8004abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ac2:	e0d0      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aca:	e0cc      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004acc:	2310      	movs	r3, #16
 8004ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad2:	e0c8      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a5e      	ldr	r2, [pc, #376]	; (8004c54 <UART_SetConfig+0x2ec>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d125      	bne.n	8004b2a <UART_SetConfig+0x1c2>
 8004ade:	4b5b      	ldr	r3, [pc, #364]	; (8004c4c <UART_SetConfig+0x2e4>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ae8:	2b30      	cmp	r3, #48	; 0x30
 8004aea:	d016      	beq.n	8004b1a <UART_SetConfig+0x1b2>
 8004aec:	2b30      	cmp	r3, #48	; 0x30
 8004aee:	d818      	bhi.n	8004b22 <UART_SetConfig+0x1ba>
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d00a      	beq.n	8004b0a <UART_SetConfig+0x1a2>
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d814      	bhi.n	8004b22 <UART_SetConfig+0x1ba>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <UART_SetConfig+0x19a>
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d008      	beq.n	8004b12 <UART_SetConfig+0x1aa>
 8004b00:	e00f      	b.n	8004b22 <UART_SetConfig+0x1ba>
 8004b02:	2300      	movs	r3, #0
 8004b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b08:	e0ad      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b10:	e0a9      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b12:	2304      	movs	r3, #4
 8004b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b18:	e0a5      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b20:	e0a1      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b22:	2310      	movs	r3, #16
 8004b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b28:	e09d      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4a      	ldr	r2, [pc, #296]	; (8004c58 <UART_SetConfig+0x2f0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d125      	bne.n	8004b80 <UART_SetConfig+0x218>
 8004b34:	4b45      	ldr	r3, [pc, #276]	; (8004c4c <UART_SetConfig+0x2e4>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b40:	d016      	beq.n	8004b70 <UART_SetConfig+0x208>
 8004b42:	2bc0      	cmp	r3, #192	; 0xc0
 8004b44:	d818      	bhi.n	8004b78 <UART_SetConfig+0x210>
 8004b46:	2b80      	cmp	r3, #128	; 0x80
 8004b48:	d00a      	beq.n	8004b60 <UART_SetConfig+0x1f8>
 8004b4a:	2b80      	cmp	r3, #128	; 0x80
 8004b4c:	d814      	bhi.n	8004b78 <UART_SetConfig+0x210>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <UART_SetConfig+0x1f0>
 8004b52:	2b40      	cmp	r3, #64	; 0x40
 8004b54:	d008      	beq.n	8004b68 <UART_SetConfig+0x200>
 8004b56:	e00f      	b.n	8004b78 <UART_SetConfig+0x210>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5e:	e082      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b60:	2302      	movs	r3, #2
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b66:	e07e      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6e:	e07a      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b70:	2308      	movs	r3, #8
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b76:	e076      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7e:	e072      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a35      	ldr	r2, [pc, #212]	; (8004c5c <UART_SetConfig+0x2f4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d12a      	bne.n	8004be0 <UART_SetConfig+0x278>
 8004b8a:	4b30      	ldr	r3, [pc, #192]	; (8004c4c <UART_SetConfig+0x2e4>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b98:	d01a      	beq.n	8004bd0 <UART_SetConfig+0x268>
 8004b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9e:	d81b      	bhi.n	8004bd8 <UART_SetConfig+0x270>
 8004ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba4:	d00c      	beq.n	8004bc0 <UART_SetConfig+0x258>
 8004ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004baa:	d815      	bhi.n	8004bd8 <UART_SetConfig+0x270>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <UART_SetConfig+0x250>
 8004bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb4:	d008      	beq.n	8004bc8 <UART_SetConfig+0x260>
 8004bb6:	e00f      	b.n	8004bd8 <UART_SetConfig+0x270>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bbe:	e052      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc6:	e04e      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bce:	e04a      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	e046      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bde:	e042      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <UART_SetConfig+0x2dc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d13a      	bne.n	8004c60 <UART_SetConfig+0x2f8>
 8004bea:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <UART_SetConfig+0x2e4>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf8:	d01a      	beq.n	8004c30 <UART_SetConfig+0x2c8>
 8004bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bfe:	d81b      	bhi.n	8004c38 <UART_SetConfig+0x2d0>
 8004c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c04:	d00c      	beq.n	8004c20 <UART_SetConfig+0x2b8>
 8004c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0a:	d815      	bhi.n	8004c38 <UART_SetConfig+0x2d0>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <UART_SetConfig+0x2b0>
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c14:	d008      	beq.n	8004c28 <UART_SetConfig+0x2c0>
 8004c16:	e00f      	b.n	8004c38 <UART_SetConfig+0x2d0>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1e:	e022      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004c20:	2302      	movs	r3, #2
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c26:	e01e      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2e:	e01a      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004c30:	2308      	movs	r3, #8
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c36:	e016      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3e:	e012      	b.n	8004c66 <UART_SetConfig+0x2fe>
 8004c40:	cfff69f3 	.word	0xcfff69f3
 8004c44:	40008000 	.word	0x40008000
 8004c48:	40013800 	.word	0x40013800
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40004400 	.word	0x40004400
 8004c54:	40004800 	.word	0x40004800
 8004c58:	40004c00 	.word	0x40004c00
 8004c5c:	40005000 	.word	0x40005000
 8004c60:	2310      	movs	r3, #16
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4ab0      	ldr	r2, [pc, #704]	; (8004f2c <UART_SetConfig+0x5c4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	f040 809b 	bne.w	8004da8 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d827      	bhi.n	8004cca <UART_SetConfig+0x362>
 8004c7a:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <UART_SetConfig+0x318>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	08004ccb 	.word	0x08004ccb
 8004c90:	08004cbb 	.word	0x08004cbb
 8004c94:	08004ccb 	.word	0x08004ccb
 8004c98:	08004ccb 	.word	0x08004ccb
 8004c9c:	08004ccb 	.word	0x08004ccb
 8004ca0:	08004cc3 	.word	0x08004cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca4:	f7fe fec6 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8004ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004caa:	e014      	b.n	8004cd6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cac:	f7fe fed6 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8004cb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cb2:	e010      	b.n	8004cd6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb4:	4b9e      	ldr	r3, [pc, #632]	; (8004f30 <UART_SetConfig+0x5c8>)
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cb8:	e00d      	b.n	8004cd6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cba:	f7fe fe09 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8004cbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cc0:	e009      	b.n	8004cd6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cc8:	e005      	b.n	8004cd6 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004cd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8130 	beq.w	8004f3e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	4a94      	ldr	r2, [pc, #592]	; (8004f34 <UART_SetConfig+0x5cc>)
 8004ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d305      	bcc.n	8004d0e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d903      	bls.n	8004d16 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d14:	e113      	b.n	8004f3e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	2200      	movs	r2, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	60fa      	str	r2, [r7, #12]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	4a84      	ldr	r2, [pc, #528]	; (8004f34 <UART_SetConfig+0x5cc>)
 8004d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d38:	f7fb fa7c 	bl	8000234 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	020b      	lsls	r3, r1, #8
 8004d4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d52:	0202      	lsls	r2, r0, #8
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	6849      	ldr	r1, [r1, #4]
 8004d58:	0849      	lsrs	r1, r1, #1
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	4605      	mov	r5, r0
 8004d60:	eb12 0804 	adds.w	r8, r2, r4
 8004d64:	eb43 0905 	adc.w	r9, r3, r5
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	469a      	mov	sl, r3
 8004d70:	4693      	mov	fp, r2
 8004d72:	4652      	mov	r2, sl
 8004d74:	465b      	mov	r3, fp
 8004d76:	4640      	mov	r0, r8
 8004d78:	4649      	mov	r1, r9
 8004d7a:	f7fb fa5b 	bl	8000234 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4613      	mov	r3, r2
 8004d84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8c:	d308      	bcc.n	8004da0 <UART_SetConfig+0x438>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d94:	d204      	bcs.n	8004da0 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a3a      	ldr	r2, [r7, #32]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	e0ce      	b.n	8004f3e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004da6:	e0ca      	b.n	8004f3e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db0:	d166      	bne.n	8004e80 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d827      	bhi.n	8004e0a <UART_SetConfig+0x4a2>
 8004dba:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <UART_SetConfig+0x458>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004e0b 	.word	0x08004e0b
 8004dd0:	08004dfb 	.word	0x08004dfb
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fe fe26 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8004de8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dea:	e014      	b.n	8004e16 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dec:	f7fe fe36 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004df2:	e010      	b.n	8004e16 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df4:	4b4e      	ldr	r3, [pc, #312]	; (8004f30 <UART_SetConfig+0x5c8>)
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004df8:	e00d      	b.n	8004e16 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfa:	f7fe fd69 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8004dfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e00:	e009      	b.n	8004e16 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e08:	e005      	b.n	8004e16 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8090 	beq.w	8004f3e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	4a44      	ldr	r2, [pc, #272]	; (8004f34 <UART_SetConfig+0x5cc>)
 8004e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e30:	005a      	lsls	r2, r3, #1
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	441a      	add	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d916      	bls.n	8004e78 <UART_SetConfig+0x510>
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d212      	bcs.n	8004e78 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f023 030f 	bic.w	r3, r3, #15
 8004e5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	8bfb      	ldrh	r3, [r7, #30]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	8bfa      	ldrh	r2, [r7, #30]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	e062      	b.n	8004f3e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e7e:	e05e      	b.n	8004f3e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d828      	bhi.n	8004eda <UART_SetConfig+0x572>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <UART_SetConfig+0x528>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ebd 	.word	0x08004ebd
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	08004edb 	.word	0x08004edb
 8004ea0:	08004ecb 	.word	0x08004ecb
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004edb 	.word	0x08004edb
 8004eac:	08004edb 	.word	0x08004edb
 8004eb0:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb4:	f7fe fdbe 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8004eb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eba:	e014      	b.n	8004ee6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fe fdce 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8004ec0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ec2:	e010      	b.n	8004ee6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <UART_SetConfig+0x5c8>)
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ec8:	e00d      	b.n	8004ee6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fe fd01 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8004ece:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ed0:	e009      	b.n	8004ee6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ed8:	e005      	b.n	8004ee6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ee4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d028      	beq.n	8004f3e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	4a10      	ldr	r2, [pc, #64]	; (8004f34 <UART_SetConfig+0x5cc>)
 8004ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	fbb3 f2f2 	udiv	r2, r3, r2
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	441a      	add	r2, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	d910      	bls.n	8004f38 <UART_SetConfig+0x5d0>
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d20c      	bcs.n	8004f38 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60da      	str	r2, [r3, #12]
 8004f28:	e009      	b.n	8004f3e <UART_SetConfig+0x5d6>
 8004f2a:	bf00      	nop
 8004f2c:	40008000 	.word	0x40008000
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	08006338 	.word	0x08006338
      }
      else
      {
        ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2200      	movs	r2, #0
 8004f52:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2200      	movs	r2, #0
 8004f58:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004f5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3730      	adds	r7, #48	; 0x30
 8004f62:	46bd      	mov	sp, r7
 8004f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01a      	beq.n	800507e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005066:	d10a      	bne.n	800507e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b098      	sub	sp, #96	; 0x60
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050bc:	f7fc f992 	bl	80013e4 <HAL_GetTick>
 80050c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d12f      	bne.n	8005130 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d8:	2200      	movs	r2, #0
 80050da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f88e 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d022      	beq.n	8005130 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
 800510a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800510e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e6      	bne.n	80050ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e063      	b.n	80051f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d149      	bne.n	80051d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005146:	2200      	movs	r2, #0
 8005148:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f857 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d03c      	beq.n	80051d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	623b      	str	r3, [r7, #32]
   return(result);
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800516c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
 8005178:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e6      	bne.n	8005158 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3308      	adds	r3, #8
 8005190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	60fb      	str	r3, [r7, #12]
   return(result);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3308      	adds	r3, #8
 80051a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051aa:	61fa      	str	r2, [r7, #28]
 80051ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	69b9      	ldr	r1, [r7, #24]
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	617b      	str	r3, [r7, #20]
   return(result);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e5      	bne.n	800518a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e012      	b.n	80051f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3758      	adds	r7, #88	; 0x58
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005210:	e049      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d045      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521a:	f7fc f8e3 	bl	80013e4 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <UART_WaitOnFlagUntilTimeout+0x30>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e048      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d031      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d110      	bne.n	8005272 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f838 	bl	80052ce <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2208      	movs	r2, #8
 8005262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e029      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005280:	d111      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800528a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f81e 	bl	80052ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e00f      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d0a6      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b095      	sub	sp, #84	; 0x54
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f4:	643b      	str	r3, [r7, #64]	; 0x40
 80052f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	61fb      	str	r3, [r7, #28]
   return(result);
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	64bb      	str	r3, [r7, #72]	; 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e3      	bne.n	8005308 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d118      	bne.n	800537a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	60bb      	str	r3, [r7, #8]
   return(result);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f023 0310 	bic.w	r3, r3, #16
 800535c:	647b      	str	r3, [r7, #68]	; 0x44
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	613b      	str	r3, [r7, #16]
   return(result);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e6      	bne.n	8005348 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800538e:	bf00      	nop
 8005390:	3754      	adds	r7, #84	; 0x54
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e027      	b.n	8005400 <HAL_UARTEx_DisableFifoMode+0x66>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	; 0x24
 80053bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0201 	bic.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005420:	2302      	movs	r3, #2
 8005422:	e02d      	b.n	8005480 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2224      	movs	r2, #36	; 0x24
 8005430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f84f 	bl	8005504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800549c:	2302      	movs	r3, #2
 800549e:	e02d      	b.n	80054fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2224      	movs	r2, #36	; 0x24
 80054ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f811 	bl	8005504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005510:	2b00      	cmp	r3, #0
 8005512:	d108      	bne.n	8005526 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005524:	e031      	b.n	800558a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005526:	2308      	movs	r3, #8
 8005528:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800552a:	2308      	movs	r3, #8
 800552c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	0e5b      	lsrs	r3, r3, #25
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	0f5b      	lsrs	r3, r3, #29
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800554e:	7bbb      	ldrb	r3, [r7, #14]
 8005550:	7b3a      	ldrb	r2, [r7, #12]
 8005552:	4911      	ldr	r1, [pc, #68]	; (8005598 <UARTEx_SetNbDataToProcess+0x94>)
 8005554:	5c8a      	ldrb	r2, [r1, r2]
 8005556:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800555a:	7b3a      	ldrb	r2, [r7, #12]
 800555c:	490f      	ldr	r1, [pc, #60]	; (800559c <UARTEx_SetNbDataToProcess+0x98>)
 800555e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005560:	fb93 f3f2 	sdiv	r3, r3, r2
 8005564:	b29a      	uxth	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	7b7a      	ldrb	r2, [r7, #13]
 8005570:	4909      	ldr	r1, [pc, #36]	; (8005598 <UARTEx_SetNbDataToProcess+0x94>)
 8005572:	5c8a      	ldrb	r2, [r1, r2]
 8005574:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005578:	7b7a      	ldrb	r2, [r7, #13]
 800557a:	4908      	ldr	r1, [pc, #32]	; (800559c <UARTEx_SetNbDataToProcess+0x98>)
 800557c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800557e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	08006350 	.word	0x08006350
 800559c:	08006358 	.word	0x08006358

080055a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b08b      	sub	sp, #44	; 0x2c
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	fa93 f3a3 	rbit	r3, r3
 80055ba:	613b      	str	r3, [r7, #16]
  return result;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80055c6:	2320      	movs	r3, #32
 80055c8:	e003      	b.n	80055d2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	fab3 f383 	clz	r3, r3
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	2103      	movs	r1, #3
 80055d6:	fa01 f303 	lsl.w	r3, r1, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	401a      	ands	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	fa93 f3a3 	rbit	r3, r3
 80055e8:	61fb      	str	r3, [r7, #28]
  return result;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80055f4:	2320      	movs	r3, #32
 80055f6:	e003      	b.n	8005600 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	fab3 f383 	clz	r3, r3
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	fa01 f303 	lsl.w	r3, r1, r3
 8005608:	431a      	orrs	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	601a      	str	r2, [r3, #0]
}
 800560e:	bf00      	nop
 8005610:	372c      	adds	r7, #44	; 0x2c
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	43db      	mvns	r3, r3
 800562e:	401a      	ands	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800564a:	b480      	push	{r7}
 800564c:	b08b      	sub	sp, #44	; 0x2c
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	613b      	str	r3, [r7, #16]
  return result;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005670:	2320      	movs	r3, #32
 8005672:	e003      	b.n	800567c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	2103      	movs	r1, #3
 8005680:	fa01 f303 	lsl.w	r3, r1, r3
 8005684:	43db      	mvns	r3, r3
 8005686:	401a      	ands	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	fa93 f3a3 	rbit	r3, r3
 8005692:	61fb      	str	r3, [r7, #28]
  return result;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800569e:	2320      	movs	r3, #32
 80056a0:	e003      	b.n	80056aa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	fab3 f383 	clz	r3, r3
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	fa01 f303 	lsl.w	r3, r1, r3
 80056b2:	431a      	orrs	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80056b8:	bf00      	nop
 80056ba:	372c      	adds	r7, #44	; 0x2c
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b08b      	sub	sp, #44	; 0x2c
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	fa93 f3a3 	rbit	r3, r3
 80056de:	613b      	str	r3, [r7, #16]
  return result;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80056ea:	2320      	movs	r3, #32
 80056ec:	e003      	b.n	80056f6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	fab3 f383 	clz	r3, r3
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	2103      	movs	r1, #3
 80056fa:	fa01 f303 	lsl.w	r3, r1, r3
 80056fe:	43db      	mvns	r3, r3
 8005700:	401a      	ands	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	61fb      	str	r3, [r7, #28]
  return result;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005718:	2320      	movs	r3, #32
 800571a:	e003      	b.n	8005724 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	fab3 f383 	clz	r3, r3
 8005722:	b2db      	uxtb	r3, r3
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	60da      	str	r2, [r3, #12]
}
 8005732:	bf00      	nop
 8005734:	372c      	adds	r7, #44	; 0x2c
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800573e:	b480      	push	{r7}
 8005740:	b08b      	sub	sp, #44	; 0x2c
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1a      	ldr	r2, [r3, #32]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	fa93 f3a3 	rbit	r3, r3
 8005758:	613b      	str	r3, [r7, #16]
  return result;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005764:	2320      	movs	r3, #32
 8005766:	e003      	b.n	8005770 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	fab3 f383 	clz	r3, r3
 800576e:	b2db      	uxtb	r3, r3
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	210f      	movs	r1, #15
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	401a      	ands	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	fa93 f3a3 	rbit	r3, r3
 8005786:	61fb      	str	r3, [r7, #28]
  return result;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005792:	2320      	movs	r3, #32
 8005794:	e003      	b.n	800579e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	fab3 f383 	clz	r3, r3
 800579c:	b2db      	uxtb	r3, r3
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	fa01 f303 	lsl.w	r3, r1, r3
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80057ac:	bf00      	nop
 80057ae:	372c      	adds	r7, #44	; 0x2c
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b08b      	sub	sp, #44	; 0x2c
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	fa93 f3a3 	rbit	r3, r3
 80057d4:	613b      	str	r3, [r7, #16]
  return result;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80057e0:	2320      	movs	r3, #32
 80057e2:	e003      	b.n	80057ec <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	fab3 f383 	clz	r3, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	210f      	movs	r1, #15
 80057f0:	fa01 f303 	lsl.w	r3, r1, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	401a      	ands	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	fa93 f3a3 	rbit	r3, r3
 8005804:	61fb      	str	r3, [r7, #28]
  return result;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005810:	2320      	movs	r3, #32
 8005812:	e003      	b.n	800581c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	fab3 f383 	clz	r3, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800582a:	bf00      	nop
 800582c:	372c      	adds	r7, #44	; 0x2c
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b088      	sub	sp, #32
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	60fb      	str	r3, [r7, #12]
  return result;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <LL_GPIO_Init+0x26>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e003      	b.n	8005864 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005866:	e047      	b.n	80058f8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	2101      	movs	r1, #1
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	fa01 f303 	lsl.w	r3, r1, r3
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d039      	beq.n	80058f2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d003      	beq.n	800588e <LL_GPIO_Init+0x58>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d10d      	bne.n	80058aa <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	461a      	mov	r2, r3
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fed7 	bl	800564a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	461a      	mov	r2, r3
 80058a2:	69b9      	ldr	r1, [r7, #24]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff feb8 	bl	800561a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	461a      	mov	r2, r3
 80058b0:	69b9      	ldr	r1, [r7, #24]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff ff06 	bl	80056c4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d111      	bne.n	80058e4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2bff      	cmp	r3, #255	; 0xff
 80058c4:	d807      	bhi.n	80058d6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	461a      	mov	r2, r3
 80058cc:	69b9      	ldr	r1, [r7, #24]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff ff35 	bl	800573e <LL_GPIO_SetAFPin_0_7>
 80058d4:	e006      	b.n	80058e4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	461a      	mov	r2, r3
 80058dc:	69b9      	ldr	r1, [r7, #24]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff ff6a 	bl	80057b8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	461a      	mov	r2, r3
 80058ea:	69b9      	ldr	r1, [r7, #24]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fe57 	bl	80055a0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1b0      	bne.n	8005868 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3720      	adds	r7, #32
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005918:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800591c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	b29b      	uxth	r3, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	b29b      	uxth	r3, r3
 800592e:	4013      	ands	r3, r2
 8005930:	b29a      	uxth	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005946:	b084      	sub	sp, #16
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	f107 0014 	add.w	r0, r7, #20
 8005954:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	b004      	add	sp, #16
 8005986:	4770      	bx	lr

08005988 <std>:
 8005988:	2300      	movs	r3, #0
 800598a:	b510      	push	{r4, lr}
 800598c:	4604      	mov	r4, r0
 800598e:	6083      	str	r3, [r0, #8]
 8005990:	8181      	strh	r1, [r0, #12]
 8005992:	4619      	mov	r1, r3
 8005994:	6643      	str	r3, [r0, #100]	; 0x64
 8005996:	81c2      	strh	r2, [r0, #14]
 8005998:	2208      	movs	r2, #8
 800599a:	6183      	str	r3, [r0, #24]
 800599c:	e9c0 3300 	strd	r3, r3, [r0]
 80059a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059a4:	305c      	adds	r0, #92	; 0x5c
 80059a6:	f000 f9d3 	bl	8005d50 <memset>
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <std+0x38>)
 80059ac:	6224      	str	r4, [r4, #32]
 80059ae:	6263      	str	r3, [r4, #36]	; 0x24
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <std+0x3c>)
 80059b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80059b4:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <std+0x40>)
 80059b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <std+0x44>)
 80059ba:	6323      	str	r3, [r4, #48]	; 0x30
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	08005ba1 	.word	0x08005ba1
 80059c4:	08005bc3 	.word	0x08005bc3
 80059c8:	08005bfb 	.word	0x08005bfb
 80059cc:	08005c1f 	.word	0x08005c1f

080059d0 <stdio_exit_handler>:
 80059d0:	4a02      	ldr	r2, [pc, #8]	; (80059dc <stdio_exit_handler+0xc>)
 80059d2:	4903      	ldr	r1, [pc, #12]	; (80059e0 <stdio_exit_handler+0x10>)
 80059d4:	4803      	ldr	r0, [pc, #12]	; (80059e4 <stdio_exit_handler+0x14>)
 80059d6:	f000 b869 	b.w	8005aac <_fwalk_sglue>
 80059da:	bf00      	nop
 80059dc:	2000001c 	.word	0x2000001c
 80059e0:	0800613d 	.word	0x0800613d
 80059e4:	20000028 	.word	0x20000028

080059e8 <cleanup_stdio>:
 80059e8:	6841      	ldr	r1, [r0, #4]
 80059ea:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <cleanup_stdio+0x34>)
 80059ec:	4299      	cmp	r1, r3
 80059ee:	b510      	push	{r4, lr}
 80059f0:	4604      	mov	r4, r0
 80059f2:	d001      	beq.n	80059f8 <cleanup_stdio+0x10>
 80059f4:	f000 fba2 	bl	800613c <_fflush_r>
 80059f8:	68a1      	ldr	r1, [r4, #8]
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <cleanup_stdio+0x38>)
 80059fc:	4299      	cmp	r1, r3
 80059fe:	d002      	beq.n	8005a06 <cleanup_stdio+0x1e>
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 fb9b 	bl	800613c <_fflush_r>
 8005a06:	68e1      	ldr	r1, [r4, #12]
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <cleanup_stdio+0x3c>)
 8005a0a:	4299      	cmp	r1, r3
 8005a0c:	d004      	beq.n	8005a18 <cleanup_stdio+0x30>
 8005a0e:	4620      	mov	r0, r4
 8005a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a14:	f000 bb92 	b.w	800613c <_fflush_r>
 8005a18:	bd10      	pop	{r4, pc}
 8005a1a:	bf00      	nop
 8005a1c:	200004c4 	.word	0x200004c4
 8005a20:	2000052c 	.word	0x2000052c
 8005a24:	20000594 	.word	0x20000594

08005a28 <global_stdio_init.part.0>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <global_stdio_init.part.0+0x30>)
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	4c0b      	ldr	r4, [pc, #44]	; (8005a5c <global_stdio_init.part.0+0x34>)
 8005a30:	4a0b      	ldr	r2, [pc, #44]	; (8005a60 <global_stdio_init.part.0+0x38>)
 8005a32:	4620      	mov	r0, r4
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f7ff ffa6 	bl	8005988 <std>
 8005a3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a40:	2201      	movs	r2, #1
 8005a42:	2109      	movs	r1, #9
 8005a44:	f7ff ffa0 	bl	8005988 <std>
 8005a48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	2112      	movs	r1, #18
 8005a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a54:	f7ff bf98 	b.w	8005988 <std>
 8005a58:	200005fc 	.word	0x200005fc
 8005a5c:	200004c4 	.word	0x200004c4
 8005a60:	080059d1 	.word	0x080059d1

08005a64 <__sfp_lock_acquire>:
 8005a64:	4801      	ldr	r0, [pc, #4]	; (8005a6c <__sfp_lock_acquire+0x8>)
 8005a66:	f000 b9eb 	b.w	8005e40 <__retarget_lock_acquire_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	20000605 	.word	0x20000605

08005a70 <__sfp_lock_release>:
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <__sfp_lock_release+0x8>)
 8005a72:	f000 b9e6 	b.w	8005e42 <__retarget_lock_release_recursive>
 8005a76:	bf00      	nop
 8005a78:	20000605 	.word	0x20000605

08005a7c <__sinit>:
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	4604      	mov	r4, r0
 8005a80:	f7ff fff0 	bl	8005a64 <__sfp_lock_acquire>
 8005a84:	6a23      	ldr	r3, [r4, #32]
 8005a86:	b11b      	cbz	r3, 8005a90 <__sinit+0x14>
 8005a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a8c:	f7ff bff0 	b.w	8005a70 <__sfp_lock_release>
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <__sinit+0x28>)
 8005a92:	6223      	str	r3, [r4, #32]
 8005a94:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <__sinit+0x2c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f5      	bne.n	8005a88 <__sinit+0xc>
 8005a9c:	f7ff ffc4 	bl	8005a28 <global_stdio_init.part.0>
 8005aa0:	e7f2      	b.n	8005a88 <__sinit+0xc>
 8005aa2:	bf00      	nop
 8005aa4:	080059e9 	.word	0x080059e9
 8005aa8:	200005fc 	.word	0x200005fc

08005aac <_fwalk_sglue>:
 8005aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	4688      	mov	r8, r1
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005abc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ac0:	d505      	bpl.n	8005ace <_fwalk_sglue+0x22>
 8005ac2:	6824      	ldr	r4, [r4, #0]
 8005ac4:	2c00      	cmp	r4, #0
 8005ac6:	d1f7      	bne.n	8005ab8 <_fwalk_sglue+0xc>
 8005ac8:	4630      	mov	r0, r6
 8005aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ace:	89ab      	ldrh	r3, [r5, #12]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d907      	bls.n	8005ae4 <_fwalk_sglue+0x38>
 8005ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	d003      	beq.n	8005ae4 <_fwalk_sglue+0x38>
 8005adc:	4629      	mov	r1, r5
 8005ade:	4638      	mov	r0, r7
 8005ae0:	47c0      	blx	r8
 8005ae2:	4306      	orrs	r6, r0
 8005ae4:	3568      	adds	r5, #104	; 0x68
 8005ae6:	e7e9      	b.n	8005abc <_fwalk_sglue+0x10>

08005ae8 <_puts_r>:
 8005ae8:	6a03      	ldr	r3, [r0, #32]
 8005aea:	b570      	push	{r4, r5, r6, lr}
 8005aec:	4605      	mov	r5, r0
 8005aee:	460e      	mov	r6, r1
 8005af0:	6884      	ldr	r4, [r0, #8]
 8005af2:	b90b      	cbnz	r3, 8005af8 <_puts_r+0x10>
 8005af4:	f7ff ffc2 	bl	8005a7c <__sinit>
 8005af8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005afa:	07db      	lsls	r3, r3, #31
 8005afc:	d405      	bmi.n	8005b0a <_puts_r+0x22>
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	0598      	lsls	r0, r3, #22
 8005b02:	d402      	bmi.n	8005b0a <_puts_r+0x22>
 8005b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b06:	f000 f99b 	bl	8005e40 <__retarget_lock_acquire_recursive>
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	0719      	lsls	r1, r3, #28
 8005b0e:	d513      	bpl.n	8005b38 <_puts_r+0x50>
 8005b10:	6923      	ldr	r3, [r4, #16]
 8005b12:	b18b      	cbz	r3, 8005b38 <_puts_r+0x50>
 8005b14:	3e01      	subs	r6, #1
 8005b16:	68a3      	ldr	r3, [r4, #8]
 8005b18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	60a3      	str	r3, [r4, #8]
 8005b20:	b9e9      	cbnz	r1, 8005b5e <_puts_r+0x76>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da2e      	bge.n	8005b84 <_puts_r+0x9c>
 8005b26:	4622      	mov	r2, r4
 8005b28:	210a      	movs	r1, #10
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f000 f87b 	bl	8005c26 <__swbuf_r>
 8005b30:	3001      	adds	r0, #1
 8005b32:	d007      	beq.n	8005b44 <_puts_r+0x5c>
 8005b34:	250a      	movs	r5, #10
 8005b36:	e007      	b.n	8005b48 <_puts_r+0x60>
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 f8b0 	bl	8005ca0 <__swsetup_r>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d0e7      	beq.n	8005b14 <_puts_r+0x2c>
 8005b44:	f04f 35ff 	mov.w	r5, #4294967295
 8005b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b4a:	07da      	lsls	r2, r3, #31
 8005b4c:	d405      	bmi.n	8005b5a <_puts_r+0x72>
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	059b      	lsls	r3, r3, #22
 8005b52:	d402      	bmi.n	8005b5a <_puts_r+0x72>
 8005b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b56:	f000 f974 	bl	8005e42 <__retarget_lock_release_recursive>
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	bd70      	pop	{r4, r5, r6, pc}
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da04      	bge.n	8005b6c <_puts_r+0x84>
 8005b62:	69a2      	ldr	r2, [r4, #24]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	dc06      	bgt.n	8005b76 <_puts_r+0x8e>
 8005b68:	290a      	cmp	r1, #10
 8005b6a:	d004      	beq.n	8005b76 <_puts_r+0x8e>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	6022      	str	r2, [r4, #0]
 8005b72:	7019      	strb	r1, [r3, #0]
 8005b74:	e7cf      	b.n	8005b16 <_puts_r+0x2e>
 8005b76:	4622      	mov	r2, r4
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f000 f854 	bl	8005c26 <__swbuf_r>
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d1c9      	bne.n	8005b16 <_puts_r+0x2e>
 8005b82:	e7df      	b.n	8005b44 <_puts_r+0x5c>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	250a      	movs	r5, #10
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	6022      	str	r2, [r4, #0]
 8005b8c:	701d      	strb	r5, [r3, #0]
 8005b8e:	e7db      	b.n	8005b48 <_puts_r+0x60>

08005b90 <puts>:
 8005b90:	4b02      	ldr	r3, [pc, #8]	; (8005b9c <puts+0xc>)
 8005b92:	4601      	mov	r1, r0
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	f7ff bfa7 	b.w	8005ae8 <_puts_r>
 8005b9a:	bf00      	nop
 8005b9c:	20000074 	.word	0x20000074

08005ba0 <__sread>:
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba8:	f000 f8fc 	bl	8005da4 <_read_r>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	bfab      	itete	ge
 8005bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bb4:	181b      	addge	r3, r3, r0
 8005bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bba:	bfac      	ite	ge
 8005bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bbe:	81a3      	strhlt	r3, [r4, #12]
 8005bc0:	bd10      	pop	{r4, pc}

08005bc2 <__swrite>:
 8005bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc6:	461f      	mov	r7, r3
 8005bc8:	898b      	ldrh	r3, [r1, #12]
 8005bca:	4605      	mov	r5, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	05db      	lsls	r3, r3, #23
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	d505      	bpl.n	8005be0 <__swrite+0x1e>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bdc:	f000 f8d0 	bl	8005d80 <_lseek_r>
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	4632      	mov	r2, r6
 8005be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005be8:	4628      	mov	r0, r5
 8005bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bee:	81a3      	strh	r3, [r4, #12]
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf6:	f000 b8e7 	b.w	8005dc8 <_write_r>

08005bfa <__sseek>:
 8005bfa:	b510      	push	{r4, lr}
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c02:	f000 f8bd 	bl	8005d80 <_lseek_r>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	bf15      	itete	ne
 8005c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c16:	81a3      	strheq	r3, [r4, #12]
 8005c18:	bf18      	it	ne
 8005c1a:	81a3      	strhne	r3, [r4, #12]
 8005c1c:	bd10      	pop	{r4, pc}

08005c1e <__sclose>:
 8005c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c22:	f000 b89d 	b.w	8005d60 <_close_r>

08005c26 <__swbuf_r>:
 8005c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c28:	460e      	mov	r6, r1
 8005c2a:	4614      	mov	r4, r2
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	b118      	cbz	r0, 8005c38 <__swbuf_r+0x12>
 8005c30:	6a03      	ldr	r3, [r0, #32]
 8005c32:	b90b      	cbnz	r3, 8005c38 <__swbuf_r+0x12>
 8005c34:	f7ff ff22 	bl	8005a7c <__sinit>
 8005c38:	69a3      	ldr	r3, [r4, #24]
 8005c3a:	60a3      	str	r3, [r4, #8]
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	071a      	lsls	r2, r3, #28
 8005c40:	d525      	bpl.n	8005c8e <__swbuf_r+0x68>
 8005c42:	6923      	ldr	r3, [r4, #16]
 8005c44:	b31b      	cbz	r3, 8005c8e <__swbuf_r+0x68>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	b2f6      	uxtb	r6, r6
 8005c4a:	6922      	ldr	r2, [r4, #16]
 8005c4c:	4637      	mov	r7, r6
 8005c4e:	1a98      	subs	r0, r3, r2
 8005c50:	6963      	ldr	r3, [r4, #20]
 8005c52:	4283      	cmp	r3, r0
 8005c54:	dc04      	bgt.n	8005c60 <__swbuf_r+0x3a>
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 fa6f 	bl	800613c <_fflush_r>
 8005c5e:	b9e0      	cbnz	r0, 8005c9a <__swbuf_r+0x74>
 8005c60:	68a3      	ldr	r3, [r4, #8]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	60a3      	str	r3, [r4, #8]
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	6022      	str	r2, [r4, #0]
 8005c6c:	701e      	strb	r6, [r3, #0]
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	6962      	ldr	r2, [r4, #20]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d004      	beq.n	8005c80 <__swbuf_r+0x5a>
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	07db      	lsls	r3, r3, #31
 8005c7a:	d506      	bpl.n	8005c8a <__swbuf_r+0x64>
 8005c7c:	2e0a      	cmp	r6, #10
 8005c7e:	d104      	bne.n	8005c8a <__swbuf_r+0x64>
 8005c80:	4621      	mov	r1, r4
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 fa5a 	bl	800613c <_fflush_r>
 8005c88:	b938      	cbnz	r0, 8005c9a <__swbuf_r+0x74>
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8e:	4621      	mov	r1, r4
 8005c90:	4628      	mov	r0, r5
 8005c92:	f000 f805 	bl	8005ca0 <__swsetup_r>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d0d5      	beq.n	8005c46 <__swbuf_r+0x20>
 8005c9a:	f04f 37ff 	mov.w	r7, #4294967295
 8005c9e:	e7f4      	b.n	8005c8a <__swbuf_r+0x64>

08005ca0 <__swsetup_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4b2a      	ldr	r3, [pc, #168]	; (8005d4c <__swsetup_r+0xac>)
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	b118      	cbz	r0, 8005cb4 <__swsetup_r+0x14>
 8005cac:	6a03      	ldr	r3, [r0, #32]
 8005cae:	b90b      	cbnz	r3, 8005cb4 <__swsetup_r+0x14>
 8005cb0:	f7ff fee4 	bl	8005a7c <__sinit>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cba:	0718      	lsls	r0, r3, #28
 8005cbc:	d422      	bmi.n	8005d04 <__swsetup_r+0x64>
 8005cbe:	06d9      	lsls	r1, r3, #27
 8005cc0:	d407      	bmi.n	8005cd2 <__swsetup_r+0x32>
 8005cc2:	2309      	movs	r3, #9
 8005cc4:	602b      	str	r3, [r5, #0]
 8005cc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cca:	f04f 30ff 	mov.w	r0, #4294967295
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	e034      	b.n	8005d3c <__swsetup_r+0x9c>
 8005cd2:	0758      	lsls	r0, r3, #29
 8005cd4:	d512      	bpl.n	8005cfc <__swsetup_r+0x5c>
 8005cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cd8:	b141      	cbz	r1, 8005cec <__swsetup_r+0x4c>
 8005cda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cde:	4299      	cmp	r1, r3
 8005ce0:	d002      	beq.n	8005ce8 <__swsetup_r+0x48>
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 f8ae 	bl	8005e44 <_free_r>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	6363      	str	r3, [r4, #52]	; 0x34
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cf2:	81a3      	strh	r3, [r4, #12]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6063      	str	r3, [r4, #4]
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	f043 0308 	orr.w	r3, r3, #8
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	b94b      	cbnz	r3, 8005d1c <__swsetup_r+0x7c>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d12:	d003      	beq.n	8005d1c <__swsetup_r+0x7c>
 8005d14:	4621      	mov	r1, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	f000 fa5d 	bl	80061d6 <__smakebuf_r>
 8005d1c:	89a0      	ldrh	r0, [r4, #12]
 8005d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d22:	f010 0301 	ands.w	r3, r0, #1
 8005d26:	d00a      	beq.n	8005d3e <__swsetup_r+0x9e>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60a3      	str	r3, [r4, #8]
 8005d2c:	6963      	ldr	r3, [r4, #20]
 8005d2e:	425b      	negs	r3, r3
 8005d30:	61a3      	str	r3, [r4, #24]
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	b943      	cbnz	r3, 8005d48 <__swsetup_r+0xa8>
 8005d36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d3a:	d1c4      	bne.n	8005cc6 <__swsetup_r+0x26>
 8005d3c:	bd38      	pop	{r3, r4, r5, pc}
 8005d3e:	0781      	lsls	r1, r0, #30
 8005d40:	bf58      	it	pl
 8005d42:	6963      	ldrpl	r3, [r4, #20]
 8005d44:	60a3      	str	r3, [r4, #8]
 8005d46:	e7f4      	b.n	8005d32 <__swsetup_r+0x92>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e7f7      	b.n	8005d3c <__swsetup_r+0x9c>
 8005d4c:	20000074 	.word	0x20000074

08005d50 <memset>:
 8005d50:	4402      	add	r2, r0
 8005d52:	4603      	mov	r3, r0
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d100      	bne.n	8005d5a <memset+0xa>
 8005d58:	4770      	bx	lr
 8005d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d5e:	e7f9      	b.n	8005d54 <memset+0x4>

08005d60 <_close_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	2300      	movs	r3, #0
 8005d64:	4d05      	ldr	r5, [pc, #20]	; (8005d7c <_close_r+0x1c>)
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	602b      	str	r3, [r5, #0]
 8005d6c:	f7fb f97b 	bl	8001066 <_close>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d102      	bne.n	8005d7a <_close_r+0x1a>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	b103      	cbz	r3, 8005d7a <_close_r+0x1a>
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
 8005d7c:	20000600 	.word	0x20000600

08005d80 <_lseek_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4604      	mov	r4, r0
 8005d84:	4d06      	ldr	r5, [pc, #24]	; (8005da0 <_lseek_r+0x20>)
 8005d86:	4608      	mov	r0, r1
 8005d88:	4611      	mov	r1, r2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	602a      	str	r2, [r5, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f7fb f990 	bl	80010b4 <_lseek>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_lseek_r+0x1e>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_lseek_r+0x1e>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	20000600 	.word	0x20000600

08005da4 <_read_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4604      	mov	r4, r0
 8005da8:	4d06      	ldr	r5, [pc, #24]	; (8005dc4 <_read_r+0x20>)
 8005daa:	4608      	mov	r0, r1
 8005dac:	4611      	mov	r1, r2
 8005dae:	2200      	movs	r2, #0
 8005db0:	602a      	str	r2, [r5, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f7fb f93a 	bl	800102c <_read>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d102      	bne.n	8005dc2 <_read_r+0x1e>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	b103      	cbz	r3, 8005dc2 <_read_r+0x1e>
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	20000600 	.word	0x20000600

08005dc8 <_write_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_write_r+0x20>)
 8005dce:	4608      	mov	r0, r1
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	602a      	str	r2, [r5, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f7fa fee8 	bl	8000bac <_write>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_write_r+0x1e>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_write_r+0x1e>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20000600 	.word	0x20000600

08005dec <__errno>:
 8005dec:	4b01      	ldr	r3, [pc, #4]	; (8005df4 <__errno+0x8>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000074 	.word	0x20000074

08005df8 <__libc_init_array>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	4d0d      	ldr	r5, [pc, #52]	; (8005e30 <__libc_init_array+0x38>)
 8005dfc:	2600      	movs	r6, #0
 8005dfe:	4c0d      	ldr	r4, [pc, #52]	; (8005e34 <__libc_init_array+0x3c>)
 8005e00:	1b64      	subs	r4, r4, r5
 8005e02:	10a4      	asrs	r4, r4, #2
 8005e04:	42a6      	cmp	r6, r4
 8005e06:	d109      	bne.n	8005e1c <__libc_init_array+0x24>
 8005e08:	4d0b      	ldr	r5, [pc, #44]	; (8005e38 <__libc_init_array+0x40>)
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	4c0b      	ldr	r4, [pc, #44]	; (8005e3c <__libc_init_array+0x44>)
 8005e0e:	f000 fa51 	bl	80062b4 <_init>
 8005e12:	1b64      	subs	r4, r4, r5
 8005e14:	10a4      	asrs	r4, r4, #2
 8005e16:	42a6      	cmp	r6, r4
 8005e18:	d105      	bne.n	8005e26 <__libc_init_array+0x2e>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e20:	3601      	adds	r6, #1
 8005e22:	4798      	blx	r3
 8005e24:	e7ee      	b.n	8005e04 <__libc_init_array+0xc>
 8005e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2a:	3601      	adds	r6, #1
 8005e2c:	4798      	blx	r3
 8005e2e:	e7f2      	b.n	8005e16 <__libc_init_array+0x1e>
 8005e30:	08006368 	.word	0x08006368
 8005e34:	08006368 	.word	0x08006368
 8005e38:	08006368 	.word	0x08006368
 8005e3c:	0800636c 	.word	0x0800636c

08005e40 <__retarget_lock_acquire_recursive>:
 8005e40:	4770      	bx	lr

08005e42 <__retarget_lock_release_recursive>:
 8005e42:	4770      	bx	lr

08005e44 <_free_r>:
 8005e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e46:	2900      	cmp	r1, #0
 8005e48:	d043      	beq.n	8005ed2 <_free_r+0x8e>
 8005e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4e:	1f0c      	subs	r4, r1, #4
 8005e50:	9001      	str	r0, [sp, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bfb8      	it	lt
 8005e56:	18e4      	addlt	r4, r4, r3
 8005e58:	f000 f8e0 	bl	800601c <__malloc_lock>
 8005e5c:	4a1e      	ldr	r2, [pc, #120]	; (8005ed8 <_free_r+0x94>)
 8005e5e:	9801      	ldr	r0, [sp, #4]
 8005e60:	6813      	ldr	r3, [r2, #0]
 8005e62:	b933      	cbnz	r3, 8005e72 <_free_r+0x2e>
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	6014      	str	r4, [r2, #0]
 8005e68:	b003      	add	sp, #12
 8005e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e6e:	f000 b8db 	b.w	8006028 <__malloc_unlock>
 8005e72:	42a3      	cmp	r3, r4
 8005e74:	d908      	bls.n	8005e88 <_free_r+0x44>
 8005e76:	6825      	ldr	r5, [r4, #0]
 8005e78:	1961      	adds	r1, r4, r5
 8005e7a:	428b      	cmp	r3, r1
 8005e7c:	bf01      	itttt	eq
 8005e7e:	6819      	ldreq	r1, [r3, #0]
 8005e80:	685b      	ldreq	r3, [r3, #4]
 8005e82:	1949      	addeq	r1, r1, r5
 8005e84:	6021      	streq	r1, [r4, #0]
 8005e86:	e7ed      	b.n	8005e64 <_free_r+0x20>
 8005e88:	461a      	mov	r2, r3
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	b10b      	cbz	r3, 8005e92 <_free_r+0x4e>
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	d9fa      	bls.n	8005e88 <_free_r+0x44>
 8005e92:	6811      	ldr	r1, [r2, #0]
 8005e94:	1855      	adds	r5, r2, r1
 8005e96:	42a5      	cmp	r5, r4
 8005e98:	d10b      	bne.n	8005eb2 <_free_r+0x6e>
 8005e9a:	6824      	ldr	r4, [r4, #0]
 8005e9c:	4421      	add	r1, r4
 8005e9e:	1854      	adds	r4, r2, r1
 8005ea0:	6011      	str	r1, [r2, #0]
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	d1e0      	bne.n	8005e68 <_free_r+0x24>
 8005ea6:	681c      	ldr	r4, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	440c      	add	r4, r1
 8005eac:	6053      	str	r3, [r2, #4]
 8005eae:	6014      	str	r4, [r2, #0]
 8005eb0:	e7da      	b.n	8005e68 <_free_r+0x24>
 8005eb2:	d902      	bls.n	8005eba <_free_r+0x76>
 8005eb4:	230c      	movs	r3, #12
 8005eb6:	6003      	str	r3, [r0, #0]
 8005eb8:	e7d6      	b.n	8005e68 <_free_r+0x24>
 8005eba:	6825      	ldr	r5, [r4, #0]
 8005ebc:	1961      	adds	r1, r4, r5
 8005ebe:	428b      	cmp	r3, r1
 8005ec0:	bf02      	ittt	eq
 8005ec2:	6819      	ldreq	r1, [r3, #0]
 8005ec4:	685b      	ldreq	r3, [r3, #4]
 8005ec6:	1949      	addeq	r1, r1, r5
 8005ec8:	6063      	str	r3, [r4, #4]
 8005eca:	bf08      	it	eq
 8005ecc:	6021      	streq	r1, [r4, #0]
 8005ece:	6054      	str	r4, [r2, #4]
 8005ed0:	e7ca      	b.n	8005e68 <_free_r+0x24>
 8005ed2:	b003      	add	sp, #12
 8005ed4:	bd30      	pop	{r4, r5, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000608 	.word	0x20000608

08005edc <sbrk_aligned>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	4e0e      	ldr	r6, [pc, #56]	; (8005f18 <sbrk_aligned+0x3c>)
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	6831      	ldr	r1, [r6, #0]
 8005ee6:	b911      	cbnz	r1, 8005eee <sbrk_aligned+0x12>
 8005ee8:	f000 f9d4 	bl	8006294 <_sbrk_r>
 8005eec:	6030      	str	r0, [r6, #0]
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f000 f9cf 	bl	8006294 <_sbrk_r>
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	d00a      	beq.n	8005f10 <sbrk_aligned+0x34>
 8005efa:	1cc4      	adds	r4, r0, #3
 8005efc:	f024 0403 	bic.w	r4, r4, #3
 8005f00:	42a0      	cmp	r0, r4
 8005f02:	d007      	beq.n	8005f14 <sbrk_aligned+0x38>
 8005f04:	1a21      	subs	r1, r4, r0
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 f9c4 	bl	8006294 <_sbrk_r>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d101      	bne.n	8005f14 <sbrk_aligned+0x38>
 8005f10:	f04f 34ff 	mov.w	r4, #4294967295
 8005f14:	4620      	mov	r0, r4
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	2000060c 	.word	0x2000060c

08005f1c <_malloc_r>:
 8005f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f20:	1ccd      	adds	r5, r1, #3
 8005f22:	4607      	mov	r7, r0
 8005f24:	f025 0503 	bic.w	r5, r5, #3
 8005f28:	3508      	adds	r5, #8
 8005f2a:	2d0c      	cmp	r5, #12
 8005f2c:	bf38      	it	cc
 8005f2e:	250c      	movcc	r5, #12
 8005f30:	2d00      	cmp	r5, #0
 8005f32:	db01      	blt.n	8005f38 <_malloc_r+0x1c>
 8005f34:	42a9      	cmp	r1, r5
 8005f36:	d905      	bls.n	8005f44 <_malloc_r+0x28>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	2600      	movs	r6, #0
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	4630      	mov	r0, r6
 8005f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006018 <_malloc_r+0xfc>
 8005f48:	f000 f868 	bl	800601c <__malloc_lock>
 8005f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f50:	461c      	mov	r4, r3
 8005f52:	bb5c      	cbnz	r4, 8005fac <_malloc_r+0x90>
 8005f54:	4629      	mov	r1, r5
 8005f56:	4638      	mov	r0, r7
 8005f58:	f7ff ffc0 	bl	8005edc <sbrk_aligned>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	4604      	mov	r4, r0
 8005f60:	d155      	bne.n	800600e <_malloc_r+0xf2>
 8005f62:	f8d8 4000 	ldr.w	r4, [r8]
 8005f66:	4626      	mov	r6, r4
 8005f68:	2e00      	cmp	r6, #0
 8005f6a:	d145      	bne.n	8005ff8 <_malloc_r+0xdc>
 8005f6c:	2c00      	cmp	r4, #0
 8005f6e:	d048      	beq.n	8006002 <_malloc_r+0xe6>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	4631      	mov	r1, r6
 8005f74:	4638      	mov	r0, r7
 8005f76:	eb04 0903 	add.w	r9, r4, r3
 8005f7a:	f000 f98b 	bl	8006294 <_sbrk_r>
 8005f7e:	4581      	cmp	r9, r0
 8005f80:	d13f      	bne.n	8006002 <_malloc_r+0xe6>
 8005f82:	6821      	ldr	r1, [r4, #0]
 8005f84:	4638      	mov	r0, r7
 8005f86:	1a6d      	subs	r5, r5, r1
 8005f88:	4629      	mov	r1, r5
 8005f8a:	f7ff ffa7 	bl	8005edc <sbrk_aligned>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d037      	beq.n	8006002 <_malloc_r+0xe6>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	442b      	add	r3, r5
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	f8d8 3000 	ldr.w	r3, [r8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d038      	beq.n	8006012 <_malloc_r+0xf6>
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	42a2      	cmp	r2, r4
 8005fa4:	d12b      	bne.n	8005ffe <_malloc_r+0xe2>
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	e00f      	b.n	8005fcc <_malloc_r+0xb0>
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	1b52      	subs	r2, r2, r5
 8005fb0:	d41f      	bmi.n	8005ff2 <_malloc_r+0xd6>
 8005fb2:	2a0b      	cmp	r2, #11
 8005fb4:	d917      	bls.n	8005fe6 <_malloc_r+0xca>
 8005fb6:	1961      	adds	r1, r4, r5
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	6025      	str	r5, [r4, #0]
 8005fbc:	bf18      	it	ne
 8005fbe:	6059      	strne	r1, [r3, #4]
 8005fc0:	6863      	ldr	r3, [r4, #4]
 8005fc2:	bf08      	it	eq
 8005fc4:	f8c8 1000 	streq.w	r1, [r8]
 8005fc8:	5162      	str	r2, [r4, r5]
 8005fca:	604b      	str	r3, [r1, #4]
 8005fcc:	f104 060b 	add.w	r6, r4, #11
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f000 f829 	bl	8006028 <__malloc_unlock>
 8005fd6:	1d23      	adds	r3, r4, #4
 8005fd8:	f026 0607 	bic.w	r6, r6, #7
 8005fdc:	1af2      	subs	r2, r6, r3
 8005fde:	d0ae      	beq.n	8005f3e <_malloc_r+0x22>
 8005fe0:	1b9b      	subs	r3, r3, r6
 8005fe2:	50a3      	str	r3, [r4, r2]
 8005fe4:	e7ab      	b.n	8005f3e <_malloc_r+0x22>
 8005fe6:	42a3      	cmp	r3, r4
 8005fe8:	6862      	ldr	r2, [r4, #4]
 8005fea:	d1dd      	bne.n	8005fa8 <_malloc_r+0x8c>
 8005fec:	f8c8 2000 	str.w	r2, [r8]
 8005ff0:	e7ec      	b.n	8005fcc <_malloc_r+0xb0>
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	6864      	ldr	r4, [r4, #4]
 8005ff6:	e7ac      	b.n	8005f52 <_malloc_r+0x36>
 8005ff8:	4634      	mov	r4, r6
 8005ffa:	6876      	ldr	r6, [r6, #4]
 8005ffc:	e7b4      	b.n	8005f68 <_malloc_r+0x4c>
 8005ffe:	4613      	mov	r3, r2
 8006000:	e7cc      	b.n	8005f9c <_malloc_r+0x80>
 8006002:	230c      	movs	r3, #12
 8006004:	4638      	mov	r0, r7
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	f000 f80e 	bl	8006028 <__malloc_unlock>
 800600c:	e797      	b.n	8005f3e <_malloc_r+0x22>
 800600e:	6025      	str	r5, [r4, #0]
 8006010:	e7dc      	b.n	8005fcc <_malloc_r+0xb0>
 8006012:	605b      	str	r3, [r3, #4]
 8006014:	deff      	udf	#255	; 0xff
 8006016:	bf00      	nop
 8006018:	20000608 	.word	0x20000608

0800601c <__malloc_lock>:
 800601c:	4801      	ldr	r0, [pc, #4]	; (8006024 <__malloc_lock+0x8>)
 800601e:	f7ff bf0f 	b.w	8005e40 <__retarget_lock_acquire_recursive>
 8006022:	bf00      	nop
 8006024:	20000604 	.word	0x20000604

08006028 <__malloc_unlock>:
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <__malloc_unlock+0x8>)
 800602a:	f7ff bf0a 	b.w	8005e42 <__retarget_lock_release_recursive>
 800602e:	bf00      	nop
 8006030:	20000604 	.word	0x20000604

08006034 <__sflush_r>:
 8006034:	898a      	ldrh	r2, [r1, #12]
 8006036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603a:	4605      	mov	r5, r0
 800603c:	0710      	lsls	r0, r2, #28
 800603e:	460c      	mov	r4, r1
 8006040:	d458      	bmi.n	80060f4 <__sflush_r+0xc0>
 8006042:	684b      	ldr	r3, [r1, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	dc05      	bgt.n	8006054 <__sflush_r+0x20>
 8006048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	dc02      	bgt.n	8006054 <__sflush_r+0x20>
 800604e:	2000      	movs	r0, #0
 8006050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006056:	2e00      	cmp	r6, #0
 8006058:	d0f9      	beq.n	800604e <__sflush_r+0x1a>
 800605a:	2300      	movs	r3, #0
 800605c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006060:	682f      	ldr	r7, [r5, #0]
 8006062:	6a21      	ldr	r1, [r4, #32]
 8006064:	602b      	str	r3, [r5, #0]
 8006066:	d032      	beq.n	80060ce <__sflush_r+0x9a>
 8006068:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	075a      	lsls	r2, r3, #29
 800606e:	d505      	bpl.n	800607c <__sflush_r+0x48>
 8006070:	6863      	ldr	r3, [r4, #4]
 8006072:	1ac0      	subs	r0, r0, r3
 8006074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006076:	b10b      	cbz	r3, 800607c <__sflush_r+0x48>
 8006078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800607a:	1ac0      	subs	r0, r0, r3
 800607c:	2300      	movs	r3, #0
 800607e:	4602      	mov	r2, r0
 8006080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006082:	4628      	mov	r0, r5
 8006084:	6a21      	ldr	r1, [r4, #32]
 8006086:	47b0      	blx	r6
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	d106      	bne.n	800609c <__sflush_r+0x68>
 800608e:	6829      	ldr	r1, [r5, #0]
 8006090:	291d      	cmp	r1, #29
 8006092:	d82b      	bhi.n	80060ec <__sflush_r+0xb8>
 8006094:	4a28      	ldr	r2, [pc, #160]	; (8006138 <__sflush_r+0x104>)
 8006096:	410a      	asrs	r2, r1
 8006098:	07d6      	lsls	r6, r2, #31
 800609a:	d427      	bmi.n	80060ec <__sflush_r+0xb8>
 800609c:	2200      	movs	r2, #0
 800609e:	04d9      	lsls	r1, r3, #19
 80060a0:	6062      	str	r2, [r4, #4]
 80060a2:	6922      	ldr	r2, [r4, #16]
 80060a4:	6022      	str	r2, [r4, #0]
 80060a6:	d504      	bpl.n	80060b2 <__sflush_r+0x7e>
 80060a8:	1c42      	adds	r2, r0, #1
 80060aa:	d101      	bne.n	80060b0 <__sflush_r+0x7c>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b903      	cbnz	r3, 80060b2 <__sflush_r+0x7e>
 80060b0:	6560      	str	r0, [r4, #84]	; 0x54
 80060b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b4:	602f      	str	r7, [r5, #0]
 80060b6:	2900      	cmp	r1, #0
 80060b8:	d0c9      	beq.n	800604e <__sflush_r+0x1a>
 80060ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060be:	4299      	cmp	r1, r3
 80060c0:	d002      	beq.n	80060c8 <__sflush_r+0x94>
 80060c2:	4628      	mov	r0, r5
 80060c4:	f7ff febe 	bl	8005e44 <_free_r>
 80060c8:	2000      	movs	r0, #0
 80060ca:	6360      	str	r0, [r4, #52]	; 0x34
 80060cc:	e7c0      	b.n	8006050 <__sflush_r+0x1c>
 80060ce:	2301      	movs	r3, #1
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b0      	blx	r6
 80060d4:	1c41      	adds	r1, r0, #1
 80060d6:	d1c8      	bne.n	800606a <__sflush_r+0x36>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0c5      	beq.n	800606a <__sflush_r+0x36>
 80060de:	2b1d      	cmp	r3, #29
 80060e0:	d001      	beq.n	80060e6 <__sflush_r+0xb2>
 80060e2:	2b16      	cmp	r3, #22
 80060e4:	d101      	bne.n	80060ea <__sflush_r+0xb6>
 80060e6:	602f      	str	r7, [r5, #0]
 80060e8:	e7b1      	b.n	800604e <__sflush_r+0x1a>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f0:	81a3      	strh	r3, [r4, #12]
 80060f2:	e7ad      	b.n	8006050 <__sflush_r+0x1c>
 80060f4:	690f      	ldr	r7, [r1, #16]
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	d0a9      	beq.n	800604e <__sflush_r+0x1a>
 80060fa:	0793      	lsls	r3, r2, #30
 80060fc:	680e      	ldr	r6, [r1, #0]
 80060fe:	600f      	str	r7, [r1, #0]
 8006100:	bf0c      	ite	eq
 8006102:	694b      	ldreq	r3, [r1, #20]
 8006104:	2300      	movne	r3, #0
 8006106:	eba6 0807 	sub.w	r8, r6, r7
 800610a:	608b      	str	r3, [r1, #8]
 800610c:	f1b8 0f00 	cmp.w	r8, #0
 8006110:	dd9d      	ble.n	800604e <__sflush_r+0x1a>
 8006112:	4643      	mov	r3, r8
 8006114:	463a      	mov	r2, r7
 8006116:	6a21      	ldr	r1, [r4, #32]
 8006118:	4628      	mov	r0, r5
 800611a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800611c:	47b0      	blx	r6
 800611e:	2800      	cmp	r0, #0
 8006120:	dc06      	bgt.n	8006130 <__sflush_r+0xfc>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612c:	81a3      	strh	r3, [r4, #12]
 800612e:	e78f      	b.n	8006050 <__sflush_r+0x1c>
 8006130:	4407      	add	r7, r0
 8006132:	eba8 0800 	sub.w	r8, r8, r0
 8006136:	e7e9      	b.n	800610c <__sflush_r+0xd8>
 8006138:	dfbffffe 	.word	0xdfbffffe

0800613c <_fflush_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	690b      	ldr	r3, [r1, #16]
 8006140:	4605      	mov	r5, r0
 8006142:	460c      	mov	r4, r1
 8006144:	b913      	cbnz	r3, 800614c <_fflush_r+0x10>
 8006146:	2500      	movs	r5, #0
 8006148:	4628      	mov	r0, r5
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	b118      	cbz	r0, 8006156 <_fflush_r+0x1a>
 800614e:	6a03      	ldr	r3, [r0, #32]
 8006150:	b90b      	cbnz	r3, 8006156 <_fflush_r+0x1a>
 8006152:	f7ff fc93 	bl	8005a7c <__sinit>
 8006156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f3      	beq.n	8006146 <_fflush_r+0xa>
 800615e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006160:	07d0      	lsls	r0, r2, #31
 8006162:	d404      	bmi.n	800616e <_fflush_r+0x32>
 8006164:	0599      	lsls	r1, r3, #22
 8006166:	d402      	bmi.n	800616e <_fflush_r+0x32>
 8006168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800616a:	f7ff fe69 	bl	8005e40 <__retarget_lock_acquire_recursive>
 800616e:	4628      	mov	r0, r5
 8006170:	4621      	mov	r1, r4
 8006172:	f7ff ff5f 	bl	8006034 <__sflush_r>
 8006176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006178:	4605      	mov	r5, r0
 800617a:	07da      	lsls	r2, r3, #31
 800617c:	d4e4      	bmi.n	8006148 <_fflush_r+0xc>
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	059b      	lsls	r3, r3, #22
 8006182:	d4e1      	bmi.n	8006148 <_fflush_r+0xc>
 8006184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006186:	f7ff fe5c 	bl	8005e42 <__retarget_lock_release_recursive>
 800618a:	e7dd      	b.n	8006148 <_fflush_r+0xc>

0800618c <__swhatbuf_r>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	460c      	mov	r4, r1
 8006190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006194:	b096      	sub	sp, #88	; 0x58
 8006196:	4615      	mov	r5, r2
 8006198:	2900      	cmp	r1, #0
 800619a:	461e      	mov	r6, r3
 800619c:	da0c      	bge.n	80061b8 <__swhatbuf_r+0x2c>
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	2100      	movs	r1, #0
 80061a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80061a6:	bf0c      	ite	eq
 80061a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80061ac:	2340      	movne	r3, #64	; 0x40
 80061ae:	2000      	movs	r0, #0
 80061b0:	6031      	str	r1, [r6, #0]
 80061b2:	602b      	str	r3, [r5, #0]
 80061b4:	b016      	add	sp, #88	; 0x58
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	466a      	mov	r2, sp
 80061ba:	f000 f849 	bl	8006250 <_fstat_r>
 80061be:	2800      	cmp	r0, #0
 80061c0:	dbed      	blt.n	800619e <__swhatbuf_r+0x12>
 80061c2:	9901      	ldr	r1, [sp, #4]
 80061c4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80061c8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80061cc:	4259      	negs	r1, r3
 80061ce:	4159      	adcs	r1, r3
 80061d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d4:	e7eb      	b.n	80061ae <__swhatbuf_r+0x22>

080061d6 <__smakebuf_r>:
 80061d6:	898b      	ldrh	r3, [r1, #12]
 80061d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061da:	079d      	lsls	r5, r3, #30
 80061dc:	4606      	mov	r6, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	d507      	bpl.n	80061f2 <__smakebuf_r+0x1c>
 80061e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061e6:	6023      	str	r3, [r4, #0]
 80061e8:	6123      	str	r3, [r4, #16]
 80061ea:	2301      	movs	r3, #1
 80061ec:	6163      	str	r3, [r4, #20]
 80061ee:	b002      	add	sp, #8
 80061f0:	bd70      	pop	{r4, r5, r6, pc}
 80061f2:	ab01      	add	r3, sp, #4
 80061f4:	466a      	mov	r2, sp
 80061f6:	f7ff ffc9 	bl	800618c <__swhatbuf_r>
 80061fa:	9900      	ldr	r1, [sp, #0]
 80061fc:	4605      	mov	r5, r0
 80061fe:	4630      	mov	r0, r6
 8006200:	f7ff fe8c 	bl	8005f1c <_malloc_r>
 8006204:	b948      	cbnz	r0, 800621a <__smakebuf_r+0x44>
 8006206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620a:	059a      	lsls	r2, r3, #22
 800620c:	d4ef      	bmi.n	80061ee <__smakebuf_r+0x18>
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	f043 0302 	orr.w	r3, r3, #2
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	e7e3      	b.n	80061e2 <__smakebuf_r+0xc>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	6020      	str	r0, [r4, #0]
 800621e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006222:	6120      	str	r0, [r4, #16]
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	9b00      	ldr	r3, [sp, #0]
 8006228:	6163      	str	r3, [r4, #20]
 800622a:	9b01      	ldr	r3, [sp, #4]
 800622c:	b15b      	cbz	r3, 8006246 <__smakebuf_r+0x70>
 800622e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006232:	4630      	mov	r0, r6
 8006234:	f000 f81e 	bl	8006274 <_isatty_r>
 8006238:	b128      	cbz	r0, 8006246 <__smakebuf_r+0x70>
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f023 0303 	bic.w	r3, r3, #3
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	81a3      	strh	r3, [r4, #12]
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	431d      	orrs	r5, r3
 800624a:	81a5      	strh	r5, [r4, #12]
 800624c:	e7cf      	b.n	80061ee <__smakebuf_r+0x18>
	...

08006250 <_fstat_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	2300      	movs	r3, #0
 8006254:	4d06      	ldr	r5, [pc, #24]	; (8006270 <_fstat_r+0x20>)
 8006256:	4604      	mov	r4, r0
 8006258:	4608      	mov	r0, r1
 800625a:	4611      	mov	r1, r2
 800625c:	602b      	str	r3, [r5, #0]
 800625e:	f7fa ff0e 	bl	800107e <_fstat>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d102      	bne.n	800626c <_fstat_r+0x1c>
 8006266:	682b      	ldr	r3, [r5, #0]
 8006268:	b103      	cbz	r3, 800626c <_fstat_r+0x1c>
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	bd38      	pop	{r3, r4, r5, pc}
 800626e:	bf00      	nop
 8006270:	20000600 	.word	0x20000600

08006274 <_isatty_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	2300      	movs	r3, #0
 8006278:	4d05      	ldr	r5, [pc, #20]	; (8006290 <_isatty_r+0x1c>)
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f7fa ff0d 	bl	800109e <_isatty>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_isatty_r+0x1a>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_isatty_r+0x1a>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20000600 	.word	0x20000600

08006294 <_sbrk_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	2300      	movs	r3, #0
 8006298:	4d05      	ldr	r5, [pc, #20]	; (80062b0 <_sbrk_r+0x1c>)
 800629a:	4604      	mov	r4, r0
 800629c:	4608      	mov	r0, r1
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	f7fa ff16 	bl	80010d0 <_sbrk>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_sbrk_r+0x1a>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_sbrk_r+0x1a>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20000600 	.word	0x20000600

080062b4 <_init>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr

080062c0 <_fini>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr
