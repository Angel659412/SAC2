
Tarea1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005640  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b4  080058b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058bc  080058bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  2000000c  080058d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  080058d0  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a779  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003564  00000000  00000000  0003a7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0003dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001099  00000000  00000000  0003f318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d6e5  00000000  00000000  000403b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f25  00000000  00000000  0006da96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00127585  00000000  00000000  000869bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cbc  00000000  00000000  001adf40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001b3bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	0800581c 	.word	0x0800581c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	0800581c 	.word	0x0800581c

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fd89 	bl	80010ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f826 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fa0a 	bl	80009d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f888 	bl	80006d8 <MX_ADC1_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f8fc 	bl	80007c4 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80005cc:	f000 f90e 	bl	80007ec <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005d0:	f000 f95a 	bl	8000888 <MX_RTC_Init>
  MX_UCPD1_Init();
 80005d4:	f000 f9a2 	bl	800091c <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80005d8:	f000 f9d6 	bl	8000988 <MX_USB_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(state == 1){
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <main+0x50>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d108      	bne.n	80005f6 <main+0x42>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //Complemento el pin
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	4808      	ldr	r0, [pc, #32]	; (8000608 <main+0x54>)
 80005e8:	f002 f854 	bl	8002694 <HAL_GPIO_TogglePin>
		  HAL_Delay(500); //500ms = 0,5s = 2Hz
 80005ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f0:	f000 fde4 	bl	80011bc <HAL_Delay>
 80005f4:	e7f2      	b.n	80005dc <main+0x28>
	  } else {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Apago el pin
 80005f6:	2200      	movs	r2, #0
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <main+0x54>)
 80005fc:	f002 f832 	bl	8002664 <HAL_GPIO_WritePin>
	  if(state == 1){
 8000600:	e7ec      	b.n	80005dc <main+0x28>
 8000602:	bf00      	nop
 8000604:	20000440 	.word	0x20000440
 8000608:	42020800 	.word	0x42020800

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b098      	sub	sp, #96	; 0x60
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2248      	movs	r2, #72	; 0x48
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 f8d2 	bl	80057c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800062e:	2000      	movs	r0, #0
 8000630:	f002 f9ce 	bl	80029d0 <HAL_PWREx_ControlVoltageScaling>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800063a:	f000 faa3 	bl	8000b84 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063e:	f002 f9a9 	bl	8002994 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000642:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <SystemClock_Config+0xc8>)
 8000644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <SystemClock_Config+0xc8>)
 800064a:	f023 0318 	bic.w	r3, r3, #24
 800064e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000652:	2336      	movs	r3, #54	; 0x36
 8000654:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000656:	2381      	movs	r3, #129	; 0x81
 8000658:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000670:	2360      	movs	r3, #96	; 0x60
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000678:	2301      	movs	r3, #1
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000680:	2337      	movs	r3, #55	; 0x37
 8000682:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000684:	2307      	movs	r3, #7
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0318 	add.w	r3, r7, #24
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fa2b 	bl	8002af0 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a0:	f000 fa70 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2303      	movs	r3, #3
 80006aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2105      	movs	r1, #5
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 feed 	bl	800349c <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c8:	f000 fa5c 	bl	8000b84 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3760      	adds	r7, #96	; 0x60
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006fa:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <MX_ADC1_Init+0xe0>)
 80006fc:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <MX_ADC1_Init+0xe4>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <MX_ADC1_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000712:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <MX_ADC1_Init+0xe0>)
 800071a:	2204      	movs	r2, #4
 800071c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000724:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800072a:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_ADC1_Init+0xe0>)
 800072c:	2201      	movs	r2, #1
 800072e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_ADC1_Init+0xe0>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_ADC1_Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075a:	4817      	ldr	r0, [pc, #92]	; (80007b8 <MX_ADC1_Init+0xe0>)
 800075c:	f000 fef2 	bl	8001544 <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000766:	f000 fa0d 	bl	8000b84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4810      	ldr	r0, [pc, #64]	; (80007b8 <MX_ADC1_Init+0xe0>)
 8000776:	f001 fc41 	bl	8001ffc <HAL_ADCEx_MultiModeConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000780:	f000 fa00 	bl	8000b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000788:	2306      	movs	r3, #6
 800078a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000790:	237f      	movs	r3, #127	; 0x7f
 8000792:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000794:	2304      	movs	r3, #4
 8000796:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_ADC1_Init+0xe0>)
 80007a2:	f001 f81b 	bl	80017dc <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007ac:	f000 f9ea 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000028 	.word	0x20000028
 80007bc:	42028000 	.word	0x42028000
 80007c0:	0c900008 	.word	0x0c900008

080007c4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f001 ffaf 	bl	800272c <HAL_ICACHE_ConfigAssociativityMode>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007d4:	f000 f9d6 	bl	8000b84 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007d8:	f001 ffc8 	bl	800276c <HAL_ICACHE_Enable>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007e2:	f000 f9cf 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <MX_LPUART1_UART_Init+0x94>)
 80007f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 80007f8:	4a22      	ldr	r2, [pc, #136]	; (8000884 <MX_LPUART1_UART_Init+0x98>)
 80007fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000810:	220c      	movs	r2, #12
 8000812:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000834:	f003 ff66 	bl	8004704 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800083e:	f000 f9a1 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000846:	f004 fcff 	bl	8005248 <HAL_UARTEx_SetTxFifoThreshold>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000850:	f000 f998 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4809      	ldr	r0, [pc, #36]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000858:	f004 fd34 	bl	80052c4 <HAL_UARTEx_SetRxFifoThreshold>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000862:	f000 f98f 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000868:	f004 fcb5 	bl	80051d6 <HAL_UARTEx_DisableFifoMode>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000872:	f000 f987 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000090 	.word	0x20000090
 8000880:	40008000 	.word	0x40008000
 8000884:	00033324 	.word	0x00033324

08000888 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_RTC_Init+0x8c>)
 80008a0:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <MX_RTC_Init+0x90>)
 80008a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_RTC_Init+0x8c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_RTC_Init+0x8c>)
 80008ac:	227f      	movs	r2, #127	; 0x7f
 80008ae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_RTC_Init+0x8c>)
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_RTC_Init+0x8c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_RTC_Init+0x8c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_RTC_Init+0x8c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_RTC_Init+0x8c>)
 80008ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_RTC_Init+0x8c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <MX_RTC_Init+0x8c>)
 80008d8:	f003 fdda 	bl	8004490 <HAL_RTC_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80008e2:	f000 f94f 	bl	8000b84 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_RTC_Init+0x8c>)
 80008fc:	f003 fed6 	bl	80046ac <HAL_RTCEx_PrivilegeModeSet>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000906:	f000 f93d 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000124 	.word	0x20000124
 8000918:	40002800 	.word	0x40002800

0800091c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000932:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000936:	f7ff fe25 	bl	8000584 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff fe0a 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fe07 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800094c:	2303      	movs	r3, #3
 800094e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_UCPD1_Init+0x64>)
 800095a:	f004 fe8a 	bl	8005672 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800095e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000962:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000964:	2303      	movs	r3, #3
 8000966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_UCPD1_Init+0x68>)
 8000972:	f004 fe7e 	bl	8005672 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	42020400 	.word	0x42020400
 8000984:	42020000 	.word	0x42020000

08000988 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_USB_PCD_Init+0x48>)
 800098e:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <MX_USB_PCD_Init+0x4c>)
 8000990:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USB_PCD_Init+0x48>)
 8000994:	2208      	movs	r2, #8
 8000996:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_USB_PCD_Init+0x48>)
 800099a:	2202      	movs	r2, #2
 800099c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USB_PCD_Init+0x48>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_USB_PCD_Init+0x48>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USB_PCD_Init+0x48>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_USB_PCD_Init+0x48>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USB_PCD_Init+0x48>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_USB_PCD_Init+0x48>)
 80009be:	f001 fee5 	bl	800278c <HAL_PCD_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80009c8:	f000 f8dc 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000014c 	.word	0x2000014c
 80009d4:	4000d400 	.word	0x4000d400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b54      	ldr	r3, [pc, #336]	; (8000b40 <MX_GPIO_Init+0x168>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a53      	ldr	r2, [pc, #332]	; (8000b40 <MX_GPIO_Init+0x168>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b51      	ldr	r3, [pc, #324]	; (8000b40 <MX_GPIO_Init+0x168>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a06:	4b4e      	ldr	r3, [pc, #312]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a4d      	ldr	r2, [pc, #308]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a0c:	f043 0320 	orr.w	r3, r3, #32
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b4b      	ldr	r3, [pc, #300]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0320 	and.w	r3, r3, #32
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a47      	ldr	r2, [pc, #284]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b45      	ldr	r3, [pc, #276]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a41      	ldr	r2, [pc, #260]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a4e:	f002 f81b 	bl	8002a88 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b3b      	ldr	r3, [pc, #236]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a3a      	ldr	r2, [pc, #232]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	4835      	ldr	r0, [pc, #212]	; (8000b44 <MX_GPIO_Init+0x16c>)
 8000a70:	f001 fdf8 	bl	8002664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7a:	4833      	ldr	r0, [pc, #204]	; (8000b48 <MX_GPIO_Init+0x170>)
 8000a7c:	f001 fdf2 	bl	8002664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	21a0      	movs	r1, #160	; 0xa0
 8000a84:	4831      	ldr	r0, [pc, #196]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a86:	f001 fded 	bl	8002664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4828      	ldr	r0, [pc, #160]	; (8000b44 <MX_GPIO_Init+0x16c>)
 8000aa2:	f001 fc5f 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4824      	ldr	r0, [pc, #144]	; (8000b50 <MX_GPIO_Init+0x178>)
 8000abe:	f001 fc51 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481a      	ldr	r0, [pc, #104]	; (8000b44 <MX_GPIO_Init+0x16c>)
 8000ada:	f001 fc43 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <MX_GPIO_Init+0x170>)
 8000af8:	f001 fc34 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000afc:	23a0      	movs	r3, #160	; 0xa0
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000b14:	f001 fc26 	bl	8002364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2018      	movs	r0, #24
 8000b1e:	f001 fbec 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b22:	2018      	movs	r0, #24
 8000b24:	f001 fc03 	bl	800232e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2019      	movs	r0, #25
 8000b2e:	f001 fbe4 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8000b32:	2019      	movs	r0, #25
 8000b34:	f001 fbfb 	bl	800232e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	42020800 	.word	0x42020800
 8000b48:	42020000 	.word	0x42020000
 8000b4c:	42020400 	.word	0x42020400
 8000b50:	42021400 	.word	0x42021400

08000b54 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
	state = state==0?1:0;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bf0c      	ite	eq
 8000b66:	2301      	moveq	r3, #1
 8000b68:	2300      	movne	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000440 	.word	0x20000440

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0ae      	sub	sp, #184	; 0xb8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	2294      	movs	r2, #148	; 0x94
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 fde3 	bl	80057c4 <memset>
  if(hadc->Instance==ADC1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a1f      	ldr	r2, [pc, #124]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d137      	bne.n	8000c78 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000c0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 ff22 	bl	8003a64 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000c26:	f7ff ffad 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_ADC_MspInit+0xac>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <HAL_ADC_MspInit+0xac>)
 8000c30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_ADC_MspInit+0xac>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_ADC_MspInit+0xac>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_ADC_MspInit+0xac>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_ADC_MspInit+0xac>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c60:	2303      	movs	r3, #3
 8000c62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_ADC_MspInit+0xb0>)
 8000c74:	f001 fb76 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	37b8      	adds	r7, #184	; 0xb8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	42028000 	.word	0x42028000
 8000c84:	40021000 	.word	0x40021000
 8000c88:	42020800 	.word	0x42020800

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0ae      	sub	sp, #184	; 0xb8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2294      	movs	r2, #148	; 0x94
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f004 fd89 	bl	80057c4 <memset>
  if(huart->Instance==LPUART1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <HAL_UART_MspInit+0xb4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d13d      	bne.n	8000d38 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fecb 	bl	8003a64 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd4:	f7ff ff56 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000d08:	f001 febe 	bl	8002a88 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000d0c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d26:	2308      	movs	r3, #8
 8000d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_UART_MspInit+0xbc>)
 8000d34:	f001 fb16 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	37b8      	adds	r7, #184	; 0xb8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40008000 	.word	0x40008000
 8000d44:	40021000 	.word	0x40021000
 8000d48:	42021800 	.word	0x42021800

08000d4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0a8      	sub	sp, #160	; 0xa0
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2294      	movs	r2, #148	; 0x94
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f004 fd31 	bl	80057c4 <memset>
  if(hrtc->Instance==RTC)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <HAL_RTC_MspInit+0x74>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d124      	bne.n	8000db6 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d70:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fe70 	bl	8003a64 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d8a:	f7ff fefb 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_RTC_MspInit+0x78>)
 8000d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_RTC_MspInit+0x78>)
 8000d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_RTC_MspInit+0x78>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_RTC_MspInit+0x78>)
 8000da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_RTC_MspInit+0x78>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	37a0      	adds	r7, #160	; 0xa0
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40002800 	.word	0x40002800
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0ae      	sub	sp, #184	; 0xb8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2294      	movs	r2, #148	; 0x94
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f004 fceb 	bl	80057c4 <memset>
  if(hpcd->Instance==USB)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <HAL_PCD_MspInit+0xb4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d13d      	bne.n	8000e74 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 fe2b 	bl	8003a64 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e14:	f7ff feb6 	bl	8000b84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_PCD_MspInit+0xb8>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <HAL_PCD_MspInit+0xb8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_PCD_MspInit+0xb8>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e54:	4619      	mov	r1, r3
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <HAL_PCD_MspInit+0xbc>)
 8000e58:	f001 fa84 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_PCD_MspInit+0xb8>)
 8000e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_PCD_MspInit+0xb8>)
 8000e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e66:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_PCD_MspInit+0xb8>)
 8000e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	37b8      	adds	r7, #184	; 0xb8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	4000d400 	.word	0x4000d400
 8000e80:	40021000 	.word	0x40021000
 8000e84:	42020000 	.word	0x42020000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f952 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ee0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ee4:	f001 fbf0 	bl	80026c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000ef0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ef4:	f001 fbe8 	bl	80026c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000f26:	4b4f      	ldr	r3, [pc, #316]	; (8001064 <SystemCoreClockUpdate+0x144>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d107      	bne.n	8000f42 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000f32:	4b4c      	ldr	r3, [pc, #304]	; (8001064 <SystemCoreClockUpdate+0x144>)
 8000f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e005      	b.n	8000f4e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000f42:	4b48      	ldr	r3, [pc, #288]	; (8001064 <SystemCoreClockUpdate+0x144>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000f4e:	4a46      	ldr	r2, [pc, #280]	; (8001068 <SystemCoreClockUpdate+0x148>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f58:	4b42      	ldr	r3, [pc, #264]	; (8001064 <SystemCoreClockUpdate+0x144>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 030c 	and.w	r3, r3, #12
 8000f60:	2b0c      	cmp	r3, #12
 8000f62:	d866      	bhi.n	8001032 <SystemCoreClockUpdate+0x112>
 8000f64:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <SystemCoreClockUpdate+0x4c>)
 8000f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6a:	bf00      	nop
 8000f6c:	08000fa1 	.word	0x08000fa1
 8000f70:	08001033 	.word	0x08001033
 8000f74:	08001033 	.word	0x08001033
 8000f78:	08001033 	.word	0x08001033
 8000f7c:	08000fa9 	.word	0x08000fa9
 8000f80:	08001033 	.word	0x08001033
 8000f84:	08001033 	.word	0x08001033
 8000f88:	08001033 	.word	0x08001033
 8000f8c:	08000fb1 	.word	0x08000fb1
 8000f90:	08001033 	.word	0x08001033
 8000f94:	08001033 	.word	0x08001033
 8000f98:	08001033 	.word	0x08001033
 8000f9c:	08000fb9 	.word	0x08000fb9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000fa0:	4a32      	ldr	r2, [pc, #200]	; (800106c <SystemCoreClockUpdate+0x14c>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	6013      	str	r3, [r2, #0]
      break;
 8000fa6:	e048      	b.n	800103a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <SystemCoreClockUpdate+0x14c>)
 8000faa:	4a31      	ldr	r2, [pc, #196]	; (8001070 <SystemCoreClockUpdate+0x150>)
 8000fac:	601a      	str	r2, [r3, #0]
      break;
 8000fae:	e044      	b.n	800103a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <SystemCoreClockUpdate+0x14c>)
 8000fb2:	4a30      	ldr	r2, [pc, #192]	; (8001074 <SystemCoreClockUpdate+0x154>)
 8000fb4:	601a      	str	r2, [r3, #0]
      break;
 8000fb6:	e040      	b.n	800103a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <SystemCoreClockUpdate+0x144>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <SystemCoreClockUpdate+0x144>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d003      	beq.n	8000fde <SystemCoreClockUpdate+0xbe>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d006      	beq.n	8000fea <SystemCoreClockUpdate+0xca>
 8000fdc:	e00b      	b.n	8000ff6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000fde:	4a24      	ldr	r2, [pc, #144]	; (8001070 <SystemCoreClockUpdate+0x150>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	613b      	str	r3, [r7, #16]
          break;
 8000fe8:	e00b      	b.n	8001002 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <SystemCoreClockUpdate+0x154>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	613b      	str	r3, [r7, #16]
          break;
 8000ff4:	e005      	b.n	8001002 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	613b      	str	r3, [r7, #16]
          break;
 8001000:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <SystemCoreClockUpdate+0x144>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <SystemCoreClockUpdate+0x144>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0e5b      	lsrs	r3, r3, #25
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	3301      	adds	r3, #1
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	fbb2 f3f3 	udiv	r3, r2, r3
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <SystemCoreClockUpdate+0x14c>)
 800102e:	6013      	str	r3, [r2, #0]
      break;
 8001030:	e003      	b.n	800103a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <SystemCoreClockUpdate+0x14c>)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	6013      	str	r3, [r2, #0]
      break;
 8001038:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <SystemCoreClockUpdate+0x144>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <SystemCoreClockUpdate+0x158>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <SystemCoreClockUpdate+0x14c>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemCoreClockUpdate+0x14c>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	0800584c 	.word	0x0800584c
 800106c:	20000000 	.word	0x20000000
 8001070:	00f42400 	.word	0x00f42400
 8001074:	007a1200 	.word	0x007a1200
 8001078:	08005834 	.word	0x08005834

0800107c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001080:	f7ff ff3c 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001084:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001086:	e003      	b.n	8001090 <LoopCopyDataInit>

08001088 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800108a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800108c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800108e:	3104      	adds	r1, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001094:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001096:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001098:	d3f6      	bcc.n	8001088 <CopyDataInit>
	ldr	r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800109c:	e002      	b.n	80010a4 <LoopFillZerobss>

0800109e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800109e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010a0:	f842 3b04 	str.w	r3, [r2], #4

080010a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <LoopForever+0x16>)
	cmp	r2, r3
 80010a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010a8:	d3f9      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010aa:	f004 fb93 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ae:	f7ff fa81 	bl	80005b4 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80010b4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80010b8:	080058c4 	.word	0x080058c4
	ldr	r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010c0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010c4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010c8:	20000448 	.word	0x20000448

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>

080010ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80010d8:	2004      	movs	r0, #4
 80010da:	f001 f903 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80010de:	f7ff ff1f 	bl	8000f20 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f80e 	bl	8001104 <HAL_InitTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e001      	b.n	80010f8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f4:	f7ff fd4c 	bl	8000b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_InitTick+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_InitTick+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f001 f90b 	bl	800234a <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d809      	bhi.n	8001154 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f001 f8d7 	bl	80022fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_InitTick+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e007      	b.n	8001164 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e004      	b.n	8001164 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e001      	b.n	8001164 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000444 	.word	0x20000444

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000444 	.word	0x20000444

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008

08001204 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3360      	adds	r3, #96	; 0x60
 800127e:	461a      	mov	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <LL_ADC_SetOffset+0x44>)
 800128e:	4013      	ands	r3, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	4313      	orrs	r3, r2
 800129c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	03fff000 	.word	0x03fff000

080012b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3360      	adds	r3, #96	; 0x60
 80012c2:	461a      	mov	r2, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3360      	adds	r3, #96	; 0x60
 80012f0:	461a      	mov	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	431a      	orrs	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	615a      	str	r2, [r3, #20]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3330      	adds	r3, #48	; 0x30
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	211f      	movs	r1, #31
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	401a      	ands	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	0e9b      	lsrs	r3, r3, #26
 8001374:	f003 011f 	and.w	r1, r3, #31
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	431a      	orrs	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001388:	bf00      	nop
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3314      	adds	r3, #20
 80013a4:	461a      	mov	r2, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	0e5b      	lsrs	r3, r3, #25
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	0d1b      	lsrs	r3, r3, #20
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	2107      	movs	r1, #7
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	401a      	ands	r2, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	0d1b      	lsrs	r3, r3, #20
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	431a      	orrs	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0318 	and.w	r3, r3, #24
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001410:	40d9      	lsrs	r1, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	400b      	ands	r3, r1
 8001416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141a:	431a      	orrs	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	0007ffff 	.word	0x0007ffff

08001434 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001444:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6093      	str	r3, [r2, #8]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800146c:	d101      	bne.n	8001472 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001494:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014bc:	d101      	bne.n	80014c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <LL_ADC_IsEnabled+0x18>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <LL_ADC_IsEnabled+0x1a>
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b04      	cmp	r3, #4
 8001508:	d101      	bne.n	800150e <LL_ADC_REG_IsConversionOngoing+0x18>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b08      	cmp	r3, #8
 800152e:	d101      	bne.n	8001534 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e12e      	b.n	80017bc <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fb33 	bl	8000bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff67 	bl	8001458 <LL_ADC_IsDeepPowerDownEnabled>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff4d 	bl	8001434 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff82 	bl	80014a8 <LL_ADC_IsInternalRegulatorEnabled>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d115      	bne.n	80015d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff66 	bl	8001480 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015b4:	4b83      	ldr	r3, [pc, #524]	; (80017c4 <HAL_ADC_Init+0x280>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	099b      	lsrs	r3, r3, #6
 80015ba:	4a83      	ldr	r2, [pc, #524]	; (80017c8 <HAL_ADC_Init+0x284>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	3301      	adds	r3, #1
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015c8:	e002      	b.n	80015d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f9      	bne.n	80015ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff64 	bl	80014a8 <LL_ADC_IsInternalRegulatorEnabled>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10d      	bne.n	8001602 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f043 0210 	orr.w	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	f043 0201 	orr.w	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff75 	bl	80014f6 <LL_ADC_REG_IsConversionOngoing>
 800160c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 80c7 	bne.w	80017aa <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 80c3 	bne.w	80017aa <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800162c:	f043 0202 	orr.w	r2, r3, #2
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff49 	bl	80014d0 <LL_ADC_IsEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d110      	bne.n	8001666 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001644:	4861      	ldr	r0, [pc, #388]	; (80017cc <HAL_ADC_Init+0x288>)
 8001646:	f7ff ff43 	bl	80014d0 <LL_ADC_IsEnabled>
 800164a:	4604      	mov	r4, r0
 800164c:	4860      	ldr	r0, [pc, #384]	; (80017d0 <HAL_ADC_Init+0x28c>)
 800164e:	f7ff ff3f 	bl	80014d0 <LL_ADC_IsEnabled>
 8001652:	4603      	mov	r3, r0
 8001654:	4323      	orrs	r3, r4
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4619      	mov	r1, r3
 8001660:	485c      	ldr	r0, [pc, #368]	; (80017d4 <HAL_ADC_Init+0x290>)
 8001662:	f7ff fdcf 	bl	8001204 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7e5b      	ldrb	r3, [r3, #25]
 800166a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001670:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001676:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800167c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001684:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d106      	bne.n	80016a2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	3b01      	subs	r3, #1
 800169a:	045b      	lsls	r3, r3, #17
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <HAL_ADC_Init+0x294>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	69b9      	ldr	r1, [r7, #24]
 80016ce:	430b      	orrs	r3, r1
 80016d0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff20 	bl	800151c <LL_ADC_INJ_IsConversionOngoing>
 80016dc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d140      	bne.n	8001766 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d13d      	bne.n	8001766 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7e1b      	ldrb	r3, [r3, #24]
 80016f2:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016f4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016fc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800170c:	f023 0306 	bic.w	r3, r3, #6
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	69b9      	ldr	r1, [r7, #24]
 8001716:	430b      	orrs	r3, r1
 8001718:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001720:	2b01      	cmp	r3, #1
 8001722:	d118      	bne.n	8001756 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800172e:	f023 0304 	bic.w	r3, r3, #4
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001740:	4311      	orrs	r1, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001746:	430a      	orrs	r2, r1
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	611a      	str	r2, [r3, #16]
 8001754:	e007      	b.n	8001766 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d10c      	bne.n	8001788 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	f023 010f 	bic.w	r1, r3, #15
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	1e5a      	subs	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
 8001786:	e007      	b.n	8001798 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 020f 	bic.w	r2, r2, #15
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f023 0303 	bic.w	r3, r3, #3
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	659a      	str	r2, [r3, #88]	; 0x58
 80017a8:	e007      	b.n	80017ba <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	f043 0210 	orr.w	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3724      	adds	r7, #36	; 0x24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	053e2d63 	.word	0x053e2d63
 80017cc:	42028000 	.word	0x42028000
 80017d0:	42028100 	.word	0x42028100
 80017d4:	42028300 	.word	0x42028300
 80017d8:	fff0c007 	.word	0xfff0c007

080017dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b0b7      	sub	sp, #220	; 0xdc
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x22>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e3c1      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x7a6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fe73 	bl	80014f6 <LL_ADC_REG_IsConversionOngoing>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 83a6 	bne.w	8001f64 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	f7ff fd89 	bl	800133c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fe61 	bl	80014f6 <LL_ADC_REG_IsConversionOngoing>
 8001834:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fe6d 	bl	800151c <LL_ADC_INJ_IsConversionOngoing>
 8001842:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001846:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 81c1 	bne.w	8001bd2 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001850:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001854:	2b00      	cmp	r3, #0
 8001856:	f040 81bc 	bne.w	8001bd2 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001862:	d10f      	bne.n	8001884 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff fd90 	bl	8001394 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fd4a 	bl	8001316 <LL_ADC_SetSamplingTimeCommonConfig>
 8001882:	e00e      	b.n	80018a2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6819      	ldr	r1, [r3, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	461a      	mov	r2, r3
 8001892:	f7ff fd7f 	bl	8001394 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fd3a 	bl	8001316 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d00a      	beq.n	80018da <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6919      	ldr	r1, [r3, #16]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018d4:	f7ff fcca 	bl	800126c <LL_ADC_SetOffset>
 80018d8:	e17b      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fce7 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10a      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x12a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fcdc 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	0e9b      	lsrs	r3, r3, #26
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	e01e      	b.n	8001944 <HAL_ADC_ConfigChannel+0x168>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fcd1 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800192c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001934:	2320      	movs	r3, #32
 8001936:	e004      	b.n	8001942 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_ADC_ConfigChannel+0x180>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0e9b      	lsrs	r3, r3, #26
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	e018      	b.n	800198e <HAL_ADC_ConfigChannel+0x1b2>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001978:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001980:	2320      	movs	r3, #32
 8001982:	e004      	b.n	800198e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800198e:	429a      	cmp	r2, r3
 8001990:	d106      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fca0 	bl	80012e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2101      	movs	r1, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fc84 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10a      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1f0>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2101      	movs	r1, #1
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fc79 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	0e9b      	lsrs	r3, r3, #26
 80019c6:	f003 021f 	and.w	r2, r3, #31
 80019ca:	e01e      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x22e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2101      	movs	r1, #1
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fc6e 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80019fa:	2320      	movs	r3, #32
 80019fc:	e004      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80019fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x246>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0e9b      	lsrs	r3, r3, #26
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	e018      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x278>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001a46:	2320      	movs	r3, #32
 8001a48:	e004      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001a4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d106      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fc3d 	bl	80012e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fc21 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x2b6>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2102      	movs	r1, #2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fc16 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	e01e      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x2f4>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2102      	movs	r1, #2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fc0b 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ab4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	e004      	b.n	8001ace <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001ac4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x30c>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0e9b      	lsrs	r3, r3, #26
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	e016      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x33a>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001afa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e004      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d106      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2102      	movs	r1, #2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fbdc 	bl	80012e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2103      	movs	r1, #3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fbc0 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10a      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x378>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2103      	movs	r1, #3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fbb5 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	f003 021f 	and.w	r2, r3, #31
 8001b52:	e017      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x3a8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2103      	movs	r1, #3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fbaa 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b6e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001b76:	2320      	movs	r3, #32
 8001b78:	e003      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x3c0>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0e9b      	lsrs	r3, r3, #26
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	e011      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x3e4>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	e003      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d106      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2103      	movs	r1, #3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fb87 	bl	80012e0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fc7a 	bl	80014d0 <LL_ADC_IsEnabled>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 81c9 	bne.w	8001f76 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f7ff fbfb 	bl	80013ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	4a8f      	ldr	r2, [pc, #572]	; (8001e38 <HAL_ADC_ConfigChannel+0x65c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	f040 8131 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10b      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x44e>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0e9b      	lsrs	r3, r3, #26
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	bf94      	ite	ls
 8001c22:	2301      	movls	r3, #1
 8001c24:	2300      	movhi	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	e019      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x482>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c3a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001c42:	2320      	movs	r3, #32
 8001c44:	e003      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d079      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d107      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x4a2>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	3301      	adds	r3, #1
 8001c76:	069b      	lsls	r3, r3, #26
 8001c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c7c:	e015      	b.n	8001caa <HAL_ADC_ConfigChannel+0x4ce>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001c96:	2320      	movs	r3, #32
 8001c98:	e003      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	069b      	lsls	r3, r3, #26
 8001ca6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x4ee>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0e9b      	lsrs	r3, r3, #26
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	e017      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x51e>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	e003      	b.n	8001cee <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	ea42 0103 	orr.w	r1, r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x544>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	3301      	adds	r3, #1
 8001d12:	f003 021f 	and.w	r2, r3, #31
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	051b      	lsls	r3, r3, #20
 8001d1e:	e018      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x576>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	e003      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 021f 	and.w	r2, r3, #31
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d52:	430b      	orrs	r3, r1
 8001d54:	e081      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x596>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	3301      	adds	r3, #1
 8001d6a:	069b      	lsls	r3, r3, #26
 8001d6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d70:	e015      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x5c2>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	e003      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	069b      	lsls	r3, r3, #26
 8001d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x5e2>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	0e9b      	lsrs	r3, r3, #26
 8001db0:	3301      	adds	r3, #1
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	e017      	b.n	8001dee <HAL_ADC_ConfigChannel+0x612>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	61fb      	str	r3, [r7, #28]
  return result;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e003      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	ea42 0103 	orr.w	r1, r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x63e>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0e9b      	lsrs	r3, r3, #26
 8001e04:	3301      	adds	r3, #1
 8001e06:	f003 021f 	and.w	r2, r3, #31
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b1e      	subs	r3, #30
 8001e12:	051b      	lsls	r3, r3, #20
 8001e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e18:	e01e      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x67c>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	613b      	str	r3, [r7, #16]
  return result;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d104      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e006      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x668>
 8001e36:	bf00      	nop
 8001e38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f003 021f 	and.w	r2, r3, #31
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	3b1e      	subs	r3, #30
 8001e52:	051b      	lsls	r3, r3, #20
 8001e54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e58:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7ff fa98 	bl	8001394 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <HAL_ADC_ConfigChannel+0x7b0>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8082 	beq.w	8001f76 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e72:	4847      	ldr	r0, [pc, #284]	; (8001f90 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e74:	f7ff f9ec 	bl	8001250 <LL_ADC_GetCommonPathInternalCh>
 8001e78:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e7c:	4845      	ldr	r0, [pc, #276]	; (8001f94 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e7e:	f7ff fb27 	bl	80014d0 <LL_ADC_IsEnabled>
 8001e82:	4604      	mov	r4, r0
 8001e84:	4844      	ldr	r0, [pc, #272]	; (8001f98 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e86:	f7ff fb23 	bl	80014d0 <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4323      	orrs	r3, r4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d15e      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d127      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d121      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a39      	ldr	r2, [pc, #228]	; (8001f94 <HAL_ADC_ConfigChannel+0x7b8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d161      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4834      	ldr	r0, [pc, #208]	; (8001f90 <HAL_ADC_ConfigChannel+0x7b4>)
 8001ebe:	f7ff f9b4 	bl	800122a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ec2:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	099b      	lsrs	r3, r3, #6
 8001ec8:	4a36      	ldr	r2, [pc, #216]	; (8001fa4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	099b      	lsrs	r3, r3, #6
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8001eda:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001edc:	e002      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f9      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eea:	e044      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2d      	ldr	r2, [pc, #180]	; (8001fa8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d113      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10d      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a23      	ldr	r2, [pc, #140]	; (8001f94 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d134      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f14:	4619      	mov	r1, r3
 8001f16:	481e      	ldr	r0, [pc, #120]	; (8001f90 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f18:	f7ff f987 	bl	800122a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f1c:	e02b      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a22      	ldr	r2, [pc, #136]	; (8001fac <HAL_ADC_ConfigChannel+0x7d0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d126      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d120      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d11b      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f46:	4619      	mov	r1, r3
 8001f48:	4811      	ldr	r0, [pc, #68]	; (8001f90 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f4a:	f7ff f96e 	bl	800122a <LL_ADC_SetCommonPathInternalCh>
 8001f4e:	e012      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f62:	e008      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	37dc      	adds	r7, #220	; 0xdc
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	80080000 	.word	0x80080000
 8001f90:	42028300 	.word	0x42028300
 8001f94:	42028000 	.word	0x42028000
 8001f98:	42028100 	.word	0x42028100
 8001f9c:	c7520000 	.word	0xc7520000
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	053e2d63 	.word	0x053e2d63
 8001fa8:	cb840000 	.word	0xcb840000
 8001fac:	80000001 	.word	0x80000001

08001fb0 <LL_ADC_IsEnabled>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <LL_ADC_IsEnabled+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_ADC_IsEnabled+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b0a1      	sub	sp, #132	; 0x84
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002016:	2302      	movs	r3, #2
 8002018:	e089      	b.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002022:	2300      	movs	r3, #0
 8002024:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002026:	2300      	movs	r3, #0
 8002028:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a42      	ldr	r2, [pc, #264]	; (8002138 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d102      	bne.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002034:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e001      	b.n	800203e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10b      	bne.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e068      	b.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ffb9 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 8002064:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ffb3 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d14a      	bne.n	800210c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002078:	2b00      	cmp	r3, #0
 800207a:	d147      	bne.n	800210c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800207e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d027      	beq.n	80020d8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800209a:	035b      	lsls	r3, r3, #13
 800209c:	430b      	orrs	r3, r1
 800209e:	431a      	orrs	r2, r3
 80020a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a4:	4824      	ldr	r0, [pc, #144]	; (8002138 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020a6:	f7ff ff83 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020aa:	4604      	mov	r4, r0
 80020ac:	4823      	ldr	r0, [pc, #140]	; (800213c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020ae:	f7ff ff7f 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4323      	orrs	r3, r4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d132      	bne.n	8002120 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020c2:	f023 030f 	bic.w	r3, r3, #15
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	6811      	ldr	r1, [r2, #0]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	6892      	ldr	r2, [r2, #8]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020d6:	e023      	b.n	8002120 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020e4:	4814      	ldr	r0, [pc, #80]	; (8002138 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020e6:	f7ff ff63 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020ea:	4604      	mov	r4, r0
 80020ec:	4813      	ldr	r0, [pc, #76]	; (800213c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020ee:	f7ff ff5f 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4323      	orrs	r3, r4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d112      	bne.n	8002120 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002102:	f023 030f 	bic.w	r3, r3, #15
 8002106:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002108:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800210a:	e009      	b.n	8002120 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800211e:	e000      	b.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002120:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800212a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800212e:	4618      	mov	r0, r3
 8002130:	3784      	adds	r7, #132	; 0x84
 8002132:	46bd      	mov	sp, r7
 8002134:	bd90      	pop	{r4, r7, pc}
 8002136:	bf00      	nop
 8002138:	42028000 	.word	0x42028000
 800213c:	42028100 	.word	0x42028100
 8002140:	42028300 	.word	0x42028300

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0152      	lsls	r2, r2, #5
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0152      	lsls	r2, r2, #5
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b03      	cmp	r3, #3
 8002254:	bf28      	it	cs
 8002256:	2303      	movcs	r3, #3
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3303      	adds	r3, #3
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b04      	subs	r3, #4
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	2107      	movs	r1, #7
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff29 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff40 	bl	800218c <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff90 	bl	8002238 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5f 	bl	80021e4 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff33 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa4 	bl	80022a0 <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002372:	e158      	b.n	8002626 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 814a 	beq.w	8002620 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d005      	beq.n	80023a4 <HAL_GPIO_Init+0x40>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d130      	bne.n	8002406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0201 	and.w	r2, r3, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d017      	beq.n	8002442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d123      	bne.n	8002496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	08da      	lsrs	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3208      	adds	r2, #8
 8002490:	6939      	ldr	r1, [r7, #16]
 8002492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0203 	and.w	r2, r3, #3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80a4 	beq.w	8002620 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80024d8:	4a5a      	ldr	r2, [pc, #360]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3318      	adds	r3, #24
 80024e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	220f      	movs	r2, #15
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_GPIO_Init+0x2e4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d025      	beq.n	8002550 <HAL_GPIO_Init+0x1ec>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a51      	ldr	r2, [pc, #324]	; (800264c <HAL_GPIO_Init+0x2e8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d01f      	beq.n	800254c <HAL_GPIO_Init+0x1e8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a50      	ldr	r2, [pc, #320]	; (8002650 <HAL_GPIO_Init+0x2ec>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d019      	beq.n	8002548 <HAL_GPIO_Init+0x1e4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a4f      	ldr	r2, [pc, #316]	; (8002654 <HAL_GPIO_Init+0x2f0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d013      	beq.n	8002544 <HAL_GPIO_Init+0x1e0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a4e      	ldr	r2, [pc, #312]	; (8002658 <HAL_GPIO_Init+0x2f4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d00d      	beq.n	8002540 <HAL_GPIO_Init+0x1dc>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a4d      	ldr	r2, [pc, #308]	; (800265c <HAL_GPIO_Init+0x2f8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d007      	beq.n	800253c <HAL_GPIO_Init+0x1d8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <HAL_GPIO_Init+0x2fc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_GPIO_Init+0x1d4>
 8002534:	2306      	movs	r3, #6
 8002536:	e00c      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002538:	2307      	movs	r3, #7
 800253a:	e00a      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 800253c:	2305      	movs	r3, #5
 800253e:	e008      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002540:	2304      	movs	r3, #4
 8002542:	e006      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002544:	2303      	movs	r3, #3
 8002546:	e004      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002548:	2302      	movs	r3, #2
 800254a:	e002      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002550:	2300      	movs	r3, #0
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	f002 0203 	and.w	r2, r2, #3
 8002558:	00d2      	lsls	r2, r2, #3
 800255a:	4093      	lsls	r3, r2
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002562:	4938      	ldr	r1, [pc, #224]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3318      	adds	r3, #24
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43db      	mvns	r3, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002594:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025be:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 80025f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <HAL_GPIO_Init+0x2e0>)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3301      	adds	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f ae9f 	bne.w	8002374 <HAL_GPIO_Init+0x10>
  }
}
 8002636:	bf00      	nop
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	4002f400 	.word	0x4002f400
 8002648:	42020000 	.word	0x42020000
 800264c:	42020400 	.word	0x42020400
 8002650:	42020800 	.word	0x42020800
 8002654:	42020c00 	.word	0x42020c00
 8002658:	42021000 	.word	0x42021000
 800265c:	42021400 	.word	0x42021400
 8002660:	42021800 	.word	0x42021800

08002664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
 8002670:	4613      	mov	r3, r2
 8002672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002674:	787b      	ldrb	r3, [r7, #1]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002680:	e002      	b.n	8002688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4013      	ands	r3, r2
 80026ac:	041a      	lsls	r2, r3, #16
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43d9      	mvns	r1, r3
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	400b      	ands	r3, r1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	619a      	str	r2, [r3, #24]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fa34 	bl	8000b54 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f807 	bl	8002714 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	4002f400 	.word	0x4002f400

08002714 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e007      	b.n	800275a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0204 	bic.w	r2, r3, #4
 8002752:	4905      	ldr	r1, [pc, #20]	; (8002768 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
  }

  return status;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40030400 	.word	0x40030400

0800276c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_ICACHE_Enable+0x1c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_ICACHE_Enable+0x1c>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40030400 	.word	0x40030400

0800278c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	b08b      	sub	sp, #44	; 0x2c
 8002790:	af06      	add	r7, sp, #24
 8002792:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0cb      	b.n	8002936 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe fb08 	bl	8000dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 ffc1 	bl	800574c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e040      	b.n	8002852 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	3301      	adds	r3, #1
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	3303      	adds	r3, #3
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	3338      	adds	r3, #56	; 0x38
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	333c      	adds	r3, #60	; 0x3c
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	3340      	adds	r3, #64	; 0x40
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	3301      	adds	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	d3b9      	bcc.n	80027d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e044      	b.n	80028ec <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	3301      	adds	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3b5      	bcc.n	8002862 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	687e      	ldr	r6, [r7, #4]
 80028fe:	466d      	mov	r5, sp
 8002900:	f106 0410 	add.w	r4, r6, #16
 8002904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002908:	6823      	ldr	r3, [r4, #0]
 800290a:	602b      	str	r3, [r5, #0]
 800290c:	1d33      	adds	r3, r6, #4
 800290e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002910:	6838      	ldr	r0, [r7, #0]
 8002912:	f002 ff36 	bl	8005782 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d102      	bne.n	8002934 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f805 	bl	800293e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800293e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002962:	b29b      	uxth	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002976:	b29b      	uxth	r3, r3
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40007000 	.word	0x40007000

080029b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <HAL_PWREx_GetVoltageRange+0x18>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40007000 	.word	0x40007000

080029d0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029e0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80029e2:	f000 f861 	bl	8002aa8 <HAL_PWREx_SMPS_GetEffectiveMode>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ec:	d101      	bne.n	80029f2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e03e      	b.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80029f2:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029fe:	d101      	bne.n	8002a04 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e035      	b.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d101      	bne.n	8002a10 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e02f      	b.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002a18:	4917      	ldr	r1, [pc, #92]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	09db      	lsrs	r3, r3, #7
 8002a2e:	2232      	movs	r2, #50	; 0x32
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	08db      	lsrs	r3, r3, #3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a40:	e002      	b.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a54:	d102      	bne.n	8002a5c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f2      	bne.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a68:	d101      	bne.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e000      	b.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	0a7c5ac5 	.word	0x0a7c5ac5
 8002a84:	cccccccd 	.word	0xcccccccd

08002a88 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a96:	6053      	str	r3, [r2, #4]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40007000 	.word	0x40007000

08002aa8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	e00a      	b.n	8002adc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d103      	bne.n	8002ad8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	e001      	b.n	8002adc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002adc:	687b      	ldr	r3, [r7, #4]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40007000 	.word	0x40007000

08002af0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f000 bcc2 	b.w	8003488 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b04:	4b99      	ldr	r3, [pc, #612]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b0e:	4b97      	ldr	r3, [pc, #604]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80e9 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <HAL_RCC_OscConfig+0x4a>
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	f040 8083 	bne.w	8002c3a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d17f      	bne.n	8002c3a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b3a:	4b8c      	ldr	r3, [pc, #560]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <HAL_RCC_OscConfig+0x64>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f000 bc9a 	b.w	8003488 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b58:	4b84      	ldr	r3, [pc, #528]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_RCC_OscConfig+0x7e>
 8002b64:	4b81      	ldr	r3, [pc, #516]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6c:	e005      	b.n	8002b7a <HAL_RCC_OscConfig+0x8a>
 8002b6e:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d224      	bcs.n	8002bc8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fe9c 	bl	80038c0 <RCC_SetFlashLatencyFromMSIRange>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f000 bc7a 	b.w	8003488 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b94:	4b75      	ldr	r3, [pc, #468]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a74      	ldr	r2, [pc, #464]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	496f      	ldr	r1, [pc, #444]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb2:	4b6e      	ldr	r3, [pc, #440]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	496a      	ldr	r1, [pc, #424]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
 8002bc6:	e026      	b.n	8002c16 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc8:	4b68      	ldr	r3, [pc, #416]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a67      	ldr	r2, [pc, #412]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002bce:	f043 0308 	orr.w	r3, r3, #8
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	4962      	ldr	r1, [pc, #392]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be6:	4b61      	ldr	r3, [pc, #388]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	495d      	ldr	r1, [pc, #372]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10a      	bne.n	8002c16 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fe5b 	bl	80038c0 <RCC_SetFlashLatencyFromMSIRange>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f000 bc39 	b.w	8003488 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c16:	f000 fe17 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4a54      	ldr	r2, [pc, #336]	; (8002d70 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c20:	4b54      	ldr	r3, [pc, #336]	; (8002d74 <HAL_RCC_OscConfig+0x284>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fa6d 	bl	8001104 <HAL_InitTick>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d060      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	f000 bc27 	b.w	8003488 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d039      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c42:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a49      	ldr	r2, [pc, #292]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe faa9 	bl	80011a4 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c54:	e00f      	b.n	8002c76 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c56:	f7fe faa5 	bl	80011a4 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d908      	bls.n	8002c76 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c64:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	f000 bc09 	b.w	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c76:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0e9      	beq.n	8002c56 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c82:	4b3a      	ldr	r3, [pc, #232]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a39      	ldr	r2, [pc, #228]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002c88:	f043 0308 	orr.w	r3, r3, #8
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	4934      	ldr	r1, [pc, #208]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca0:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	492f      	ldr	r1, [pc, #188]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
 8002cb4:	e020      	b.n	8002cf8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cb6:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc2:	f7fe fa6f 	bl	80011a4 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cc8:	e00e      	b.n	8002ce8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cca:	f7fe fa6b 	bl	80011a4 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d907      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e3cf      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce8:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ea      	bne.n	8002cca <HAL_RCC_OscConfig+0x1da>
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d07e      	beq.n	8002e02 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x226>
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	d10e      	bne.n	8002d2e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d10b      	bne.n	8002d2e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d06e      	beq.n	8002e00 <HAL_RCC_OscConfig+0x310>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d16a      	bne.n	8002e00 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e3ac      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x256>
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	e024      	b.n	8002d90 <HAL_RCC_OscConfig+0x2a0>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4e:	d113      	bne.n	8002d78 <HAL_RCC_OscConfig+0x288>
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a02      	ldr	r2, [pc, #8]	; (8002d6c <HAL_RCC_OscConfig+0x27c>)
 8002d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	e012      	b.n	8002d90 <HAL_RCC_OscConfig+0x2a0>
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	20000000 	.word	0x20000000
 8002d74:	20000004 	.word	0x20000004
 8002d78:	4b8b      	ldr	r3, [pc, #556]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a8a      	ldr	r2, [pc, #552]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a87      	ldr	r2, [pc, #540]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d019      	beq.n	8002dcc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fa04 	bl	80011a4 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9e:	e00e      	b.n	8002dbe <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fe fa00 	bl	80011a4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d907      	bls.n	8002dbe <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dae:	4b7e      	ldr	r3, [pc, #504]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e364      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dbe:	4b7a      	ldr	r3, [pc, #488]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0ea      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2b0>
 8002dca:	e01a      	b.n	8002e02 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f9ea 	bl	80011a4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dd2:	e00e      	b.n	8002df2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fe f9e6 	bl	80011a4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d907      	bls.n	8002df2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002de2:	4b71      	ldr	r3, [pc, #452]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e34a      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1ea      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x2e4>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d06c      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_OscConfig+0x330>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d119      	bne.n	8002e4e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d116      	bne.n	8002e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e20:	4b61      	ldr	r3, [pc, #388]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_OscConfig+0x348>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e327      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	4958      	ldr	r1, [pc, #352]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e4c:	e04c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d029      	beq.n	8002eaa <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e56:	4b54      	ldr	r3, [pc, #336]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a53      	ldr	r2, [pc, #332]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe f99f 	bl	80011a4 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e68:	e00e      	b.n	8002e88 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fe f99b 	bl	80011a4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d907      	bls.n	8002e88 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e78:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e2ff      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e88:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ea      	beq.n	8002e6a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	4941      	ldr	r1, [pc, #260]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
 8002ea8:	e01e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a3e      	ldr	r2, [pc, #248]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe f975 	bl	80011a4 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ebc:	e00e      	b.n	8002edc <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe f971 	bl	80011a4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d907      	bls.n	8002edc <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ecc:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e2d5      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002edc:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ea      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d062      	beq.n	8002fba <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d038      	beq.n	8002f6e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f0c:	f023 0310 	bic.w	r3, r3, #16
 8002f10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f14:	e007      	b.n	8002f26 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002f16:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1c:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f1e:	f043 0310 	orr.w	r3, r3, #16
 8002f22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2c:	4a1e      	ldr	r2, [pc, #120]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe f935 	bl	80011a4 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f3c:	e00f      	b.n	8002f5e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe f931 	bl	80011a4 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b07      	cmp	r3, #7
 8002f4a:	d908      	bls.n	8002f5e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f4c:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e294      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0e8      	beq.n	8002f3e <HAL_RCC_OscConfig+0x44e>
 8002f6c:	e025      	b.n	8002fba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f74:	4a0c      	ldr	r2, [pc, #48]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fe f911 	bl	80011a4 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f84:	e012      	b.n	8002fac <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f86:	f7fe f90d 	bl	80011a4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b07      	cmp	r3, #7
 8002f92:	d90b      	bls.n	8002fac <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <HAL_RCC_OscConfig+0x4b8>)
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e270      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fac:	4ba8      	ldr	r3, [pc, #672]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8002fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 812d 	beq.w	8003222 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fcc:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd8:	4b9d      	ldr	r3, [pc, #628]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	4a9c      	ldr	r2, [pc, #624]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8002fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe4:	4b9a      	ldr	r3, [pc, #616]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff4:	4b97      	ldr	r3, [pc, #604]	; (8003254 <HAL_RCC_OscConfig+0x764>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11e      	bne.n	800303e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003000:	4b94      	ldr	r3, [pc, #592]	; (8003254 <HAL_RCC_OscConfig+0x764>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a93      	ldr	r2, [pc, #588]	; (8003254 <HAL_RCC_OscConfig+0x764>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300c:	f7fe f8ca 	bl	80011a4 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003012:	e00e      	b.n	8003032 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003014:	f7fe f8c6 	bl	80011a4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d907      	bls.n	8003032 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003022:	4b8c      	ldr	r3, [pc, #560]	; (8003254 <HAL_RCC_OscConfig+0x764>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e22a      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_OscConfig+0x764>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0ea      	beq.n	8003014 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01f      	beq.n	800308a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003056:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4a7c      	ldr	r2, [pc, #496]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003066:	4b7a      	ldr	r3, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	4a78      	ldr	r2, [pc, #480]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003076:	e018      	b.n	80030aa <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003078:	4b75      	ldr	r3, [pc, #468]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	4a74      	ldr	r2, [pc, #464]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003088:	e00f      	b.n	80030aa <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800308a:	4b71      	ldr	r3, [pc, #452]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	4a6f      	ldr	r2, [pc, #444]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800309a:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	4a6b      	ldr	r2, [pc, #428]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80030a2:	f023 0304 	bic.w	r3, r3, #4
 80030a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d068      	beq.n	8003184 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fe f877 	bl	80011a4 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b8:	e011      	b.n	80030de <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fe f873 	bl	80011a4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d908      	bls.n	80030de <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030cc:	4b60      	ldr	r3, [pc, #384]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1d4      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030de:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0e6      	beq.n	80030ba <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d022      	beq.n	800313e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030f8:	4b55      	ldr	r3, [pc, #340]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a54      	ldr	r2, [pc, #336]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003108:	e011      	b.n	800312e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7fe f84b 	bl	80011a4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d908      	bls.n	800312e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800311c:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e1ac      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800312e:	4b48      	ldr	r3, [pc, #288]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0e6      	beq.n	800310a <HAL_RCC_OscConfig+0x61a>
 800313c:	e068      	b.n	8003210 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800313e:	4b44      	ldr	r3, [pc, #272]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	4a42      	ldr	r2, [pc, #264]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800314a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800314e:	e011      	b.n	8003174 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fe f828 	bl	80011a4 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d908      	bls.n	8003174 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003162:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e189      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003174:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e6      	bne.n	8003150 <HAL_RCC_OscConfig+0x660>
 8003182:	e045      	b.n	8003210 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe f80e 	bl	80011a4 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800318a:	e011      	b.n	80031b0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe f80a 	bl	80011a4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d908      	bls.n	80031b0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800319e:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e16b      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e6      	bne.n	800318c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d021      	beq.n	8003210 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80031d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031dc:	e011      	b.n	8003202 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fd ffe1 	bl	80011a4 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d908      	bls.n	8003202 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e142      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e6      	bne.n	80031de <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003210:	7ffb      	ldrb	r3, [r7, #31]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d04f      	beq.n	80032ce <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d028      	beq.n	8003288 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 8003238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <HAL_RCC_OscConfig+0x760>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fd ffad 	bl	80011a4 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800324c:	e014      	b.n	8003278 <HAL_RCC_OscConfig+0x788>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003258:	f7fd ffa4 	bl	80011a4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d908      	bls.n	8003278 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003266:	4b8a      	ldr	r3, [pc, #552]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 8003268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e107      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003278:	4b85      	ldr	r3, [pc, #532]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 800327a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0e8      	beq.n	8003258 <HAL_RCC_OscConfig+0x768>
 8003286:	e022      	b.n	80032ce <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003288:	4b81      	ldr	r3, [pc, #516]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 800328a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800328e:	4a80      	ldr	r2, [pc, #512]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fd ff84 	bl	80011a4 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800329e:	e00f      	b.n	80032c0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032a0:	f7fd ff80 	bl	80011a4 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d908      	bls.n	80032c0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032ae:	4b78      	ldr	r3, [pc, #480]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80032b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0e3      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032c0:	4b73      	ldr	r3, [pc, #460]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80032c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e8      	bne.n	80032a0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80d7 	beq.w	8003486 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d8:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	f000 8091 	beq.w	8003408 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d166      	bne.n	80033bc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b68      	ldr	r3, [pc, #416]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a67      	ldr	r2, [pc, #412]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80032f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fd ff53 	bl	80011a4 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003300:	e00e      	b.n	8003320 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003302:	f7fd ff4f 	bl	80011a4 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d907      	bls.n	8003320 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003310:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0b3      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003320:	4b5b      	ldr	r3, [pc, #364]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ea      	bne.n	8003302 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332c:	4b58      	ldr	r3, [pc, #352]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	4b58      	ldr	r3, [pc, #352]	; (8003494 <HAL_RCC_OscConfig+0x9a4>)
 8003332:	4013      	ands	r3, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800333c:	3a01      	subs	r2, #1
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	4311      	orrs	r1, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003346:	0212      	lsls	r2, r2, #8
 8003348:	4311      	orrs	r1, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800334e:	0852      	lsrs	r2, r2, #1
 8003350:	3a01      	subs	r2, #1
 8003352:	0552      	lsls	r2, r2, #21
 8003354:	4311      	orrs	r1, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800335a:	0852      	lsrs	r2, r2, #1
 800335c:	3a01      	subs	r2, #1
 800335e:	0652      	lsls	r2, r2, #25
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003366:	06d2      	lsls	r2, r2, #27
 8003368:	430a      	orrs	r2, r1
 800336a:	4949      	ldr	r1, [pc, #292]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 800336c:	4313      	orrs	r3, r2
 800336e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003370:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a46      	ldr	r2, [pc, #280]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 8003376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800337c:	4b44      	ldr	r3, [pc, #272]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a43      	ldr	r2, [pc, #268]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 8003382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003386:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fd ff0c 	bl	80011a4 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338e:	e00e      	b.n	80033ae <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003390:	f7fd ff08 	bl	80011a4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d907      	bls.n	80033ae <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339e:	4b3c      	ldr	r3, [pc, #240]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e06c      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ae:	4b38      	ldr	r3, [pc, #224]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0ea      	beq.n	8003390 <HAL_RCC_OscConfig+0x8a0>
 80033ba:	e064      	b.n	8003486 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033bc:	4b34      	ldr	r3, [pc, #208]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a33      	ldr	r2, [pc, #204]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80033c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fd feec 	bl	80011a4 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ce:	e00e      	b.n	80033ee <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fd fee8 	bl	80011a4 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d907      	bls.n	80033ee <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033de:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e04c      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ee:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1ea      	bne.n	80033d0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033fa:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	4924      	ldr	r1, [pc, #144]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_RCC_OscConfig+0x9a8>)
 8003402:	4013      	ands	r3, r2
 8003404:	60cb      	str	r3, [r1, #12]
 8003406:	e03e      	b.n	8003486 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e039      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003414:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <HAL_RCC_OscConfig+0x9a0>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0203 	and.w	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	429a      	cmp	r2, r3
 8003426:	d12c      	bne.n	8003482 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	3b01      	subs	r3, #1
 8003434:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d123      	bne.n	8003482 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d11b      	bne.n	8003482 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d113      	bne.n	8003482 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	3b01      	subs	r3, #1
 8003468:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d109      	bne.n	8003482 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	3b01      	subs	r3, #1
 800347c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	019f800c 	.word	0x019f800c
 8003498:	feeefffc 	.word	0xfeeefffc

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e11c      	b.n	80036ee <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b90      	ldr	r3, [pc, #576]	; (80036f8 <HAL_RCC_ClockConfig+0x25c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d910      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b8d      	ldr	r3, [pc, #564]	; (80036f8 <HAL_RCC_ClockConfig+0x25c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 020f 	bic.w	r2, r3, #15
 80034ca:	498b      	ldr	r1, [pc, #556]	; (80036f8 <HAL_RCC_ClockConfig+0x25c>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <HAL_RCC_ClockConfig+0x25c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e104      	b.n	80036ee <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d010      	beq.n	8003512 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	4b81      	ldr	r3, [pc, #516]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d908      	bls.n	8003512 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003500:	4b7e      	ldr	r3, [pc, #504]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	497b      	ldr	r1, [pc, #492]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8085 	beq.w	800362a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d11f      	bne.n	8003568 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003528:	4b74      	ldr	r3, [pc, #464]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0da      	b.n	80036ee <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003538:	f000 fa26 	bl	8003988 <RCC_GetSysClockFreqFromPLLSource>
 800353c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4a6f      	ldr	r2, [pc, #444]	; (8003700 <HAL_RCC_ClockConfig+0x264>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d947      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003546:	4b6d      	ldr	r3, [pc, #436]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d141      	bne.n	80035d6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003552:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800355a:	4a68      	ldr	r2, [pc, #416]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e036      	b.n	80035d6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d107      	bne.n	8003580 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003570:	4b62      	ldr	r3, [pc, #392]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d115      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0b6      	b.n	80036ee <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003588:	4b5c      	ldr	r3, [pc, #368]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0aa      	b.n	80036ee <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003598:	4b58      	ldr	r3, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0a2      	b.n	80036ee <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035a8:	f000 f8b0 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4a53      	ldr	r2, [pc, #332]	; (8003700 <HAL_RCC_ClockConfig+0x264>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d90f      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035b6:	4b51      	ldr	r3, [pc, #324]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035c2:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ca:	4a4c      	ldr	r2, [pc, #304]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80035cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4946      	ldr	r1, [pc, #280]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fd fddc 	bl	80011a4 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e013      	b.n	8003618 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7fd fdd8 	bl	80011a4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d90a      	bls.n	8003618 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 020c 	and.w	r2, r3, #12
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e06a      	b.n	80036ee <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003618:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 020c 	and.w	r2, r3, #12
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	429a      	cmp	r2, r3
 8003628:	d1e2      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b80      	cmp	r3, #128	; 0x80
 800362e:	d105      	bne.n	800363c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 8003636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d010      	beq.n	800366a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003654:	429a      	cmp	r2, r3
 8003656:	d208      	bcs.n	800366a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4925      	ldr	r1, [pc, #148]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <HAL_RCC_ClockConfig+0x25c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d210      	bcs.n	800369a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <HAL_RCC_ClockConfig+0x25c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 020f 	bic.w	r2, r3, #15
 8003680:	491d      	ldr	r1, [pc, #116]	; (80036f8 <HAL_RCC_ClockConfig+0x25c>)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCC_ClockConfig+0x25c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d001      	beq.n	800369a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e029      	b.n	80036ee <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	4912      	ldr	r1, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	490a      	ldr	r1, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x260>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036d8:	f000 f8b6 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 80036dc:	4603      	mov	r3, r0
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x268>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fd0c 	bl	8001104 <HAL_InitTick>
 80036ec:	4603      	mov	r3, r0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40022000 	.word	0x40022000
 80036fc:	40021000 	.word	0x40021000
 8003700:	04c4b400 	.word	0x04c4b400
 8003704:	20000000 	.word	0x20000000
 8003708:	20000004 	.word	0x20000004

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003724:	4b44      	ldr	r3, [pc, #272]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x34>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b0c      	cmp	r3, #12
 8003738:	d121      	bne.n	800377e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d11e      	bne.n	800377e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003740:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800374c:	4b3a      	ldr	r3, [pc, #232]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 800374e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	e005      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800375c:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003768:	4a34      	ldr	r2, [pc, #208]	; (800383c <HAL_RCC_GetSysClockFreq+0x130>)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003770:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10d      	bne.n	8003794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d102      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003784:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <HAL_RCC_GetSysClockFreq+0x134>)
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	e004      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d101      	bne.n	8003794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_RCC_GetSysClockFreq+0x138>)
 8003792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d146      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800379a:	4b27      	ldr	r3, [pc, #156]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	3301      	adds	r3, #1
 80037b0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d003      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0xb4>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d00d      	beq.n	80037da <HAL_RCC_GetSysClockFreq+0xce>
 80037be:	e019      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037c0:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <HAL_RCC_GetSysClockFreq+0x134>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037ca:	68d2      	ldr	r2, [r2, #12]
 80037cc:	0a12      	lsrs	r2, r2, #8
 80037ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	617b      	str	r3, [r7, #20]
        break;
 80037d8:	e019      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037da:	4a1a      	ldr	r2, [pc, #104]	; (8003844 <HAL_RCC_GetSysClockFreq+0x138>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e2:	4a15      	ldr	r2, [pc, #84]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	0a12      	lsrs	r2, r2, #8
 80037e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
        break;
 80037f2:	e00c      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037fe:	68d2      	ldr	r2, [r2, #12]
 8003800:	0a12      	lsrs	r2, r2, #8
 8003802:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	617b      	str	r3, [r7, #20]
        break;
 800380c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	0e5b      	lsrs	r3, r3, #25
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	3301      	adds	r3, #1
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003828:	69bb      	ldr	r3, [r7, #24]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	0800584c 	.word	0x0800584c
 8003840:	00f42400 	.word	0x00f42400
 8003844:	007a1200 	.word	0x007a1200

08003848 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800384c:	f7ff ff5e 	bl	800370c <HAL_RCC_GetSysClockFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetHCLKFreq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <HAL_RCC_GetHCLKFreq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000
 800386c:	08005834 	.word	0x08005834

08003870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003874:	f7ff ffe8 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4903      	ldr	r1, [pc, #12]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	08005844 	.word	0x08005844

08003898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800389c:	f7ff ffd4 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0adb      	lsrs	r3, r3, #11
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08005844 	.word	0x08005844

080038c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038cc:	4b2c      	ldr	r3, [pc, #176]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038d8:	f7ff f86c 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 80038dc:	6138      	str	r0, [r7, #16]
 80038de:	e014      	b.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	4a26      	ldr	r2, [pc, #152]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6593      	str	r3, [r2, #88]	; 0x58
 80038ec:	4b24      	ldr	r3, [pc, #144]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038f8:	f7ff f85c 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 80038fc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003908:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003916:	d10b      	bne.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d919      	bls.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2ba0      	cmp	r3, #160	; 0xa0
 8003922:	d902      	bls.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003924:	2302      	movs	r3, #2
 8003926:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003928:	e013      	b.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800392a:	2301      	movs	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800392e:	e010      	b.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d902      	bls.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003936:	2303      	movs	r3, #3
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e00a      	b.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b80      	cmp	r3, #128	; 0x80
 8003940:	d102      	bne.n	8003948 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003942:	2302      	movs	r3, #2
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e004      	b.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b70      	cmp	r3, #112	; 0x70
 800394c:	d101      	bne.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800394e:	2301      	movs	r3, #1
 8003950:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003952:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 020f 	bic.w	r2, r3, #15
 800395a:	490a      	ldr	r1, [pc, #40]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	40022000 	.word	0x40022000

08003988 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800398e:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003998:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3301      	adds	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d015      	beq.n	80039d8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d839      	bhi.n	8003a26 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d01c      	beq.n	80039f2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d133      	bne.n	8003a26 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039be:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	4a23      	ldr	r2, [pc, #140]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039c8:	68d2      	ldr	r2, [r2, #12]
 80039ca:	0a12      	lsrs	r2, r2, #8
 80039cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	613b      	str	r3, [r7, #16]
      break;
 80039d6:	e029      	b.n	8003a2c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039d8:	4a20      	ldr	r2, [pc, #128]	; (8003a5c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039e2:	68d2      	ldr	r2, [r2, #12]
 80039e4:	0a12      	lsrs	r2, r2, #8
 80039e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	613b      	str	r3, [r7, #16]
      break;
 80039f0:	e01c      	b.n	8003a2c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039f2:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d107      	bne.n	8003a0e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e005      	b.n	8003a1a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a0e:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	613b      	str	r3, [r7, #16]
        break;
 8003a24:	e002      	b.n	8003a2c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
      break;
 8003a2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	0e5b      	lsrs	r3, r3, #25
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	3301      	adds	r3, #1
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a46:	683b      	ldr	r3, [r7, #0]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40021000 	.word	0x40021000
 8003a58:	00f42400 	.word	0x00f42400
 8003a5c:	007a1200 	.word	0x007a1200
 8003a60:	0800584c 	.word	0x0800584c

08003a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a70:	2300      	movs	r3, #0
 8003a72:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d040      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a84:	2b80      	cmp	r3, #128	; 0x80
 8003a86:	d02a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a88:	2b80      	cmp	r3, #128	; 0x80
 8003a8a:	d825      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a8c:	2b60      	cmp	r3, #96	; 0x60
 8003a8e:	d026      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a90:	2b60      	cmp	r3, #96	; 0x60
 8003a92:	d821      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d006      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d81d      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d009      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003aa4:	e018      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aa6:	4b8f      	ldr	r3, [pc, #572]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	4a8e      	ldr	r2, [pc, #568]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ab2:	e015      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fb56 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ac4:	e00c      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3320      	adds	r3, #32
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fc33 	bl	8004338 <RCCEx_PLLSAI2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	77fb      	strb	r3, [r7, #31]
        break;
 8003adc:	e000      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae0:	7ffb      	ldrb	r3, [r7, #31]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ae6:	4b7f      	ldr	r3, [pc, #508]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aec:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af4:	497b      	ldr	r1, [pc, #492]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003afc:	e001      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afe:	7ffb      	ldrb	r3, [r7, #31]
 8003b00:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d047      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b16:	d030      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1c:	d82a      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b22:	d02a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b28:	d824      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d81e      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3e:	d010      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b40:	e018      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b42:	4b68      	ldr	r3, [pc, #416]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a67      	ldr	r2, [pc, #412]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b4e:	e015      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fb08 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b60:	e00c      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3320      	adds	r3, #32
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fbe5 	bl	8004338 <RCCEx_PLLSAI2_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b72:	e003      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
        break;
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7c:	7ffb      	ldrb	r3, [r7, #31]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b82:	4b58      	ldr	r3, [pc, #352]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4954      	ldr	r1, [pc, #336]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b98:	e001      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9a:	7ffb      	ldrb	r3, [r7, #31]
 8003b9c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80ab 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb0:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	4a48      	ldr	r2, [pc, #288]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc8:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a42      	ldr	r2, [pc, #264]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be4:	f7fd fade 	bl	80011a4 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bea:	e00f      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7fd fada 	bl	80011a4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d908      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003c0a:	e006      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0c:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0e9      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003c18:	e000      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003c1a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003c1c:	7ffb      	ldrb	r3, [r7, #31]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d164      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c22:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01f      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d019      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c4c:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	4a24      	ldr	r2, [pc, #144]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5c:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01f      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7fd fa91 	bl	80011a4 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c84:	e012      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd fa8d 	bl	80011a4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d909      	bls.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003caa:	e007      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cac:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0e5      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003cbc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cde:	7ffb      	ldrb	r3, [r7, #31]
 8003ce0:	77bb      	strb	r3, [r7, #30]
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7ffb      	ldrb	r3, [r7, #31]
 8003cee:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b9c      	ldr	r3, [pc, #624]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	4a9b      	ldr	r2, [pc, #620]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0e:	4b96      	ldr	r3, [pc, #600]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f023 0203 	bic.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	4992      	ldr	r1, [pc, #584]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d30:	4b8d      	ldr	r3, [pc, #564]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f023 020c 	bic.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	498a      	ldr	r1, [pc, #552]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d52:	4b85      	ldr	r3, [pc, #532]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	4981      	ldr	r1, [pc, #516]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d74:	4b7c      	ldr	r3, [pc, #496]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4979      	ldr	r1, [pc, #484]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d96:	4b74      	ldr	r3, [pc, #464]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	4970      	ldr	r1, [pc, #448]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db8:	4b6b      	ldr	r3, [pc, #428]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	4968      	ldr	r1, [pc, #416]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	495f      	ldr	r1, [pc, #380]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dfc:	4b5a      	ldr	r3, [pc, #360]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	4957      	ldr	r1, [pc, #348]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003e1e:	4b52      	ldr	r3, [pc, #328]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2c:	494e      	ldr	r1, [pc, #312]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d031      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e48:	d00e      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e4e:	d814      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d015      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e58:	d10f      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5a:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	4a42      	ldr	r2, [pc, #264]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e64:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e66:	e00c      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f97c 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	77fb      	strb	r3, [r7, #31]
        break;
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e96:	4934      	ldr	r1, [pc, #208]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e9e:	e001      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	7ffb      	ldrb	r3, [r7, #31]
 8003ea2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebe:	492a      	ldr	r1, [pc, #168]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ed2:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	4921      	ldr	r1, [pc, #132]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ef4:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	4919      	ldr	r1, [pc, #100]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f16:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f1c:	f023 0203 	bic.w	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	4910      	ldr	r1, [pc, #64]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d02b      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f46:	4908      	ldr	r1, [pc, #32]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f56:	d109      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a02      	ldr	r2, [pc, #8]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f62:	60d3      	str	r3, [r2, #12]
 8003f64:	e014      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f8f5 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003f86:	7ffb      	ldrb	r3, [r7, #31]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003f8c:	7ffb      	ldrb	r3, [r7, #31]
 8003f8e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d04a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa4:	d108      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003fa6:	4b70      	ldr	r3, [pc, #448]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fac:	4a6e      	ldr	r2, [pc, #440]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003fb6:	e012      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003fb8:	4b6b      	ldr	r3, [pc, #428]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc6:	4968      	ldr	r1, [pc, #416]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fce:	4b66      	ldr	r3, [pc, #408]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd4:	4a64      	ldr	r2, [pc, #400]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe6:	d10d      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f8bc 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003ff8:	7ffb      	ldrb	r3, [r7, #31]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d019      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003ffe:	7ffb      	ldrb	r3, [r7, #31]
 8004000:	77bb      	strb	r3, [r7, #30]
 8004002:	e016      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400c:	d106      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400e:	4b56      	ldr	r3, [pc, #344]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	4a55      	ldr	r2, [pc, #340]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004018:	60d3      	str	r3, [r2, #12]
 800401a:	e00a      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004024:	d105      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004026:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4a4f      	ldr	r2, [pc, #316]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004030:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d028      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800403e:	4b4a      	ldr	r3, [pc, #296]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404c:	4946      	ldr	r1, [pc, #280]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800405c:	d106      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800405e:	4b42      	ldr	r3, [pc, #264]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4a41      	ldr	r2, [pc, #260]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004068:	60d3      	str	r3, [r2, #12]
 800406a:	e011      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004070:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004074:	d10c      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f875 	bl	800416c <RCCEx_PLLSAI1_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004086:	7ffb      	ldrb	r3, [r7, #31]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800408c:	7ffb      	ldrb	r3, [r7, #31]
 800408e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01e      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800409c:	4b32      	ldr	r3, [pc, #200]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ac:	492e      	ldr	r1, [pc, #184]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040be:	d10c      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3304      	adds	r3, #4
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f850 	bl	800416c <RCCEx_PLLSAI1_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80040d0:	7ffb      	ldrb	r3, [r7, #31]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80040d6:	7ffb      	ldrb	r3, [r7, #31]
 80040d8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ec:	f023 0204 	bic.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f6:	491c      	ldr	r1, [pc, #112]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800410a:	4b17      	ldr	r3, [pc, #92]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800410c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004110:	f023 0218 	bic.w	r2, r3, #24
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	4913      	ldr	r1, [pc, #76]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d017      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004130:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004134:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800413e:	490a      	ldr	r1, [pc, #40]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800414c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004150:	d105      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	4a04      	ldr	r2, [pc, #16]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800415c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800415e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000

0800416c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d018      	beq.n	80041b4 <RCCEx_PLLSAI1_Config+0x48>
 8004182:	2b03      	cmp	r3, #3
 8004184:	d81f      	bhi.n	80041c6 <RCCEx_PLLSAI1_Config+0x5a>
 8004186:	2b01      	cmp	r3, #1
 8004188:	d002      	beq.n	8004190 <RCCEx_PLLSAI1_Config+0x24>
 800418a:	2b02      	cmp	r3, #2
 800418c:	d009      	beq.n	80041a2 <RCCEx_PLLSAI1_Config+0x36>
 800418e:	e01a      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004190:	4b65      	ldr	r3, [pc, #404]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d117      	bne.n	80041cc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e014      	b.n	80041cc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041a2:	4b61      	ldr	r3, [pc, #388]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d110      	bne.n	80041d0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b2:	e00d      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80041b4:	4b5c      	ldr	r3, [pc, #368]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e006      	b.n	80041d4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
      break;
 80041ca:	e004      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041cc:	bf00      	nop
 80041ce:	e002      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041d0:	bf00      	nop
 80041d2:	e000      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 809f 	bne.w	800431c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041de:	4b52      	ldr	r3, [pc, #328]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a51      	ldr	r2, [pc, #324]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ea:	f7fc ffdb 	bl	80011a4 <HAL_GetTick>
 80041ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f0:	e00f      	b.n	8004212 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f2:	f7fc ffd7 	bl	80011a4 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d908      	bls.n	8004212 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004200:	4b49      	ldr	r3, [pc, #292]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004210:	e006      	b.n	8004220 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004212:	4b45      	ldr	r3, [pc, #276]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e9      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0x86>
 800421e:	e000      	b.n	8004222 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004220:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d179      	bne.n	800431c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800422e:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	4b3e      	ldr	r3, [pc, #248]	; (800432c <RCCEx_PLLSAI1_Config+0x1c0>)
 8004234:	4013      	ands	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6892      	ldr	r2, [r2, #8]
 800423a:	0211      	lsls	r1, r2, #8
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68d2      	ldr	r2, [r2, #12]
 8004240:	06d2      	lsls	r2, r2, #27
 8004242:	4311      	orrs	r1, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6852      	ldr	r2, [r2, #4]
 8004248:	3a01      	subs	r2, #1
 800424a:	0112      	lsls	r2, r2, #4
 800424c:	4311      	orrs	r1, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	4934      	ldr	r1, [pc, #208]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	610b      	str	r3, [r1, #16]
 800425a:	e033      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d118      	bne.n	8004294 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004262:	4b31      	ldr	r3, [pc, #196]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	4b32      	ldr	r3, [pc, #200]	; (8004330 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6892      	ldr	r2, [r2, #8]
 800426e:	0211      	lsls	r1, r2, #8
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6912      	ldr	r2, [r2, #16]
 8004274:	0852      	lsrs	r2, r2, #1
 8004276:	3a01      	subs	r2, #1
 8004278:	0552      	lsls	r2, r2, #21
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6852      	ldr	r2, [r2, #4]
 8004280:	3a01      	subs	r2, #1
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	4311      	orrs	r1, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	4926      	ldr	r1, [pc, #152]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	610b      	str	r3, [r1, #16]
 8004292:	e017      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004294:	4b24      	ldr	r3, [pc, #144]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	4b26      	ldr	r3, [pc, #152]	; (8004334 <RCCEx_PLLSAI1_Config+0x1c8>)
 800429a:	4013      	ands	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	0211      	lsls	r1, r2, #8
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6952      	ldr	r2, [r2, #20]
 80042a6:	0852      	lsrs	r2, r2, #1
 80042a8:	3a01      	subs	r2, #1
 80042aa:	0652      	lsls	r2, r2, #25
 80042ac:	4311      	orrs	r1, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6852      	ldr	r2, [r2, #4]
 80042b2:	3a01      	subs	r2, #1
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	491a      	ldr	r1, [pc, #104]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042c4:	4b18      	ldr	r3, [pc, #96]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a17      	ldr	r2, [pc, #92]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fc ff68 	bl	80011a4 <HAL_GetTick>
 80042d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042d6:	e00f      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042d8:	f7fc ff64 	bl	80011a4 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d908      	bls.n	80042f8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80042f6:	e006      	b.n	8004306 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0e9      	beq.n	80042d8 <RCCEx_PLLSAI1_Config+0x16c>
 8004304:	e000      	b.n	8004308 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004306:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	4904      	ldr	r1, [pc, #16]	; (8004328 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	07ff800c 	.word	0x07ff800c
 8004330:	ff9f800c 	.word	0xff9f800c
 8004334:	f9ff800c 	.word	0xf9ff800c

08004338 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d018      	beq.n	8004380 <RCCEx_PLLSAI2_Config+0x48>
 800434e:	2b03      	cmp	r3, #3
 8004350:	d81f      	bhi.n	8004392 <RCCEx_PLLSAI2_Config+0x5a>
 8004352:	2b01      	cmp	r3, #1
 8004354:	d002      	beq.n	800435c <RCCEx_PLLSAI2_Config+0x24>
 8004356:	2b02      	cmp	r3, #2
 8004358:	d009      	beq.n	800436e <RCCEx_PLLSAI2_Config+0x36>
 800435a:	e01a      	b.n	8004392 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800435c:	4b4a      	ldr	r3, [pc, #296]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d117      	bne.n	8004398 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436c:	e014      	b.n	8004398 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800436e:	4b46      	ldr	r3, [pc, #280]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	2b00      	cmp	r3, #0
 8004378:	d110      	bne.n	800439c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437e:	e00d      	b.n	800439c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004380:	4b41      	ldr	r3, [pc, #260]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004390:	e006      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
      break;
 8004396:	e004      	b.n	80043a2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004398:	bf00      	nop
 800439a:	e002      	b.n	80043a2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800439c:	bf00      	nop
 800439e:	e000      	b.n	80043a2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80043a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d169      	bne.n	800447c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043a8:	4b37      	ldr	r3, [pc, #220]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a36      	ldr	r2, [pc, #216]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 80043ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b4:	f7fc fef6 	bl	80011a4 <HAL_GetTick>
 80043b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ba:	e00f      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043bc:	f7fc fef2 	bl	80011a4 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d908      	bls.n	80043dc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ca:	4b2f      	ldr	r3, [pc, #188]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043da:	e006      	b.n	80043ea <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e9      	bne.n	80043bc <RCCEx_PLLSAI2_Config+0x84>
 80043e8:	e000      	b.n	80043ec <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80043ea:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d144      	bne.n	800447c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d115      	bne.n	8004424 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043f8:	4b23      	ldr	r3, [pc, #140]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	4b23      	ldr	r3, [pc, #140]	; (800448c <RCCEx_PLLSAI2_Config+0x154>)
 80043fe:	4013      	ands	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6892      	ldr	r2, [r2, #8]
 8004404:	0211      	lsls	r1, r2, #8
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68d2      	ldr	r2, [r2, #12]
 800440a:	06d2      	lsls	r2, r2, #27
 800440c:	4311      	orrs	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6852      	ldr	r2, [r2, #4]
 8004412:	3a01      	subs	r2, #1
 8004414:	0112      	lsls	r2, r2, #4
 8004416:	4311      	orrs	r1, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	491a      	ldr	r1, [pc, #104]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 8004420:	4313      	orrs	r3, r2
 8004422:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fc feb8 	bl	80011a4 <HAL_GetTick>
 8004434:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004436:	e00f      	b.n	8004458 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004438:	f7fc feb4 	bl	80011a4 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d908      	bls.n	8004458 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004456:	e006      	b.n	8004466 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0e9      	beq.n	8004438 <RCCEx_PLLSAI2_Config+0x100>
 8004464:	e000      	b.n	8004468 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004466:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	4904      	ldr	r1, [pc, #16]	; (8004488 <RCCEx_PLLSAI2_Config+0x150>)
 8004478:	4313      	orrs	r3, r2
 800447a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	07ff800c 	.word	0x07ff800c

08004490 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d066      	beq.n	8004570 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc fc48 	bl	8000d4c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d045      	beq.n	800455e <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044d2:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_RTC_Init+0xec>)
 80044d4:	22ca      	movs	r2, #202	; 0xca
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24
 80044d8:	4b28      	ldr	r3, [pc, #160]	; (800457c <HAL_RTC_Init+0xec>)
 80044da:	2253      	movs	r2, #83	; 0x53
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f872 	bl	80045c8 <RTC_EnterInitMode>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d121      	bne.n	8004532 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80044ee:	4b23      	ldr	r3, [pc, #140]	; (800457c <HAL_RTC_Init+0xec>)
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	4a22      	ldr	r2, [pc, #136]	; (800457c <HAL_RTC_Init+0xec>)
 80044f4:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80044f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fc:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <HAL_RTC_Init+0xec>)
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6859      	ldr	r1, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	4319      	orrs	r1, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	430b      	orrs	r3, r1
 8004512:	491a      	ldr	r1, [pc, #104]	; (800457c <HAL_RTC_Init+0xec>)
 8004514:	4313      	orrs	r3, r2
 8004516:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	4916      	ldr	r1, [pc, #88]	; (800457c <HAL_RTC_Init+0xec>)
 8004524:	4313      	orrs	r3, r2
 8004526:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f881 	bl	8004630 <RTC_ExitInitMode>
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10e      	bne.n	8004556 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004538:	4b10      	ldr	r3, [pc, #64]	; (800457c <HAL_RTC_Init+0xec>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a19      	ldr	r1, [r3, #32]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	4319      	orrs	r1, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	430b      	orrs	r3, r1
 8004550:	490a      	ldr	r1, [pc, #40]	; (800457c <HAL_RTC_Init+0xec>)
 8004552:	4313      	orrs	r3, r2
 8004554:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_RTC_Init+0xec>)
 8004558:	22ff      	movs	r2, #255	; 0xff
 800455a:	625a      	str	r2, [r3, #36]	; 0x24
 800455c:	e001      	b.n	8004562 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40002800 	.word	0x40002800

08004580 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_RTC_WaitForSynchro+0x40>)
 800458a:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <HAL_RTC_WaitForSynchro+0x44>)
 800458c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800458e:	f7fc fe09 	bl	80011a4 <HAL_GetTick>
 8004592:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004594:	e009      	b.n	80045aa <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004596:	f7fc fe05 	bl	80011a4 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045a4:	d901      	bls.n	80045aa <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e006      	b.n	80045b8 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RTC_WaitForSynchro+0x40>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0ef      	beq.n	8004596 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40002800 	.word	0x40002800
 80045c4:	0001005c 	.word	0x0001005c

080045c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80045d4:	4b15      	ldr	r3, [pc, #84]	; (800462c <RTC_EnterInitMode+0x64>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d120      	bne.n	8004622 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <RTC_EnterInitMode+0x64>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a11      	ldr	r2, [pc, #68]	; (800462c <RTC_EnterInitMode+0x64>)
 80045e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ea:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80045ec:	f7fc fdda 	bl	80011a4 <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045f2:	e00d      	b.n	8004610 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045f4:	f7fc fdd6 	bl	80011a4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004602:	d905      	bls.n	8004610 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2203      	movs	r2, #3
 800460c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <RTC_EnterInitMode+0x64>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <RTC_EnterInitMode+0x5a>
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b03      	cmp	r3, #3
 8004620:	d1e8      	bne.n	80045f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40002800 	.word	0x40002800

08004630 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <RTC_ExitInitMode+0x78>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <RTC_ExitInitMode+0x78>)
 8004642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004646:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004648:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <RTC_ExitInitMode+0x78>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10c      	bne.n	800466e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff93 	bl	8004580 <HAL_RTC_WaitForSynchro>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01e      	beq.n	800469e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2203      	movs	r2, #3
 8004664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	e017      	b.n	800469e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800466e:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <RTC_ExitInitMode+0x78>)
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	4a0d      	ldr	r2, [pc, #52]	; (80046a8 <RTC_ExitInitMode+0x78>)
 8004674:	f023 0320 	bic.w	r3, r3, #32
 8004678:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ff80 	bl	8004580 <HAL_RTC_WaitForSynchro>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2203      	movs	r2, #3
 800468a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <RTC_ExitInitMode+0x78>)
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <RTC_ExitInitMode+0x78>)
 8004698:	f043 0320 	orr.w	r3, r3, #32
 800469c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40002800 	.word	0x40002800

080046ac <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	490f      	ldr	r1, [pc, #60]	; (80046fc <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6919      	ldr	r1, [r3, #16]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	430b      	orrs	r3, r1
 80046e6:	4906      	ldr	r1, [pc, #24]	; (8004700 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40002800 	.word	0x40002800
 8004700:	40003400 	.word	0x40003400

08004704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e042      	b.n	800479c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7fc faaf 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2224      	movs	r2, #36	; 0x24
 8004732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f82c 	bl	80047a4 <UART_SetConfig>
 800474c:	4603      	mov	r3, r0
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e022      	b.n	800479c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fb20 	bl	8004da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fba7 	bl	8004ee8 <UART_CheckIdleState>
 800479a:	4603      	mov	r3, r0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a8:	b08c      	sub	sp, #48	; 0x30
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	431a      	orrs	r2, r3
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4baa      	ldr	r3, [pc, #680]	; (8004a7c <UART_SetConfig+0x2d8>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047dc:	430b      	orrs	r3, r1
 80047de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a9f      	ldr	r2, [pc, #636]	; (8004a80 <UART_SetConfig+0x2dc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480c:	4313      	orrs	r3, r2
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800481a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004824:	430b      	orrs	r3, r1
 8004826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	f023 010f 	bic.w	r1, r3, #15
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a90      	ldr	r2, [pc, #576]	; (8004a84 <UART_SetConfig+0x2e0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d125      	bne.n	8004894 <UART_SetConfig+0xf0>
 8004848:	4b8f      	ldr	r3, [pc, #572]	; (8004a88 <UART_SetConfig+0x2e4>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b03      	cmp	r3, #3
 8004854:	d81a      	bhi.n	800488c <UART_SetConfig+0xe8>
 8004856:	a201      	add	r2, pc, #4	; (adr r2, 800485c <UART_SetConfig+0xb8>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	0800486d 	.word	0x0800486d
 8004860:	0800487d 	.word	0x0800487d
 8004864:	08004875 	.word	0x08004875
 8004868:	08004885 	.word	0x08004885
 800486c:	2301      	movs	r3, #1
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004872:	e116      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004874:	2302      	movs	r3, #2
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487a:	e112      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800487c:	2304      	movs	r3, #4
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004882:	e10e      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004884:	2308      	movs	r3, #8
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488a:	e10a      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800488c:	2310      	movs	r3, #16
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004892:	e106      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a7c      	ldr	r2, [pc, #496]	; (8004a8c <UART_SetConfig+0x2e8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d138      	bne.n	8004910 <UART_SetConfig+0x16c>
 800489e:	4b7a      	ldr	r3, [pc, #488]	; (8004a88 <UART_SetConfig+0x2e4>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b0c      	cmp	r3, #12
 80048aa:	d82d      	bhi.n	8004908 <UART_SetConfig+0x164>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <UART_SetConfig+0x110>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048e9 	.word	0x080048e9
 80048b8:	08004909 	.word	0x08004909
 80048bc:	08004909 	.word	0x08004909
 80048c0:	08004909 	.word	0x08004909
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004909 	.word	0x08004909
 80048cc:	08004909 	.word	0x08004909
 80048d0:	08004909 	.word	0x08004909
 80048d4:	080048f1 	.word	0x080048f1
 80048d8:	08004909 	.word	0x08004909
 80048dc:	08004909 	.word	0x08004909
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004901 	.word	0x08004901
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ee:	e0d8      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f6:	e0d4      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fe:	e0d0      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004906:	e0cc      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490e:	e0c8      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a5e      	ldr	r2, [pc, #376]	; (8004a90 <UART_SetConfig+0x2ec>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d125      	bne.n	8004966 <UART_SetConfig+0x1c2>
 800491a:	4b5b      	ldr	r3, [pc, #364]	; (8004a88 <UART_SetConfig+0x2e4>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004924:	2b30      	cmp	r3, #48	; 0x30
 8004926:	d016      	beq.n	8004956 <UART_SetConfig+0x1b2>
 8004928:	2b30      	cmp	r3, #48	; 0x30
 800492a:	d818      	bhi.n	800495e <UART_SetConfig+0x1ba>
 800492c:	2b20      	cmp	r3, #32
 800492e:	d00a      	beq.n	8004946 <UART_SetConfig+0x1a2>
 8004930:	2b20      	cmp	r3, #32
 8004932:	d814      	bhi.n	800495e <UART_SetConfig+0x1ba>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <UART_SetConfig+0x19a>
 8004938:	2b10      	cmp	r3, #16
 800493a:	d008      	beq.n	800494e <UART_SetConfig+0x1aa>
 800493c:	e00f      	b.n	800495e <UART_SetConfig+0x1ba>
 800493e:	2300      	movs	r3, #0
 8004940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004944:	e0ad      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004946:	2302      	movs	r3, #2
 8004948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494c:	e0a9      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800494e:	2304      	movs	r3, #4
 8004950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004954:	e0a5      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004956:	2308      	movs	r3, #8
 8004958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495c:	e0a1      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800495e:	2310      	movs	r3, #16
 8004960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004964:	e09d      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4a      	ldr	r2, [pc, #296]	; (8004a94 <UART_SetConfig+0x2f0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d125      	bne.n	80049bc <UART_SetConfig+0x218>
 8004970:	4b45      	ldr	r3, [pc, #276]	; (8004a88 <UART_SetConfig+0x2e4>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800497a:	2bc0      	cmp	r3, #192	; 0xc0
 800497c:	d016      	beq.n	80049ac <UART_SetConfig+0x208>
 800497e:	2bc0      	cmp	r3, #192	; 0xc0
 8004980:	d818      	bhi.n	80049b4 <UART_SetConfig+0x210>
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d00a      	beq.n	800499c <UART_SetConfig+0x1f8>
 8004986:	2b80      	cmp	r3, #128	; 0x80
 8004988:	d814      	bhi.n	80049b4 <UART_SetConfig+0x210>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <UART_SetConfig+0x1f0>
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d008      	beq.n	80049a4 <UART_SetConfig+0x200>
 8004992:	e00f      	b.n	80049b4 <UART_SetConfig+0x210>
 8004994:	2300      	movs	r3, #0
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499a:	e082      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800499c:	2302      	movs	r3, #2
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a2:	e07e      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049aa:	e07a      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b2:	e076      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ba:	e072      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a35      	ldr	r2, [pc, #212]	; (8004a98 <UART_SetConfig+0x2f4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d12a      	bne.n	8004a1c <UART_SetConfig+0x278>
 80049c6:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <UART_SetConfig+0x2e4>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d4:	d01a      	beq.n	8004a0c <UART_SetConfig+0x268>
 80049d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049da:	d81b      	bhi.n	8004a14 <UART_SetConfig+0x270>
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d00c      	beq.n	80049fc <UART_SetConfig+0x258>
 80049e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e6:	d815      	bhi.n	8004a14 <UART_SetConfig+0x270>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <UART_SetConfig+0x250>
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f0:	d008      	beq.n	8004a04 <UART_SetConfig+0x260>
 80049f2:	e00f      	b.n	8004a14 <UART_SetConfig+0x270>
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fa:	e052      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049fc:	2302      	movs	r3, #2
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a02:	e04e      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0a:	e04a      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a12:	e046      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1a:	e042      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <UART_SetConfig+0x2dc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d13a      	bne.n	8004a9c <UART_SetConfig+0x2f8>
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <UART_SetConfig+0x2e4>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a34:	d01a      	beq.n	8004a6c <UART_SetConfig+0x2c8>
 8004a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a3a:	d81b      	bhi.n	8004a74 <UART_SetConfig+0x2d0>
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a40:	d00c      	beq.n	8004a5c <UART_SetConfig+0x2b8>
 8004a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a46:	d815      	bhi.n	8004a74 <UART_SetConfig+0x2d0>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <UART_SetConfig+0x2b0>
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d008      	beq.n	8004a64 <UART_SetConfig+0x2c0>
 8004a52:	e00f      	b.n	8004a74 <UART_SetConfig+0x2d0>
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5a:	e022      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a62:	e01e      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a64:	2304      	movs	r3, #4
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6a:	e01a      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a72:	e016      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a74:	2310      	movs	r3, #16
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7a:	e012      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a7c:	cfff69f3 	.word	0xcfff69f3
 8004a80:	40008000 	.word	0x40008000
 8004a84:	40013800 	.word	0x40013800
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40004400 	.word	0x40004400
 8004a90:	40004800 	.word	0x40004800
 8004a94:	40004c00 	.word	0x40004c00
 8004a98:	40005000 	.word	0x40005000
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4ab0      	ldr	r2, [pc, #704]	; (8004d68 <UART_SetConfig+0x5c4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	f040 809b 	bne.w	8004be4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d827      	bhi.n	8004b06 <UART_SetConfig+0x362>
 8004ab6:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <UART_SetConfig+0x318>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004ae1 	.word	0x08004ae1
 8004ac0:	08004ae9 	.word	0x08004ae9
 8004ac4:	08004af1 	.word	0x08004af1
 8004ac8:	08004b07 	.word	0x08004b07
 8004acc:	08004af7 	.word	0x08004af7
 8004ad0:	08004b07 	.word	0x08004b07
 8004ad4:	08004b07 	.word	0x08004b07
 8004ad8:	08004b07 	.word	0x08004b07
 8004adc:	08004aff 	.word	0x08004aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae0:	f7fe fec6 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 8004ae4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ae6:	e014      	b.n	8004b12 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae8:	f7fe fed6 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8004aec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aee:	e010      	b.n	8004b12 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af0:	4b9e      	ldr	r3, [pc, #632]	; (8004d6c <UART_SetConfig+0x5c8>)
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004af4:	e00d      	b.n	8004b12 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af6:	f7fe fe09 	bl	800370c <HAL_RCC_GetSysClockFreq>
 8004afa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004afc:	e009      	b.n	8004b12 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b04:	e005      	b.n	8004b12 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8130 	beq.w	8004d7a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	4a94      	ldr	r2, [pc, #592]	; (8004d70 <UART_SetConfig+0x5cc>)
 8004b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b24:	461a      	mov	r2, r3
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d305      	bcc.n	8004b4a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d903      	bls.n	8004b52 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b50:	e113      	b.n	8004d7a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	2200      	movs	r2, #0
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	60fa      	str	r2, [r7, #12]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	4a84      	ldr	r2, [pc, #528]	; (8004d70 <UART_SetConfig+0x5cc>)
 8004b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2200      	movs	r2, #0
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b74:	f7fb fb5e 	bl	8000234 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	020b      	lsls	r3, r1, #8
 8004b8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b8e:	0202      	lsls	r2, r0, #8
 8004b90:	6979      	ldr	r1, [r7, #20]
 8004b92:	6849      	ldr	r1, [r1, #4]
 8004b94:	0849      	lsrs	r1, r1, #1
 8004b96:	2000      	movs	r0, #0
 8004b98:	460c      	mov	r4, r1
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	eb12 0804 	adds.w	r8, r2, r4
 8004ba0:	eb43 0905 	adc.w	r9, r3, r5
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	469a      	mov	sl, r3
 8004bac:	4693      	mov	fp, r2
 8004bae:	4652      	mov	r2, sl
 8004bb0:	465b      	mov	r3, fp
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	f7fb fb3d 	bl	8000234 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc8:	d308      	bcc.n	8004bdc <UART_SetConfig+0x438>
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd0:	d204      	bcs.n	8004bdc <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a3a      	ldr	r2, [r7, #32]
 8004bd8:	60da      	str	r2, [r3, #12]
 8004bda:	e0ce      	b.n	8004d7a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004be2:	e0ca      	b.n	8004d7a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bec:	d166      	bne.n	8004cbc <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004bee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d827      	bhi.n	8004c46 <UART_SetConfig+0x4a2>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0x458>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe fe26 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 8004c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c26:	e014      	b.n	8004c52 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe fe36 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c2e:	e010      	b.n	8004c52 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b4e      	ldr	r3, [pc, #312]	; (8004d6c <UART_SetConfig+0x5c8>)
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c34:	e00d      	b.n	8004c52 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe fd69 	bl	800370c <HAL_RCC_GetSysClockFreq>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c3c:	e009      	b.n	8004c52 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c44:	e005      	b.n	8004c52 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8090 	beq.w	8004d7a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	4a44      	ldr	r2, [pc, #272]	; (8004d70 <UART_SetConfig+0x5cc>)
 8004c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c6c:	005a      	lsls	r2, r3, #1
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	441a      	add	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b0f      	cmp	r3, #15
 8004c84:	d916      	bls.n	8004cb4 <UART_SetConfig+0x510>
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8c:	d212      	bcs.n	8004cb4 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f023 030f 	bic.w	r3, r3, #15
 8004c96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	8bfb      	ldrh	r3, [r7, #30]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	8bfa      	ldrh	r2, [r7, #30]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	e062      	b.n	8004d7a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cba:	e05e      	b.n	8004d7a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d828      	bhi.n	8004d16 <UART_SetConfig+0x572>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0x528>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	08004d17 	.word	0x08004d17
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004d17 	.word	0x08004d17
 8004ce4:	08004d17 	.word	0x08004d17
 8004ce8:	08004d17 	.word	0x08004d17
 8004cec:	08004d0f 	.word	0x08004d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe fdbe 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cf6:	e014      	b.n	8004d22 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe fdce 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8004cfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cfe:	e010      	b.n	8004d22 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d00:	4b1a      	ldr	r3, [pc, #104]	; (8004d6c <UART_SetConfig+0x5c8>)
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d04:	e00d      	b.n	8004d22 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d06:	f7fe fd01 	bl	800370c <HAL_RCC_GetSysClockFreq>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d0c:	e009      	b.n	8004d22 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d14:	e005      	b.n	8004d22 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d20:	bf00      	nop
    }

    if (pclk != 0U)
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d028      	beq.n	8004d7a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <UART_SetConfig+0x5cc>)
 8004d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d32:	461a      	mov	r2, r3
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	441a      	add	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	2b0f      	cmp	r3, #15
 8004d50:	d910      	bls.n	8004d74 <UART_SetConfig+0x5d0>
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d20c      	bcs.n	8004d74 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60da      	str	r2, [r3, #12]
 8004d64:	e009      	b.n	8004d7a <UART_SetConfig+0x5d6>
 8004d66:	bf00      	nop
 8004d68:	40008000 	.word	0x40008000
 8004d6c:	00f42400 	.word	0x00f42400
 8004d70:	0800588c 	.word	0x0800588c
      }
      else
      {
        ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2200      	movs	r2, #0
 8004d94:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3730      	adds	r7, #48	; 0x30
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01a      	beq.n	8004eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea2:	d10a      	bne.n	8004eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b098      	sub	sp, #96	; 0x60
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef8:	f7fc f954 	bl	80011a4 <HAL_GetTick>
 8004efc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d12f      	bne.n	8004f6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f14:	2200      	movs	r2, #0
 8004f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f88e 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d022      	beq.n	8004f6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f44:	647b      	str	r3, [r7, #68]	; 0x44
 8004f46:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e6      	bne.n	8004f26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e063      	b.n	8005034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d149      	bne.n	800500e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f82:	2200      	movs	r2, #0
 8004f84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f857 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d03c      	beq.n	800500e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e6      	bne.n	8004f94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe6:	61fa      	str	r2, [r7, #28]
 8004fe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	69b9      	ldr	r1, [r7, #24]
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e5      	bne.n	8004fc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e012      	b.n	8005034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3758      	adds	r7, #88	; 0x58
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504c:	e049      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d045      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005056:	f7fc f8a5 	bl	80011a4 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <UART_WaitOnFlagUntilTimeout+0x30>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e048      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d031      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b08      	cmp	r3, #8
 800508a:	d110      	bne.n	80050ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2208      	movs	r2, #8
 8005092:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f838 	bl	800510a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2208      	movs	r2, #8
 800509e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e029      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050bc:	d111      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f81e 	bl	800510a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e00f      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	bf0c      	ite	eq
 80050f2:	2301      	moveq	r3, #1
 80050f4:	2300      	movne	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d0a6      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510a:	b480      	push	{r7}
 800510c:	b095      	sub	sp, #84	; 0x54
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005130:	643b      	str	r3, [r7, #64]	; 0x40
 8005132:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e6      	bne.n	8005112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	61fb      	str	r3, [r7, #28]
   return(result);
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005168:	62fa      	str	r2, [r7, #44]	; 0x2c
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e3      	bne.n	8005144 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d118      	bne.n	80051b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	60bb      	str	r3, [r7, #8]
   return(result);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f023 0310 	bic.w	r3, r3, #16
 8005198:	647b      	str	r3, [r7, #68]	; 0x44
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6979      	ldr	r1, [r7, #20]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	613b      	str	r3, [r7, #16]
   return(result);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80051ca:	bf00      	nop
 80051cc:	3754      	adds	r7, #84	; 0x54
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_UARTEx_DisableFifoMode+0x16>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e027      	b.n	800523c <HAL_UARTEx_DisableFifoMode+0x66>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2224      	movs	r2, #36	; 0x24
 80051f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800521a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800525c:	2302      	movs	r3, #2
 800525e:	e02d      	b.n	80052bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2224      	movs	r2, #36	; 0x24
 800526c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f84f 	bl	8005340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052d8:	2302      	movs	r3, #2
 80052da:	e02d      	b.n	8005338 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2224      	movs	r2, #36	; 0x24
 80052e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f811 	bl	8005340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005360:	e031      	b.n	80053c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005362:	2308      	movs	r3, #8
 8005364:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005366:	2308      	movs	r3, #8
 8005368:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	0e5b      	lsrs	r3, r3, #25
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	0f5b      	lsrs	r3, r3, #29
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800538a:	7bbb      	ldrb	r3, [r7, #14]
 800538c:	7b3a      	ldrb	r2, [r7, #12]
 800538e:	4911      	ldr	r1, [pc, #68]	; (80053d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005390:	5c8a      	ldrb	r2, [r1, r2]
 8005392:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005396:	7b3a      	ldrb	r2, [r7, #12]
 8005398:	490f      	ldr	r1, [pc, #60]	; (80053d8 <UARTEx_SetNbDataToProcess+0x98>)
 800539a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800539c:	fb93 f3f2 	sdiv	r3, r3, r2
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	7b7a      	ldrb	r2, [r7, #13]
 80053ac:	4909      	ldr	r1, [pc, #36]	; (80053d4 <UARTEx_SetNbDataToProcess+0x94>)
 80053ae:	5c8a      	ldrb	r2, [r1, r2]
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053b4:	7b7a      	ldrb	r2, [r7, #13]
 80053b6:	4908      	ldr	r1, [pc, #32]	; (80053d8 <UARTEx_SetNbDataToProcess+0x98>)
 80053b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80053be:	b29a      	uxth	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	080058a4 	.word	0x080058a4
 80053d8:	080058ac 	.word	0x080058ac

080053dc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80053dc:	b480      	push	{r7}
 80053de:	b08b      	sub	sp, #44	; 0x2c
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	613b      	str	r3, [r7, #16]
  return result;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005402:	2320      	movs	r3, #32
 8005404:	e003      	b.n	800540e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	b2db      	uxtb	r3, r3
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	2103      	movs	r1, #3
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	401a      	ands	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	fa93 f3a3 	rbit	r3, r3
 8005424:	61fb      	str	r3, [r7, #28]
  return result;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005430:	2320      	movs	r3, #32
 8005432:	e003      	b.n	800543c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	fab3 f383 	clz	r3, r3
 800543a:	b2db      	uxtb	r3, r3
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	601a      	str	r2, [r3, #0]
}
 800544a:	bf00      	nop
 800544c:	372c      	adds	r7, #44	; 0x2c
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	43db      	mvns	r3, r3
 800546a:	401a      	ands	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	fb01 f303 	mul.w	r3, r1, r3
 8005474:	431a      	orrs	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	605a      	str	r2, [r3, #4]
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005486:	b480      	push	{r7}
 8005488:	b08b      	sub	sp, #44	; 0x2c
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	613b      	str	r3, [r7, #16]
  return result;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80054ac:	2320      	movs	r3, #32
 80054ae:	e003      	b.n	80054b8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	fab3 f383 	clz	r3, r3
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	2103      	movs	r1, #3
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	401a      	ands	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	61fb      	str	r3, [r7, #28]
  return result;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80054da:	2320      	movs	r3, #32
 80054dc:	e003      	b.n	80054e6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	fab3 f383 	clz	r3, r3
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	fa01 f303 	lsl.w	r3, r1, r3
 80054ee:	431a      	orrs	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80054f4:	bf00      	nop
 80054f6:	372c      	adds	r7, #44	; 0x2c
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005500:	b480      	push	{r7}
 8005502:	b08b      	sub	sp, #44	; 0x2c
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	fa93 f3a3 	rbit	r3, r3
 800551a:	613b      	str	r3, [r7, #16]
  return result;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005526:	2320      	movs	r3, #32
 8005528:	e003      	b.n	8005532 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	fab3 f383 	clz	r3, r3
 8005530:	b2db      	uxtb	r3, r3
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	2103      	movs	r1, #3
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	43db      	mvns	r3, r3
 800553c:	401a      	ands	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	fa93 f3a3 	rbit	r3, r3
 8005548:	61fb      	str	r3, [r7, #28]
  return result;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005554:	2320      	movs	r3, #32
 8005556:	e003      	b.n	8005560 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	fab3 f383 	clz	r3, r3
 800555e:	b2db      	uxtb	r3, r3
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	431a      	orrs	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	60da      	str	r2, [r3, #12]
}
 800556e:	bf00      	nop
 8005570:	372c      	adds	r7, #44	; 0x2c
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800557a:	b480      	push	{r7}
 800557c:	b08b      	sub	sp, #44	; 0x2c
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	fa93 f3a3 	rbit	r3, r3
 8005594:	613b      	str	r3, [r7, #16]
  return result;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80055a0:	2320      	movs	r3, #32
 80055a2:	e003      	b.n	80055ac <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	fab3 f383 	clz	r3, r3
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	210f      	movs	r1, #15
 80055b0:	fa01 f303 	lsl.w	r3, r1, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	401a      	ands	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	fa93 f3a3 	rbit	r3, r3
 80055c2:	61fb      	str	r3, [r7, #28]
  return result;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80055ce:	2320      	movs	r3, #32
 80055d0:	e003      	b.n	80055da <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	fab3 f383 	clz	r3, r3
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	fa01 f303 	lsl.w	r3, r1, r3
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80055e8:	bf00      	nop
 80055ea:	372c      	adds	r7, #44	; 0x2c
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b08b      	sub	sp, #44	; 0x2c
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	613b      	str	r3, [r7, #16]
  return result;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800561c:	2320      	movs	r3, #32
 800561e:	e003      	b.n	8005628 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	fab3 f383 	clz	r3, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	210f      	movs	r1, #15
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	401a      	ands	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	fa93 f3a3 	rbit	r3, r3
 8005640:	61fb      	str	r3, [r7, #28]
  return result;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800564c:	2320      	movs	r3, #32
 800564e:	e003      	b.n	8005658 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	fab3 f383 	clz	r3, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	fa01 f303 	lsl.w	r3, r1, r3
 8005660:	431a      	orrs	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005666:	bf00      	nop
 8005668:	372c      	adds	r7, #44	; 0x2c
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b088      	sub	sp, #32
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	fa93 f3a3 	rbit	r3, r3
 8005688:	60fb      	str	r3, [r7, #12]
  return result;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <LL_GPIO_Init+0x26>
    return 32U;
 8005694:	2320      	movs	r3, #32
 8005696:	e003      	b.n	80056a0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	fab3 f383 	clz	r3, r3
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80056a2:	e047      	b.n	8005734 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	2101      	movs	r1, #1
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	fa01 f303 	lsl.w	r3, r1, r3
 80056b0:	4013      	ands	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d039      	beq.n	800572e <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d003      	beq.n	80056ca <LL_GPIO_Init+0x58>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d10d      	bne.n	80056e6 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	461a      	mov	r2, r3
 80056d0:	69b9      	ldr	r1, [r7, #24]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fed7 	bl	8005486 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	461a      	mov	r2, r3
 80056de:	69b9      	ldr	r1, [r7, #24]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff feb8 	bl	8005456 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	461a      	mov	r2, r3
 80056ec:	69b9      	ldr	r1, [r7, #24]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff ff06 	bl	8005500 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d111      	bne.n	8005720 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2bff      	cmp	r3, #255	; 0xff
 8005700:	d807      	bhi.n	8005712 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	461a      	mov	r2, r3
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff ff35 	bl	800557a <LL_GPIO_SetAFPin_0_7>
 8005710:	e006      	b.n	8005720 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	461a      	mov	r2, r3
 8005718:	69b9      	ldr	r1, [r7, #24]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff ff6a 	bl	80055f4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	461a      	mov	r2, r3
 8005726:	69b9      	ldr	r1, [r7, #24]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fe57 	bl	80053dc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3301      	adds	r3, #1
 8005732:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1b0      	bne.n	80056a4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005754:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005758:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	b29b      	uxth	r3, r3
 8005766:	43db      	mvns	r3, r3
 8005768:	b29b      	uxth	r3, r3
 800576a:	4013      	ands	r3, r2
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005782:	b084      	sub	sp, #16
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	f107 0014 	add.w	r0, r7, #20
 8005790:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	b004      	add	sp, #16
 80057c2:	4770      	bx	lr

080057c4 <memset>:
 80057c4:	4402      	add	r2, r0
 80057c6:	4603      	mov	r3, r0
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d100      	bne.n	80057ce <memset+0xa>
 80057cc:	4770      	bx	lr
 80057ce:	f803 1b01 	strb.w	r1, [r3], #1
 80057d2:	e7f9      	b.n	80057c8 <memset+0x4>

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4d0d      	ldr	r5, [pc, #52]	; (800580c <__libc_init_array+0x38>)
 80057d8:	2600      	movs	r6, #0
 80057da:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <__libc_init_array+0x3c>)
 80057dc:	1b64      	subs	r4, r4, r5
 80057de:	10a4      	asrs	r4, r4, #2
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4d0b      	ldr	r5, [pc, #44]	; (8005814 <__libc_init_array+0x40>)
 80057e6:	2600      	movs	r6, #0
 80057e8:	4c0b      	ldr	r4, [pc, #44]	; (8005818 <__libc_init_array+0x44>)
 80057ea:	f000 f817 	bl	800581c <_init>
 80057ee:	1b64      	subs	r4, r4, r5
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	3601      	adds	r6, #1
 80057fe:	4798      	blx	r3
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	3601      	adds	r6, #1
 8005808:	4798      	blx	r3
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	080058bc 	.word	0x080058bc
 8005810:	080058bc 	.word	0x080058bc
 8005814:	080058bc 	.word	0x080058bc
 8005818:	080058c0 	.word	0x080058c0

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr
